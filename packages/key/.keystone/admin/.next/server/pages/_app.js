/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "../../node_modules/@babel/runtime/helpers/defineProperty.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixtQkFBbUIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzPzlhODIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@babel/runtime/helpers/defineProperty.js\n");

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/extends.js":
/*!************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/extends.js ***!
  \************************************************************/
/***/ ((module) => {

eval("function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFLHlCQUF5QixtQkFBbUIseUJBQXlCO0FBQ3ZFO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsbUJBQW1CLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzPzMxZDgiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@babel/runtime/helpers/extends.js\n");

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/objectSpread2.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/objectSpread2.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var defineProperty = __webpack_require__(/*! ./defineProperty.js */ \"../../node_modules/@babel/runtime/helpers/defineProperty.js\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUIsbUJBQU8sQ0FBQyx3RkFBcUI7O0FBRWxEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLG1CQUFtQix5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMi5qcz8zOTg2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL2RlZmluZVByb3BlcnR5LmpzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG5cbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHtcbiAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFNwcmVhZDI7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@babel/runtime/helpers/objectSpread2.js\n");

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var objectWithoutPropertiesLoose = __webpack_require__(/*! ./objectWithoutPropertiesLoose.js */ \"../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DLG1CQUFPLENBQUMsb0hBQW1DOztBQUU5RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQiw2QkFBNkI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsbUJBQW1CLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcz9iNTQ2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlID0gcmVxdWlyZShcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qc1wiKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\n");

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/***/ ((module) => {

eval("function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsdUJBQXVCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsbUJBQW1CLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzPzBjMzIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\n");

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/toPrimitive.js":
/*!****************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/toPrimitive.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var _typeof = (__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"../../node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"]);\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nmodule.exports = _toPrimitive;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9QcmltaXRpdmUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyw0SEFBbUQ7O0FBRWpFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsbUJBQW1CLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b1ByaW1pdGl2ZS5qcz8xYjQ5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpW1wiZGVmYXVsdFwiXTtcblxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7XG4gIGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O1xuICB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG5cbiAgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG5cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvUHJpbWl0aXZlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@babel/runtime/helpers/toPrimitive.js\n");

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/toPropertyKey.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/toPropertyKey.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var _typeof = (__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"../../node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"]);\n\nvar toPrimitive = __webpack_require__(/*! ./toPrimitive.js */ \"../../node_modules/@babel/runtime/helpers/toPrimitive.js\");\n\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nmodule.exports = _toPropertyKey;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Qcm9wZXJ0eUtleS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLDRIQUFtRDs7QUFFakUsa0JBQWtCLG1CQUFPLENBQUMsa0ZBQWtCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixtQkFBbUIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvUHJvcGVydHlLZXkuanM/MThiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKVtcImRlZmF1bHRcIl07XG5cbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoXCIuL3RvUHJpbWl0aXZlLmpzXCIpO1xuXG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7XG4gIHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Qcm9wZXJ0eUtleTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@babel/runtime/helpers/toPropertyKey.js\n");

/***/ }),

/***/ "../../node_modules/@babel/runtime/helpers/typeof.js":
/*!***********************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/typeof.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSx5QkFBeUIsbUJBQW1CLHlCQUF5QjtBQUN6RSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLElBQUkseUJBQXlCLG1CQUFtQix5QkFBeUI7QUFDekU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixtQkFBbUIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcz82MjhjIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcblxuICAgIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcblxuICAgIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@babel/runtime/helpers/typeof.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/fields-document/dist/api-fdd916d1.cjs.dev.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/fields-document/dist/api-fdd916d1.cjs.dev.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\nvar _objectWithoutProperties = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields$1 = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar sanitizeUrl = __webpack_require__(/*! @braintree/sanitize-url */ \"@braintree/sanitize-url\");\n\nfunction isValidURL(url) {\n  return url === sanitizeUrl.sanitizeUrl(url);\n}\n\nconst _excluded = [\"children\"];\nconst fields = {\n  text(_ref) {\n    let {\n      label,\n      defaultValue = ''\n    } = _ref;\n    return {\n      kind: 'form',\n\n      Input(_ref2) {\n        let {\n          value,\n          onChange,\n          autoFocus\n        } = _ref2;\n        return core.jsx(fields$1.FieldContainer, null, core.jsx(fields$1.FieldLabel, null, label), core.jsx(fields$1.TextInput, {\n          autoFocus: autoFocus,\n          value: value,\n          onChange: event => {\n            onChange(event.target.value);\n          }\n        }));\n      },\n\n      options: undefined,\n      defaultValue,\n\n      validate(value) {\n        return typeof value === 'string';\n      }\n\n    };\n  },\n\n  url(_ref3) {\n    let {\n      label,\n      defaultValue = ''\n    } = _ref3;\n\n    const validate = value => {\n      return typeof value === 'string' && (value === '' || isValidURL(value));\n    };\n\n    return {\n      kind: 'form',\n\n      Input(_ref4) {\n        let {\n          value,\n          onChange,\n          autoFocus,\n          forceValidation\n        } = _ref4;\n        const [blurred, setBlurred] = React.useState(false);\n        const showValidation = forceValidation || blurred && !validate(value);\n        return core.jsx(fields$1.FieldContainer, null, core.jsx(fields$1.FieldLabel, null, label), core.jsx(fields$1.TextInput, {\n          onBlur: () => {\n            setBlurred(true);\n          },\n          autoFocus: autoFocus,\n          value: value,\n          onChange: event => {\n            onChange(event.target.value);\n          }\n        }), showValidation && core.jsx(\"span\", {\n          css: {\n            color: 'red'\n          }\n        }, \"Please provide a valid URL\"));\n      },\n\n      options: undefined,\n      defaultValue,\n      validate\n    };\n  },\n\n  select(_ref5) {\n    let {\n      label,\n      options,\n      defaultValue\n    } = _ref5;\n    const optionValuesSet = new Set(options.map(x => x.value));\n    return {\n      kind: 'form',\n\n      Input(_ref6) {\n        let {\n          value,\n          onChange,\n          autoFocus\n        } = _ref6;\n        return core.jsx(fields$1.FieldContainer, null, core.jsx(fields$1.FieldLabel, null, label), core.jsx(fields$1.Select, {\n          autoFocus: autoFocus,\n          value: options.find(option => option.value === value) || null,\n          onChange: option => {\n            if (option) {\n              onChange(option.value);\n            }\n          },\n          options: options\n        }));\n      },\n\n      options,\n      defaultValue,\n\n      validate(value) {\n        return typeof value === 'string' && optionValuesSet.has(value);\n      }\n\n    };\n  },\n\n  multiselect(_ref7) {\n    let {\n      label,\n      options,\n      defaultValue\n    } = _ref7;\n    const valuesToOption = new Map(options.map(x => [x.value, x]));\n    return {\n      kind: 'form',\n\n      Input(_ref8) {\n        let {\n          value,\n          onChange,\n          autoFocus\n        } = _ref8;\n        return core.jsx(fields$1.FieldContainer, null, core.jsx(fields$1.FieldLabel, null, label), core.jsx(fields$1.MultiSelect, {\n          autoFocus: autoFocus,\n          value: value.map(x => valuesToOption.get(x)),\n          options: options,\n          onChange: options => {\n            onChange(options.map(x => x.value));\n          }\n        }));\n      },\n\n      options,\n      defaultValue,\n\n      validate(value) {\n        return Array.isArray(value) && value.every(value => typeof value === 'string' && valuesToOption.has(value));\n      }\n\n    };\n  },\n\n  checkbox(_ref9) {\n    let {\n      label,\n      defaultValue = false\n    } = _ref9;\n    return {\n      kind: 'form',\n\n      Input(_ref10) {\n        let {\n          value,\n          onChange,\n          autoFocus\n        } = _ref10;\n        return core.jsx(fields$1.FieldContainer, null, core.jsx(fields$1.Checkbox, {\n          checked: value,\n          autoFocus: autoFocus,\n          onChange: event => {\n            onChange(event.target.checked);\n          }\n        }, label));\n      },\n\n      options: undefined,\n      defaultValue,\n\n      validate(value) {\n        return typeof value === 'boolean';\n      }\n\n    };\n  },\n\n  empty() {\n    return {\n      kind: 'form',\n\n      Input() {\n        return null;\n      },\n\n      options: undefined,\n      defaultValue: undefined,\n\n      validate(value) {\n        return value === undefined;\n      }\n\n    };\n  },\n\n  child(options) {\n    return {\n      kind: 'child',\n      options: options.kind === 'block' ? {\n        kind: 'block',\n        placeholder: options.placeholder,\n        dividers: options.dividers,\n        formatting: options.formatting === 'inherit' ? {\n          blockTypes: 'inherit',\n          headingLevels: 'inherit',\n          inlineMarks: 'inherit',\n          listTypes: 'inherit',\n          alignment: 'inherit',\n          softBreaks: 'inherit'\n        } : options.formatting,\n        links: options.links,\n        relationships: options.relationships\n      } : {\n        kind: 'inline',\n        placeholder: options.placeholder,\n        formatting: options.formatting === 'inherit' ? {\n          inlineMarks: 'inherit',\n          softBreaks: 'inherit'\n        } : options.formatting,\n        links: options.links,\n        relationships: options.relationships\n      }\n    };\n  },\n\n  object(value) {\n    return {\n      kind: 'object',\n      value\n    };\n  },\n\n  conditional(discriminant, values) {\n    return {\n      kind: 'conditional',\n      discriminant,\n      values: values\n    };\n  },\n\n  relationship(_ref11) {\n    let {\n      relationship,\n      label\n    } = _ref11;\n    return {\n      kind: 'relationship',\n      relationship,\n      label\n    };\n  }\n\n};\nfunction component(options) {\n  return options;\n}\nconst NotEditable = _ref12 => {\n  let {\n    children\n  } = _ref12,\n      props = _objectWithoutProperties(_ref12, _excluded);\n\n  return core.jsx(\"span\", _extends({\n    css: {\n      userSelect: 'none'\n    },\n    contentEditable: false\n  }, props), children);\n};\n\nexports.NotEditable = NotEditable;\nexports.component = component;\nexports.fields = fields;\nexports.isValidURL = isValidURL;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/fields-document/dist/api-fdd916d1.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/fields-document/dist/index-173c901b.cjs.dev.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/fields-document/dist/index-173c901b.cjs.dev.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar isHotkey = __webpack_require__(/*! is-hotkey */ \"is-hotkey\");\nvar slate = __webpack_require__(/*! slate */ \"slate\");\nvar slateReact = __webpack_require__(/*! slate-react */ \"slate-react\");\nvar slateHistory = __webpack_require__(/*! slate-history */ \"slate-history\");\nvar popover = __webpack_require__(/*! @keystone-ui/popover */ \"@keystone-ui/popover\");\nvar tooltip = __webpack_require__(/*! @keystone-ui/tooltip */ \"@keystone-ui/tooltip\");\nvar LinkIcon = __webpack_require__(/*! @keystone-ui/icons/icons/LinkIcon */ \"@keystone-ui/icons/icons/LinkIcon\");\nvar Trash2Icon = __webpack_require__(/*! @keystone-ui/icons/icons/Trash2Icon */ \"@keystone-ui/icons/icons/Trash2Icon\");\nvar ExternalLinkIcon = __webpack_require__(/*! @keystone-ui/icons/icons/ExternalLinkIcon */ \"@keystone-ui/icons/icons/ExternalLinkIcon\");\nvar toolbar = __webpack_require__(/*! ./toolbar-7e0e994e.cjs.dev.js */ \"../../node_modules/@keystone-next/fields-document/dist/toolbar-7e0e994e.cjs.dev.js\");\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar api = __webpack_require__(/*! ./api-fdd916d1.cjs.dev.js */ \"../../node_modules/@keystone-next/fields-document/dist/api-fdd916d1.cjs.dev.js\");\nvar context = __webpack_require__(/*! @keystone-next/keystone/admin-ui/context */ \"@keystone-next/keystone/admin-ui/context\");\nvar RelationshipSelect = __webpack_require__(/*! @keystone-next/keystone/fields/types/relationship/views/RelationshipSelect */ \"@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect\");\nvar _objectWithoutProperties = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar button = __webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\nvar weakMemoize = __webpack_require__(/*! @emotion/weak-memoize */ \"@emotion/weak-memoize\");\nvar ColumnsIcon = __webpack_require__(/*! @keystone-ui/icons/icons/ColumnsIcon */ \"@keystone-ui/icons/icons/ColumnsIcon\");\nvar applyRef = __webpack_require__(/*! apply-ref */ \"apply-ref\");\nvar BoldIcon = __webpack_require__(/*! @keystone-ui/icons/icons/BoldIcon */ \"@keystone-ui/icons/icons/BoldIcon\");\nvar ItalicIcon = __webpack_require__(/*! @keystone-ui/icons/icons/ItalicIcon */ \"@keystone-ui/icons/icons/ItalicIcon\");\nvar PlusIcon = __webpack_require__(/*! @keystone-ui/icons/icons/PlusIcon */ \"@keystone-ui/icons/icons/PlusIcon\");\nvar ChevronDownIcon = __webpack_require__(/*! @keystone-ui/icons/icons/ChevronDownIcon */ \"@keystone-ui/icons/icons/ChevronDownIcon\");\nvar Maximize2Icon = __webpack_require__(/*! @keystone-ui/icons/icons/Maximize2Icon */ \"@keystone-ui/icons/icons/Maximize2Icon\");\nvar Minimize2Icon = __webpack_require__(/*! @keystone-ui/icons/icons/Minimize2Icon */ \"@keystone-ui/icons/icons/Minimize2Icon\");\nvar MoreHorizontalIcon = __webpack_require__(/*! @keystone-ui/icons/icons/MoreHorizontalIcon */ \"@keystone-ui/icons/icons/MoreHorizontalIcon\");\nvar CodeIcon = __webpack_require__(/*! @keystone-ui/icons/icons/CodeIcon */ \"@keystone-ui/icons/icons/CodeIcon\");\nvar AlignLeftIcon = __webpack_require__(/*! @keystone-ui/icons/icons/AlignLeftIcon */ \"@keystone-ui/icons/icons/AlignLeftIcon\");\nvar AlignRightIcon = __webpack_require__(/*! @keystone-ui/icons/icons/AlignRightIcon */ \"@keystone-ui/icons/icons/AlignRightIcon\");\nvar AlignCenterIcon = __webpack_require__(/*! @keystone-ui/icons/icons/AlignCenterIcon */ \"@keystone-ui/icons/icons/AlignCenterIcon\");\nvar MinusIcon = __webpack_require__(/*! @keystone-ui/icons/icons/MinusIcon */ \"@keystone-ui/icons/icons/MinusIcon\");\nvar matchSorter = __webpack_require__(/*! match-sorter */ \"match-sorter\");\nvar scrollIntoView = __webpack_require__(/*! scroll-into-view-if-needed */ \"scroll-into-view-if-needed\");\nvar mdASTUtilFromMarkdown = __webpack_require__(/*! mdast-util-from-markdown */ \"mdast-util-from-markdown\");\nvar autoLinkLiteralFromMarkdownExtension = __webpack_require__(/*! mdast-util-gfm-autolink-literal/from-markdown */ \"mdast-util-gfm-autolink-literal/from-markdown\");\nvar autoLinkLiteralMarkdownSyntax = __webpack_require__(/*! micromark-extension-gfm-autolink-literal */ \"micromark-extension-gfm-autolink-literal\");\nvar gfmStrikethroughFromMarkdownExtension = __webpack_require__(/*! mdast-util-gfm-strikethrough/from-markdown */ \"mdast-util-gfm-strikethrough/from-markdown\");\nvar gfmStrikethroughMarkdownSyntax = __webpack_require__(/*! micromark-extension-gfm-strikethrough */ \"micromark-extension-gfm-strikethrough\");\nvar definitions = __webpack_require__(/*! mdast-util-definitions */ \"mdast-util-definitions\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar React__default = /*#__PURE__*/_interopDefault(React);\nvar isHotkey__default = /*#__PURE__*/_interopDefault(isHotkey);\nvar weakMemoize__default = /*#__PURE__*/_interopDefault(weakMemoize);\nvar scrollIntoView__default = /*#__PURE__*/_interopDefault(scrollIntoView);\nvar mdASTUtilFromMarkdown__default = /*#__PURE__*/_interopDefault(mdASTUtilFromMarkdown);\nvar autoLinkLiteralFromMarkdownExtension__default = /*#__PURE__*/_interopDefault(autoLinkLiteralFromMarkdownExtension);\nvar autoLinkLiteralMarkdownSyntax__default = /*#__PURE__*/_interopDefault(autoLinkLiteralMarkdownSyntax);\nvar gfmStrikethroughFromMarkdownExtension__default = /*#__PURE__*/_interopDefault(gfmStrikethroughFromMarkdownExtension);\nvar gfmStrikethroughMarkdownSyntax__default = /*#__PURE__*/_interopDefault(gfmStrikethroughMarkdownSyntax);\nvar definitions__default = /*#__PURE__*/_interopDefault(definitions);\n\nconst paragraphElement = () => ({\n  type: 'paragraph',\n  children: [{\n    text: ''\n  }]\n});\nfunction withParagraphs(editor) {\n  const {\n    normalizeNode\n  } = editor;\n\n  editor.normalizeNode = entry => {\n    const [node, path] = entry;\n\n    if (slate.Editor.isEditor(node)) {\n      let lastNode = node.children[node.children.length - 1];\n\n      if ((lastNode === null || lastNode === void 0 ? void 0 : lastNode.type) !== 'paragraph') {\n        slate.Transforms.insertNodes(editor, paragraphElement(), {\n          at: [...path, node.children.length]\n        });\n        return;\n      }\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n}\n\nconst allMarks = ['bold', 'italic', 'underline', 'strikethrough', 'code', 'superscript', 'subscript', 'keyboard'];\nconst isElementActive = (editor, format) => {\n  const [match] = slate.Editor.nodes(editor, {\n    match: n => n.type === format\n  });\n  return !!match;\n};\nfunction clearFormatting(editor) {\n  slate.Transforms.unwrapNodes(editor, {\n    match: node => node.type === 'heading' || node.type === 'blockquote' || node.type === 'code'\n  });\n  slate.Transforms.unsetNodes(editor, allMarks, {\n    match: slate.Text.isText\n  });\n}\nfunction moveChildren(editor, parent, to) {\n  let shouldMoveNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => true;\n  const parentPath = slate.Path.isPath(parent) ? parent : parent[1];\n  const parentNode = slate.Path.isPath(parent) ? slate.Node.get(editor, parentPath) : parent[0];\n  if (!slate.Editor.isBlock(editor, parentNode)) return;\n\n  for (let i = parentNode.children.length - 1; i >= 0; i--) {\n    if (shouldMoveNode(parentNode.children[i])) {\n      const childPath = [...parentPath, i];\n      slate.Transforms.moveNodes(editor, {\n        at: childPath,\n        to\n      });\n    }\n  }\n} // this ensures that when changes happen, they are immediately shown\n// this stops the problem of a cursor resetting to the end when a change is made\n// because the changes are applied asynchronously\n\nfunction useElementWithSetNodes(editor, element) {\n  const [state, setState] = React.useState({\n    element,\n    elementWithChanges: element\n  });\n\n  if (state.element !== element) {\n    setState({\n      element,\n      elementWithChanges: element\n    });\n  }\n\n  const setNodes = changes => {\n    slate.Transforms.setNodes(editor, changes, {\n      at: slateReact.ReactEditor.findPath(editor, element)\n    });\n    setState({\n      element,\n      elementWithChanges: _objectSpread(_objectSpread({}, element), changes)\n    });\n  };\n\n  return [state.elementWithChanges, setNodes];\n}\nfunction useEventCallback(callback) {\n  const callbackRef = React.useRef(callback);\n  const cb = React.useCallback(function () {\n    return callbackRef.current(...arguments);\n  }, []);\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n  return cb;\n}\nconst IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\nconst modifierKeyText = IS_MAC ? '⌘' : 'Ctrl';\nconst ForceValidationContext = /*#__PURE__*/React__default[\"default\"].createContext(false);\nconst ForceValidationProvider = ForceValidationContext.Provider;\nfunction useForceValidation() {\n  return React.useContext(ForceValidationContext);\n}\nfunction insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, nodes) {\n  var _pathRefForEmptyNodeA;\n\n  let pathRefForEmptyNodeAtCursor;\n  const entry = slate.Editor.above(editor, {\n    match: node => node.type === 'heading' || node.type === 'paragraph'\n  });\n\n  if (entry && slate.Node.string(entry[0]) === '') {\n    pathRefForEmptyNodeAtCursor = slate.Editor.pathRef(editor, entry[1]);\n  }\n\n  slate.Transforms.insertNodes(editor, nodes);\n  let path = (_pathRefForEmptyNodeA = pathRefForEmptyNodeAtCursor) === null || _pathRefForEmptyNodeA === void 0 ? void 0 : _pathRefForEmptyNodeA.unref();\n\n  if (path) {\n    slate.Transforms.removeNodes(editor, {\n      at: path\n    }); // even though the selection is in the right place after the removeNodes\n    // for some reason the editor blurs so we need to focus it again\n\n    slateReact.ReactEditor.focus(editor);\n  }\n}\n/**\n * This is equivalent to Editor.after except that it ignores points that have no content\n * like the point in a void text node, an empty text node and the last point in a text node\n */\n// TODO: this would probably break if you were trying to get the last point in the editor?\n\nfunction EditorAfterButIgnoringingPointsWithNoContent(editor, at) {\n  let {\n    distance = 1\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const anchor = slate.Editor.point(editor, at, {\n    edge: 'end'\n  });\n  const focus = slate.Editor.end(editor, []);\n  const range = {\n    anchor,\n    focus\n  };\n  let d = 0;\n  let target;\n\n  for (const p of slate.Editor.positions(editor, {\n    at: range\n  })) {\n    if (d > distance) {\n      break;\n    } // this is the important change\n\n\n    const node = slate.Node.get(editor, p.path);\n\n    if (node.text.length === p.offset) {\n      continue;\n    }\n\n    if (d !== 0) {\n      target = p;\n    }\n\n    d++;\n  }\n\n  return target;\n}\nfunction nodeTypeMatcher() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args.length === 1) {\n    const type = args[0];\n    return node => node.type === type;\n  }\n\n  const set = new Set(args);\n  return node => typeof node.type === 'string' && set.has(node.type);\n}\nfunction assert(condition) {\n  if (!condition) {\n    throw new Error('failed assert');\n  }\n}\n\nconst DocumentFieldRelationshipsContext = /*#__PURE__*/React.createContext({});\nfunction useDocumentFieldRelationships() {\n  return React.useContext(DocumentFieldRelationshipsContext);\n}\nconst DocumentFieldRelationshipsProvider = DocumentFieldRelationshipsContext.Provider;\nfunction withRelationship(editor) {\n  const {\n    isVoid,\n    isInline\n  } = editor;\n\n  editor.isVoid = element => {\n    return element.type === 'relationship' || isVoid(element);\n  };\n\n  editor.isInline = element => {\n    return element.type === 'relationship' || isInline(element);\n  };\n\n  return editor;\n}\nfunction RelationshipButton(_ref) {\n  let {\n    onClose\n  } = _ref;\n  const {\n    editor,\n    relationships: {\n      isDisabled\n    }\n  } = useToolbarState();\n  const relationships = React.useContext(DocumentFieldRelationshipsContext);\n  return core.jsx(React.Fragment, null, Object.entries(relationships).map(_ref2 => {\n    let [key, relationship] = _ref2;\n    if (relationship.kind === 'prop') return null;\n    return core.jsx(toolbar.ToolbarButton, {\n      key: key,\n      isDisabled: isDisabled,\n      onMouseDown: event => {\n        event.preventDefault();\n        slate.Transforms.insertNodes(editor, {\n          type: 'relationship',\n          relationship: key,\n          data: null,\n          children: [{\n            text: ''\n          }]\n        });\n        onClose();\n      }\n    }, relationship.label);\n  }));\n}\nfunction RelationshipElement(_ref3) {\n  let {\n    attributes,\n    children,\n    element\n  } = _ref3;\n  const keystone = context.useKeystone();\n  const editor = slateReact.useSlateStatic();\n  const relationships = React.useContext(DocumentFieldRelationshipsContext);\n  const relationship = relationships[element.relationship];\n  return core.jsx(\"span\", _extends({}, attributes, {\n    css: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    }\n  }), core.jsx(\"span\", {\n    contentEditable: false,\n    css: {\n      userSelect: 'none',\n      width: 200,\n      display: 'inline-block',\n      paddingLeft: 4,\n      paddingRight: 4,\n      flex: 1\n    }\n  }, relationship ? core.jsx(RelationshipSelect.RelationshipSelect, {\n    controlShouldRenderValue: true,\n    isDisabled: false,\n    list: keystone.adminMeta.lists[relationship.listKey],\n    portalMenu: true,\n    state: {\n      kind: 'one',\n      value: element.data === null ? null : {\n        id: element.data.id,\n        label: element.data.label || element.data.id\n      },\n\n      onChange(value) {\n        slate.Transforms.setNodes(editor, {\n          data: value\n        }, {\n          at: slateReact.ReactEditor.findPath(editor, element)\n        });\n      }\n\n    }\n  }) : 'Invalid relationship'), core.jsx(\"span\", {\n    css: {\n      flex: 0\n    }\n  }, children));\n}\n\nfunction getInitialValue(type, componentBlock, relationships) {\n  const props = getInitialPropsValue({\n    kind: 'object',\n    value: componentBlock.props\n  }, relationships);\n  return {\n    type: 'component-block',\n    component: type,\n    props,\n    children: findChildPropPaths(props, componentBlock.props).map(x => ({\n      type: `component-${x.options.kind}-prop`,\n      propPath: x.path,\n      children: [x.options.kind === 'block' ? {\n        type: 'paragraph',\n        children: [{\n          text: ''\n        }]\n      } : {\n        text: ''\n      }]\n    }))\n  };\n}\nfunction getInitialPropsValue(prop, relationships) {\n  switch (prop.kind) {\n    case 'form':\n      return prop.defaultValue;\n\n    case 'child':\n      return undefined;\n\n    case 'relationship':\n      return relationships[prop.relationship].many ? [] : null;\n\n    case 'conditional':\n      {\n        const defaultValue = prop.discriminant.defaultValue;\n        return {\n          discriminant: defaultValue,\n          value: getInitialPropsValue(prop.values[defaultValue], relationships)\n        };\n      }\n\n    case 'object':\n      {\n        let obj = {};\n        Object.keys(prop.value).forEach(key => {\n          obj[key] = getInitialPropsValue(prop.value[key], relationships);\n        });\n        return obj;\n      }\n  }\n\n  assertNever(prop);\n}\n\nfunction _findChildPropPaths(value, prop, path) {\n  switch (prop.kind) {\n    case 'form':\n    case 'relationship':\n      return [];\n\n    case 'child':\n      return [{\n        path: path,\n        options: prop.options\n      }];\n\n    case 'conditional':\n      return _findChildPropPaths(value.value, prop.values[value.discriminant], path.concat('value'));\n\n    case 'object':\n      {\n        let paths = [];\n        Object.keys(prop.value).forEach(key => {\n          paths.push(..._findChildPropPaths(value[key], prop.value[key], path.concat(key)));\n        });\n        return paths;\n      }\n  }\n}\n\nfunction findChildPropPaths(value, props) {\n  let propPaths = _findChildPropPaths(value, {\n    kind: 'object',\n    value: props\n  }, []);\n\n  if (!propPaths.length) {\n    return [{\n      path: undefined,\n      options: {\n        kind: 'inline',\n        placeholder: ''\n      }\n    }];\n  }\n\n  return propPaths;\n}\nfunction assertNever(arg) {\n  throw new Error('expected to never be called but received: ' + JSON.stringify(arg));\n}\nfunction getPropsForConditionalChange(newValue, oldValue, prop, relationships) {\n  if (newValue.discriminant !== oldValue.discriminant) {\n    return {\n      discriminant: newValue.discriminant,\n      value: getInitialPropsValue(prop.values[newValue.discriminant], relationships)\n    };\n  } else {\n    return newValue;\n  }\n}\nfunction getDocumentFeaturesForChildField(editorDocumentFeatures, options) {\n  var _options$formatting, _options$formatting3, _options$formatting4, _options$formatting5, _options$formatting6, _options$formatting7, _options$formatting8;\n\n  // an important note for this: normalization based on document features\n  // is done based on the document features returned here\n  // and the editor document features\n  // so the result for any given child prop will be the things that are\n  // allowed by both these document features\n  // AND the editor document features\n  const inlineMarksFromOptions = (_options$formatting = options.formatting) === null || _options$formatting === void 0 ? void 0 : _options$formatting.inlineMarks;\n  const inlineMarks = inlineMarksFromOptions === 'inherit' ? 'inherit' : Object.fromEntries(Object.keys(editorDocumentFeatures.formatting.inlineMarks).map(mark => {\n    return [mark, !!(inlineMarksFromOptions || {})[mark]];\n  }));\n\n  if (options.kind === 'inline') {\n    var _options$formatting2;\n\n    return {\n      kind: 'inline',\n      inlineMarks,\n      documentFeatures: {\n        links: options.links === 'inherit',\n        relationships: options.relationships === 'inherit'\n      },\n      softBreaks: ((_options$formatting2 = options.formatting) === null || _options$formatting2 === void 0 ? void 0 : _options$formatting2.softBreaks) === 'inherit'\n    };\n  }\n\n  return {\n    kind: 'block',\n    inlineMarks,\n    softBreaks: ((_options$formatting3 = options.formatting) === null || _options$formatting3 === void 0 ? void 0 : _options$formatting3.softBreaks) === 'inherit',\n    documentFeatures: {\n      layouts: [],\n      dividers: options.dividers === 'inherit' ? editorDocumentFeatures.dividers : false,\n      formatting: {\n        alignment: ((_options$formatting4 = options.formatting) === null || _options$formatting4 === void 0 ? void 0 : _options$formatting4.alignment) === 'inherit' ? editorDocumentFeatures.formatting.alignment : {\n          center: false,\n          end: false\n        },\n        blockTypes: ((_options$formatting5 = options.formatting) === null || _options$formatting5 === void 0 ? void 0 : _options$formatting5.blockTypes) === 'inherit' ? editorDocumentFeatures.formatting.blockTypes : {\n          blockquote: false,\n          code: false\n        },\n        headingLevels: ((_options$formatting6 = options.formatting) === null || _options$formatting6 === void 0 ? void 0 : _options$formatting6.headingLevels) === 'inherit' ? editorDocumentFeatures.formatting.headingLevels : ((_options$formatting7 = options.formatting) === null || _options$formatting7 === void 0 ? void 0 : _options$formatting7.headingLevels) || [],\n        listTypes: ((_options$formatting8 = options.formatting) === null || _options$formatting8 === void 0 ? void 0 : _options$formatting8.listTypes) === 'inherit' ? editorDocumentFeatures.formatting.listTypes : {\n          ordered: false,\n          unordered: false\n        }\n      },\n      links: options.links === 'inherit',\n      relationships: options.relationships === 'inherit'\n    }\n  };\n}\nfunction getChildFieldAtPropPath(_ref, values, props) {\n  let [key, ...restOfPath] = _ref;\n  let prop = props[key];\n\n  if (!prop || prop.kind === 'form' || prop.kind === 'relationship') {\n    return;\n  }\n\n  if (prop.kind === 'conditional') {\n    const propVal = prop.values[values[key].discriminant];\n    return getChildFieldAtPropPath(restOfPath, values, {\n      value: propVal\n    });\n  }\n\n  if (prop.kind === 'object') {\n    return getChildFieldAtPropPath(restOfPath, values[key], prop.value);\n  }\n\n  return prop;\n}\nfunction clientSideValidateProp(prop, value) {\n  switch (prop.kind) {\n    case 'child':\n    case 'relationship':\n      {\n        return true;\n      }\n\n    case 'form':\n      {\n        return prop.validate(value);\n      }\n\n    case 'conditional':\n      {\n        if (!prop.discriminant.validate(value.discriminant)) {\n          return false;\n        }\n\n        return clientSideValidateProp(prop.values[value.discriminant], value.value);\n      }\n\n    case 'object':\n      {\n        for (const [key, childProp] of Object.entries(prop.value)) {\n          if (!clientSideValidateProp(childProp, value[key])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n  }\n}\n\nfunction _getPreviewProps(prop, value, childrenByPath, path, relationships, onFormPropsChange) {\n  switch (prop.kind) {\n    case 'form':\n      return {\n        value,\n\n        onChange(newValue) {\n          onFormPropsChange(newValue);\n        },\n\n        options: prop.options\n      };\n\n    case 'child':\n      return childrenByPath[JSON.stringify(path)];\n\n    case 'object':\n      {\n        const previewProps = {};\n        Object.keys(prop.value).forEach(key => {\n          previewProps[key] = _getPreviewProps(prop.value[key], value[key], childrenByPath, path.concat(key), relationships, newVal => {\n            onFormPropsChange(_objectSpread(_objectSpread({}, value), {}, {\n              [key]: newVal\n            }));\n          });\n        });\n        return previewProps;\n      }\n\n    case 'relationship':\n      {\n        return {\n          value,\n\n          onChange(newValue) {\n            onFormPropsChange(newValue);\n          }\n\n        };\n      }\n\n    case 'conditional':\n      {\n        return {\n          discriminant: value.discriminant,\n\n          onChange(newDiscriminant) {\n            onFormPropsChange(getPropsForConditionalChange({\n              discriminant: newDiscriminant,\n              value: value.value\n            }, value, prop, relationships));\n          },\n\n          options: prop.discriminant.options,\n          value: _getPreviewProps(prop.values[value.discriminant], value.value, childrenByPath, path.concat('value'), relationships, val => {\n            onFormPropsChange({\n              discriminant: value.discriminant,\n              value: val\n            });\n          })\n        };\n      }\n  }\n}\n\nfunction createPreviewProps(element, componentBlock, childrenByPath, relationships, setNode) {\n  return _getPreviewProps({\n    kind: 'object',\n    value: componentBlock.props\n  }, element.props, childrenByPath, [], relationships, props => {\n    setNode({\n      props\n    });\n  });\n}\n\n// this is in a different component to the other form inputs because it uses useKeystone\n// and we want to render the editor outside of the Admin UI on the docs site\n// and a call to useKeystone will break on the docs site\nfunction RelationshipFormInput(_ref) {\n  let {\n    prop,\n    path,\n    value,\n    onChange,\n    stringifiedPropPathToAutoFocus\n  } = _ref;\n  const relationships = useDocumentFieldRelationships();\n  const keystone = context.useKeystone();\n  const relationship = relationships[prop.relationship];\n  const stringifiedPath = JSON.stringify(path);\n  return /*#__PURE__*/React__default[\"default\"].createElement(fields.FieldContainer, null, /*#__PURE__*/React__default[\"default\"].createElement(fields.FieldLabel, null, prop.label), /*#__PURE__*/React__default[\"default\"].createElement(RelationshipSelect.RelationshipSelect, {\n    autoFocus: stringifiedPath === stringifiedPropPathToAutoFocus,\n    controlShouldRenderValue: true,\n    isDisabled: false,\n    list: keystone.adminMeta.lists[relationship.listKey],\n    extraSelection: relationship.selection || '',\n    portalMenu: true,\n    state: relationship.many ? {\n      kind: 'many',\n      value: value.map(x => ({\n        id: x.id,\n        label: x.label || x.id,\n        data: x.data\n      })),\n      onChange\n    } : {\n      kind: 'one',\n      value: value ? _objectSpread(_objectSpread({}, value), {}, {\n        label: value.label || value.id\n      }) : null,\n      onChange\n    }\n  }));\n}\n\nfunction FormValueContent(_ref2) {\n  let {\n    prop,\n    path,\n    value,\n    onChange,\n    stringifiedPropPathToAutoFocus,\n    forceValidation\n  } = _ref2;\n  const relationships = useDocumentFieldRelationships();\n  if (prop.kind === 'child') return null;\n\n  if (prop.kind === 'object') {\n    return /*#__PURE__*/React__default[\"default\"].createElement(core.Stack, {\n      gap: \"xlarge\"\n    }, Object.entries(prop.value).map(_ref3 => {\n      let [key, propVal] = _ref3;\n      return /*#__PURE__*/React__default[\"default\"].createElement(FormValueContent, {\n        key: key,\n        forceValidation: forceValidation,\n        stringifiedPropPathToAutoFocus: stringifiedPropPathToAutoFocus,\n        path: path.concat(key),\n        prop: propVal,\n        value: value[key],\n        onChange: val => {\n          onChange(_objectSpread(_objectSpread({}, value), {}, {\n            [key]: val\n          }));\n        }\n      });\n    }));\n  }\n\n  if (prop.kind === 'conditional') {\n    return /*#__PURE__*/React__default[\"default\"].createElement(core.Stack, {\n      gap: \"xlarge\"\n    }, /*#__PURE__*/React__default[\"default\"].createElement(prop.discriminant.Input, {\n      autoFocus: JSON.stringify(path.concat('discriminant')) === stringifiedPropPathToAutoFocus,\n      value: value.discriminant,\n      onChange: discriminant => {\n        onChange(getPropsForConditionalChange({\n          discriminant,\n          value: value.value\n        }, value, prop, relationships));\n      },\n      forceValidation: forceValidation && !prop.discriminant.validate(value)\n    }), /*#__PURE__*/React__default[\"default\"].createElement(FormValueContent, {\n      forceValidation: forceValidation,\n      stringifiedPropPathToAutoFocus: stringifiedPropPathToAutoFocus,\n      path: path.concat('value'),\n      prop: prop.values[value.discriminant],\n      value: value.value,\n      onChange: val => {\n        onChange({\n          discriminant: value.discriminant,\n          value: val\n        });\n      }\n    }));\n  }\n\n  if (prop.kind === 'relationship') {\n    return /*#__PURE__*/React__default[\"default\"].createElement(RelationshipFormInput, {\n      prop: prop,\n      path: path,\n      value: value,\n      onChange: onChange,\n      stringifiedPropPathToAutoFocus: stringifiedPropPathToAutoFocus\n    });\n  }\n\n  return /*#__PURE__*/React__default[\"default\"].createElement(prop.Input, {\n    autoFocus: JSON.stringify(path) === stringifiedPropPathToAutoFocus,\n    value: value,\n    onChange: onChange,\n    forceValidation: forceValidation && !prop.validate(value)\n  });\n} // child as in the props are a tree and you want the children of a prop, not as in the kind === 'inline'\n\nfunction getChildProps(prop, value) {\n  if (prop.kind === 'conditional') {\n    return {\n      discriminant: prop.discriminant,\n      value: prop.values[value.discriminant]\n    };\n  } else if (prop.kind === 'form' || prop.kind === 'child' || prop.kind === 'relationship') {\n    return {};\n  } else if (prop.kind === 'object') {\n    return prop.value;\n  } else {\n    assertNever(prop); // TypeScript should understand that this will never happen but for some reason it doesn't\n\n    return {};\n  }\n}\n\nfunction findFirstFocusablePropPath(props, path, value) {\n  for (const key of Object.keys(props)) {\n    const prop = props[key];\n    const newPath = path.concat(key);\n\n    if (prop.kind === 'form' || prop.kind === 'relationship') {\n      return newPath;\n    }\n\n    let children = getChildProps(prop, value[key]);\n    const childFocusable = findFirstFocusablePropPath(children, newPath, value[key]);\n\n    if (childFocusable) {\n      return childFocusable;\n    }\n  }\n}\n\nfunction FormValue(_ref4) {\n  let {\n    value,\n    onClose,\n    onChange,\n    componentBlock,\n    isValid\n  } = _ref4;\n  const [forceValidation, setForceValidation] = React.useState(false);\n  const focusablePath = JSON.stringify(findFirstFocusablePropPath(componentBlock.props, [], value));\n  return /*#__PURE__*/React__default[\"default\"].createElement(core.Stack, {\n    gap: \"xlarge\",\n    contentEditable: false\n  }, /*#__PURE__*/React__default[\"default\"].createElement(FormValueContent, {\n    forceValidation: forceValidation,\n    onChange: onChange,\n    path: [],\n    prop: {\n      kind: 'object',\n      value: componentBlock.props\n    },\n    value: value,\n    stringifiedPropPathToAutoFocus: focusablePath\n  }), /*#__PURE__*/React__default[\"default\"].createElement(button.Button, {\n    size: \"small\",\n    tone: \"active\",\n    weight: \"bold\",\n    onClick: () => {\n      if (isValid) {\n        onClose();\n      } else {\n        setForceValidation(true);\n      }\n    }\n  }, \"Done\"));\n}\n\nfunction areArraysEqual(arrA, arrB) {\n  if (arrA.length !== arrB.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arrA.length; i++) {\n    if (arrA[i] !== arrB[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction normalizeTextBasedOnInlineMarksAndSoftBreaks(_ref, editor, inlineMarks, softBreaks) {\n  let [node, path] = _ref;\n  const marksToRemove = Object.keys(node).filter(x => x !== 'text' && x !== 'insertMenu' && inlineMarks[x] !== true);\n\n  if (marksToRemove.length) {\n    slate.Transforms.unsetNodes(editor, marksToRemove, {\n      at: path\n    });\n    return true;\n  }\n\n  if (!softBreaks) {\n    const hasSoftBreaks = node.text.includes('\\n');\n\n    if (hasSoftBreaks) {\n      const [parentNode] = slate.Editor.parent(editor, path);\n\n      if (parentNode.type !== 'code') {\n        for (const position of slate.Editor.positions(editor, {\n          at: path\n        })) {\n          const character = slate.Node.get(editor, position.path).text[position.offset];\n\n          if (character === '\\n') {\n            slate.Transforms.delete(editor, {\n              at: position\n            });\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}\nfunction normalizeInlineBasedOnLinksAndRelationships(_ref2, editor, links, relationshipsEnabled, relationships) {\n  let [node, path] = _ref2;\n\n  if (node.type === 'link' && !links) {\n    slate.Transforms.insertText(editor, ` (${node.href})`, {\n      at: slate.Editor.end(editor, path)\n    });\n    slate.Transforms.unwrapNodes(editor, {\n      at: path\n    });\n    return true;\n  }\n\n  if (node.type === 'relationship' && (!relationshipsEnabled || relationships[node.relationship] === undefined || relationships[node.relationship].kind !== 'inline')) {\n    const data = node.data;\n\n    if (data) {\n      const relationship = relationships[node.relationship];\n      slate.Transforms.insertText(editor, `${data.label || data.id || ''} (${(relationship === null || relationship === void 0 ? void 0 : relationship.kind) === 'inline' ? relationship.label : node.relationship}:${data.id || ''})`, {\n        at: slate.Editor.before(editor, path)\n      });\n    }\n\n    slate.Transforms.removeNodes(editor, {\n      at: path\n    });\n    return true;\n  }\n\n  return false;\n}\nfunction normalizeElementBasedOnDocumentFeatures(_ref3, editor, _ref4, relationships) {\n  let [node, path] = _ref3;\n  let {\n    formatting,\n    dividers,\n    layouts,\n    links,\n    relationships: relationshipsEnabled\n  } = _ref4;\n\n  if (node.type === 'heading' && (!formatting.headingLevels.length || !formatting.headingLevels.includes(node.level)) || node.type === 'ordered-list' && !formatting.listTypes.ordered || node.type === 'unordered-list' && !formatting.listTypes.unordered || node.type === 'code' && !formatting.blockTypes.code || node.type === 'blockquote' && !formatting.blockTypes.blockquote || node.type === 'layout' && (layouts.length === 0 || !layouts.some(layout => areArraysEqual(layout, node.layout)))) {\n    slate.Transforms.unwrapNodes(editor, {\n      at: path\n    });\n    return true;\n  }\n\n  if ((node.type === 'paragraph' || node.type === 'heading') && (!formatting.alignment.center && node.textAlign === 'center' || !formatting.alignment.end && node.textAlign === 'end' || 'textAlign' in node && node.textAlign !== 'center' && node.textAlign !== 'end')) {\n    slate.Transforms.unsetNodes(editor, 'textAlign', {\n      at: path\n    });\n    return true;\n  }\n\n  if (node.type === 'divider' && !dividers) {\n    slate.Transforms.removeNodes(editor, {\n      at: path\n    });\n    return true;\n  }\n\n  return normalizeInlineBasedOnLinksAndRelationships([node, path], editor, links, relationshipsEnabled, relationships);\n}\nfunction withDocumentFeaturesNormalization(documentFeatures, relationships, editor) {\n  const {\n    normalizeNode\n  } = editor;\n\n  const documentFeaturesForNormalization = _objectSpread(_objectSpread({}, documentFeatures), {}, {\n    relationships: true\n  });\n\n  editor.normalizeNode = _ref5 => {\n    let [node, path] = _ref5;\n\n    if (slate.Text.isText(node)) {\n      normalizeTextBasedOnInlineMarksAndSoftBreaks([node, path], editor, documentFeatures.formatting.inlineMarks, documentFeatures.formatting.softBreaks);\n    } else if (slate.Element.isElement(node)) {\n      normalizeElementBasedOnDocumentFeatures([node, path], editor, documentFeaturesForNormalization, relationships);\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  return editor;\n}\n\nfunction getAncestorComponentBlock(editor) {\n  if (editor.selection) {\n    const ancestorEntry = slate.Editor.above(editor, {\n      match: node => slate.Editor.isBlock(editor, node) && node.type !== 'paragraph'\n    });\n\n    if (ancestorEntry && (ancestorEntry[0].type === 'component-block-prop' || ancestorEntry[0].type === 'component-inline-prop')) {\n      return {\n        isInside: true,\n        componentBlock: slate.Editor.parent(editor, ancestorEntry[1]),\n        prop: ancestorEntry\n      };\n    }\n  }\n\n  return {\n    isInside: false\n  };\n}\n\nconst alreadyNormalizedThings = new WeakMap();\n\nfunction normalizeNodeWithinComponentProp(_ref, editor, fieldOptions, relationships) {\n  let [node, path] = _ref;\n  let alreadyNormalizedNodes = alreadyNormalizedThings.get(fieldOptions);\n\n  if (!alreadyNormalizedNodes) {\n    alreadyNormalizedNodes = new WeakSet();\n    alreadyNormalizedThings.set(fieldOptions, alreadyNormalizedNodes);\n  }\n\n  if (alreadyNormalizedNodes.has(node)) {\n    return false;\n  }\n\n  let didNormalization = false;\n\n  if (fieldOptions.inlineMarks !== 'inherit' && slate.Text.isText(node)) {\n    didNormalization = normalizeTextBasedOnInlineMarksAndSoftBreaks([node, path], editor, fieldOptions.inlineMarks, fieldOptions.softBreaks);\n  }\n\n  if (slate.Element.isElement(node)) {\n    let childrenHasChanged = node.children.map((node, i) => normalizeNodeWithinComponentProp([node, [...path, i]], editor, fieldOptions, relationships)) // .map then .some because we don't want to exit early\n    .some(x => x);\n\n    if (fieldOptions.kind === 'block') {\n      didNormalization = normalizeElementBasedOnDocumentFeatures([node, path], editor, fieldOptions.documentFeatures, relationships) || childrenHasChanged;\n    } else {\n      didNormalization = normalizeInlineBasedOnLinksAndRelationships([node, path], editor, fieldOptions.documentFeatures.links, fieldOptions.documentFeatures.relationships, relationships);\n    }\n  }\n\n  if (didNormalization === false) {\n    alreadyNormalizedNodes.add(node);\n  }\n\n  return didNormalization;\n}\n\nfunction withComponentBlocks(blockComponents, editorDocumentFeatures, relationships, editor) {\n  // note that conflicts between the editor document features\n  // and the child field document features are dealt with elsewhere\n  const memoizedGetDocumentFeaturesForChildField = weakMemoize__default[\"default\"](options => {\n    return getDocumentFeaturesForChildField(editorDocumentFeatures, options);\n  });\n  const {\n    normalizeNode,\n    deleteBackward,\n    insertBreak\n  } = editor;\n\n  editor.deleteBackward = unit => {\n    if (editor.selection) {\n      const ancestorComponentBlock = getAncestorComponentBlock(editor);\n\n      if (ancestorComponentBlock.isInside && slate.Range.isCollapsed(editor.selection) && slate.Editor.isStart(editor, editor.selection.anchor, ancestorComponentBlock.prop[1]) && ancestorComponentBlock.prop[1][ancestorComponentBlock.prop[1].length - 1] === 0) {\n        slate.Transforms.unwrapNodes(editor, {\n          at: ancestorComponentBlock.componentBlock[1]\n        });\n        return;\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.insertBreak = () => {\n    const ancestorComponentBlock = getAncestorComponentBlock(editor);\n\n    if (editor.selection && ancestorComponentBlock.isInside) {\n      const {\n        prop: [componentPropNode, componentPropPath],\n        componentBlock: [componentBlockNode, componentBlockPath]\n      } = ancestorComponentBlock;\n      const isLastProp = componentPropPath[componentPropPath.length - 1] === componentBlockNode.children.length - 1;\n\n      if (componentPropNode.type === 'component-block-prop') {\n        const [[paragraphNode, paragraphPath]] = slate.Editor.nodes(editor, {\n          match: node => node.type === 'paragraph'\n        });\n        const isLastParagraph = paragraphPath[paragraphPath.length - 1] === componentPropNode.children.length - 1;\n\n        if (slate.Node.string(paragraphNode) === '' && isLastParagraph) {\n          if (isLastProp) {\n            slate.Transforms.moveNodes(editor, {\n              at: paragraphPath,\n              to: slate.Path.next(ancestorComponentBlock.componentBlock[1])\n            });\n          } else {\n            // TODO: this goes to the start of the next block, is that right?\n            // should we just insertBreak always here?\n            slate.Transforms.move(editor, {\n              distance: 1,\n              unit: 'line'\n            });\n            slate.Transforms.removeNodes(editor, {\n              at: paragraphPath\n            });\n          }\n\n          return;\n        }\n      }\n\n      if (componentPropNode.type === 'component-inline-prop') {\n        slate.Editor.withoutNormalizing(editor, () => {\n          slate.Transforms.splitNodes(editor, {\n            always: true\n          });\n          const splitNodePath = slate.Path.next(componentPropPath);\n\n          if (isLastProp) {\n            slate.Transforms.moveNodes(editor, {\n              at: splitNodePath,\n              to: slate.Path.next(componentBlockPath)\n            });\n          } else {\n            moveChildren(editor, splitNodePath, [...slate.Path.next(splitNodePath), 0]);\n            slate.Transforms.removeNodes(editor, {\n              at: splitNodePath\n            });\n          }\n        });\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  editor.normalizeNode = entry => {\n    const [node, path] = entry;\n\n    if (slate.Element.isElement(node) || slate.Editor.isEditor(node)) {\n      if (node.type === 'component-inline-prop' && !node.propPath && (node.children.length !== 1 || !slate.Text.isText(node.children[0]) || node.children[0].text !== '')) {\n        slate.Transforms.removeNodes(editor, {\n          at: path\n        });\n        return;\n      }\n\n      if (slate.Element.isElement(node) && node.type === 'component-block') {\n        const componentBlock = blockComponents[node.component];\n\n        if (componentBlock) {\n          let missingKeys = new Map(findChildPropPaths(node.props, componentBlock.props).map(x => [JSON.stringify(x.path), x.options.kind]));\n          node.children.forEach(node => {\n            assert(node.type === 'component-block-prop' || node.type === 'component-inline-prop');\n            missingKeys.delete(JSON.stringify(node.propPath));\n          });\n\n          if (missingKeys.size) {\n            slate.Transforms.insertNodes(editor, [...missingKeys].map(_ref2 => {\n              let [prop, kind] = _ref2;\n              return {\n                type: `component-${kind}-prop`,\n                propPath: prop ? JSON.parse(prop) : prop,\n                children: [{\n                  text: ''\n                }]\n              };\n            }), {\n              at: [...path, node.children.length]\n            });\n            return;\n          }\n\n          let foundProps = new Set();\n          let stringifiedInlinePropPaths = {};\n          findChildPropPaths(node.props, blockComponents[node.component].props).forEach((x, index) => {\n            stringifiedInlinePropPaths[JSON.stringify(x.path)] = {\n              options: x.options,\n              index\n            };\n          });\n\n          for (const [index, childNode] of node.children.entries()) {\n            if ( // children that are not these will be handled by\n            // the generic allowedChildren normalization\n            childNode.type === 'component-inline-prop' || childNode.type === 'component-block-prop') {\n              const childPath = [...path, index];\n              const stringifiedPropPath = JSON.stringify(childNode.propPath);\n\n              if (stringifiedInlinePropPaths[stringifiedPropPath] === undefined) {\n                slate.Transforms.removeNodes(editor, {\n                  at: childPath\n                });\n                return;\n              } else {\n                if (foundProps.has(stringifiedPropPath)) {\n                  slate.Transforms.removeNodes(editor, {\n                    at: childPath\n                  });\n                  return;\n                }\n\n                foundProps.add(stringifiedPropPath);\n                const propInfo = stringifiedInlinePropPaths[stringifiedPropPath];\n                const expectedIndex = propInfo.index;\n\n                if (index !== expectedIndex) {\n                  slate.Transforms.moveNodes(editor, {\n                    at: childPath,\n                    to: [...path, expectedIndex]\n                  });\n                  return;\n                }\n\n                const expectedChildNodeType = `component-${propInfo.options.kind}-prop`;\n\n                if (childNode.type !== expectedChildNodeType) {\n                  slate.Transforms.setNodes(editor, {\n                    type: expectedChildNodeType\n                  }, {\n                    at: childPath\n                  });\n                  return;\n                }\n\n                const documentFeatures = memoizedGetDocumentFeaturesForChildField(propInfo.options);\n\n                if (normalizeNodeWithinComponentProp([childNode, childPath], editor, documentFeatures, relationships)) {\n                  return;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n}\n\nconst ComponentBlockContext = /*#__PURE__*/React.createContext({});\nfunction getPlaceholderTextForPropPath(propPath, fields, formProps) {\n  const prop = propPath[0];\n  const field = fields[prop];\n\n  if (field.kind === 'relationship' || field.kind === 'form') {\n    throw new Error('unexpected prop field when finding placeholder text for child prop');\n  }\n\n  if (field.kind === 'object') {\n    return getPlaceholderTextForPropPath(propPath.slice(1), field.value, formProps[prop]);\n  }\n\n  if (field.kind === 'conditional') {\n    return getPlaceholderTextForPropPath(propPath.slice(1), {\n      value: field.values[formProps[prop].discriminant]\n    }, formProps[prop]);\n  }\n\n  return field.options.placeholder;\n}\nfunction ComponentInlineProp(props) {\n  return core.jsx(\"span\", props.attributes, props.children);\n}\nfunction insertComponentBlock(editor, componentBlocks, componentBlock, relationships) {\n  let node = getInitialValue(componentBlock, componentBlocks[componentBlock], relationships);\n  insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, node);\n  const componentBlockEntry = slate.Editor.above(editor, {\n    match: node => node.type === 'component-block'\n  });\n\n  if (componentBlockEntry) {\n    const start = slate.Editor.start(editor, componentBlockEntry[1]);\n    slate.Transforms.setSelection(editor, {\n      anchor: start,\n      focus: start\n    });\n  }\n}\nconst BlockComponentsButtons = _ref => {\n  let {\n    onClose\n  } = _ref;\n  const editor = slateReact.useSlateStatic();\n  const blockComponents = React.useContext(ComponentBlockContext);\n  const relationships = useDocumentFieldRelationships();\n  return core.jsx(React.Fragment, null, Object.keys(blockComponents).map(key => core.jsx(toolbar.ToolbarButton, {\n    key: key,\n    onMouseDown: event => {\n      event.preventDefault();\n      insertComponentBlock(editor, blockComponents, key, relationships);\n      onClose();\n    }\n  }, blockComponents[key].label)));\n};\nconst ComponentBlocksElement = _ref2 => {\n  let {\n    attributes,\n    children,\n    element: __elementToGetPath\n  } = _ref2;\n  const editor = slateReact.useSlateStatic();\n  const focused = slateReact.useFocused();\n  const selected = slateReact.useSelected();\n  const [editMode, setEditMode] = React.useState(false);\n  const [currentElement, setElement] = useElementWithSetNodes(editor, __elementToGetPath);\n  const {\n    colors,\n    fields,\n    spacing,\n    typography\n  } = core.useTheme();\n  const blockComponents = React.useContext(ComponentBlockContext);\n  const componentBlock = blockComponents[currentElement.component];\n  const isValid = React.useMemo(() => {\n    return componentBlock ? clientSideValidateProp({\n      kind: 'object',\n      value: componentBlock.props\n    }, currentElement.props) : true;\n  }, [componentBlock, currentElement.props]);\n  const documentFieldRelationships = useDocumentFieldRelationships();\n\n  if (!componentBlock) {\n    return core.jsx(\"div\", {\n      css: {\n        border: 'red 4px solid',\n        padding: spacing.medium\n      }\n    }, core.jsx(\"pre\", {\n      contentEditable: false,\n      css: {\n        userSelect: 'none'\n      }\n    }, `The block \"${currentElement.component}\" no longer exists.\n\nProps:\n\n${JSON.stringify(currentElement.props, null, 2)}\n\nContent:`), children);\n  }\n\n  return core.jsx(\"div\", _extends({\n    \"data-with-chrome\": !componentBlock.chromeless,\n    css: {\n      marginBottom: spacing.xlarge,\n      marginTop: spacing.xlarge,\n      '&[data-with-chrome=true]': {\n        paddingLeft: spacing.xlarge,\n        position: 'relative',\n        ':before': {\n          content: '\" \"',\n          backgroundColor: editMode ? colors.linkColor : colors.border,\n          borderRadius: 4,\n          width: 4,\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          zIndex: 1\n        }\n      }\n    }\n  }, attributes), !componentBlock.chromeless && core.jsx(api.NotEditable, {\n    css: {\n      color: fields.legendColor,\n      display: 'block',\n      fontSize: typography.fontSize.small,\n      fontWeight: typography.fontWeight.bold,\n      lineHeight: 1,\n      marginBottom: spacing.small,\n      textTransform: 'uppercase'\n    }\n  }, componentBlock.label), editMode && core.jsx(FormValue, {\n    isValid: isValid,\n    componentBlock: componentBlock,\n    onClose: () => {\n      setEditMode(false);\n    },\n    value: currentElement.props,\n    onChange: val => {\n      setElement({\n        props: val\n      });\n    }\n  }), core.jsx(\"div\", {\n    css: {\n      display: editMode ? 'none' : 'block',\n      position: 'relative'\n    }\n  }, editMode ? children : core.jsx(ComponentBlockRender, {\n    children: children,\n    componentBlock: componentBlock,\n    element: currentElement,\n    onElementChange: setElement\n  }), !editMode && (() => {\n    const toolbarProps = createPreviewProps(currentElement, componentBlock, {}, documentFieldRelationships, setElement);\n    const ChromefulToolbar = componentBlock.toolbar ? componentBlock.toolbar : DefaultToolbarWithChrome;\n    const ChromelessToolbar = componentBlock.chromeless && componentBlock.toolbar ? componentBlock.toolbar : DefaultToolbarWithoutChrome;\n    return componentBlock.chromeless ? focused && selected && core.jsx(toolbar.InlineDialog, {\n      isRelative: true\n    }, core.jsx(ChromelessToolbar, {\n      onRemove: () => {\n        const path = slateReact.ReactEditor.findPath(editor, __elementToGetPath);\n        slate.Transforms.removeNodes(editor, {\n          at: path\n        });\n      },\n      props: toolbarProps\n    })) : core.jsx(ChromefulToolbar, {\n      isValid: isValid,\n      onRemove: () => {\n        const path = slateReact.ReactEditor.findPath(editor, __elementToGetPath);\n        slate.Transforms.removeNodes(editor, {\n          at: path\n        });\n      },\n      onShowEditMode: () => {\n        setEditMode(true);\n      },\n      props: toolbarProps\n    });\n  })()));\n};\n\nfunction DefaultToolbarWithChrome(_ref3) {\n  let {\n    onShowEditMode,\n    onRemove,\n    isValid\n  } = _ref3;\n  const theme = core.useTheme();\n  return core.jsx(toolbar.ToolbarGroup, {\n    as: api.NotEditable,\n    marginTop: \"small\"\n  }, core.jsx(toolbar.ToolbarButton, {\n    onClick: () => {\n      onShowEditMode();\n    }\n  }, \"Edit\"), core.jsx(toolbar.ToolbarSeparator, null), core.jsx(tooltip.Tooltip, {\n    content: \"Remove\",\n    weight: \"subtle\"\n  }, attrs => core.jsx(toolbar.ToolbarButton, _extends({\n    variant: \"destructive\",\n    onClick: () => {\n      onRemove();\n    }\n  }, attrs), core.jsx(Trash2Icon.Trash2Icon, {\n    size: \"small\"\n  }))), !isValid && core.jsx(React.Fragment, null, core.jsx(toolbar.ToolbarSeparator, null), core.jsx(\"span\", {\n    css: {\n      color: theme.palette.red500,\n      display: 'flex',\n      alignItems: 'center',\n      paddingLeft: theme.spacing.small\n    }\n  }, \"Please edit the form, there are invalid fields.\")));\n}\n\nfunction DefaultToolbarWithoutChrome(_ref4) {\n  let {\n    onRemove\n  } = _ref4;\n  return core.jsx(tooltip.Tooltip, {\n    content: \"Remove\",\n    weight: \"subtle\"\n  }, attrs => core.jsx(toolbar.ToolbarButton, _extends({\n    variant: \"destructive\",\n    onMouseDown: event => {\n      event.preventDefault();\n      onRemove();\n    }\n  }, attrs), core.jsx(Trash2Icon.Trash2Icon, {\n    size: \"small\"\n  })));\n}\n\nfunction ComponentBlockRender(_ref5) {\n  let {\n    componentBlock,\n    element,\n    onElementChange,\n    children\n  } = _ref5;\n  const childrenByPath = {};\n  let maybeChild;\n  children.forEach(child => {\n    let stringified = JSON.stringify(child.props.children.props.element.propPath);\n\n    if (stringified === undefined) {\n      maybeChild = child;\n    } else {\n      childrenByPath[stringified] = child;\n    }\n  });\n  const previewProps = createPreviewProps(element, componentBlock, childrenByPath, useDocumentFieldRelationships(), onElementChange);\n  return core.jsx(React.Fragment, null, core.jsx(componentBlock.component, previewProps), core.jsx(\"span\", {\n    css: {\n      display: 'none'\n    }\n  }, maybeChild));\n}\n\nconst LayoutOptionsContext = /*#__PURE__*/React.createContext([]);\nconst LayoutOptionsProvider = LayoutOptionsContext.Provider; // UI Components\n\nconst LayoutContainer = _ref => {\n  let {\n    attributes,\n    children,\n    element\n  } = _ref;\n  const {\n    spacing\n  } = core.useTheme();\n  const focused = slateReact.useFocused();\n  const selected = slateReact.useSelected();\n  const editor = slateReact.useSlateStatic();\n  const layout = element.layout;\n  const layoutOptions = React.useContext(LayoutOptionsContext);\n  return core.jsx(\"div\", _extends({\n    css: {\n      marginBottom: spacing.medium,\n      marginTop: spacing.medium,\n      position: 'relative'\n    }\n  }, attributes), core.jsx(\"div\", {\n    css: {\n      columnGap: spacing.small,\n      display: 'grid',\n      gridTemplateColumns: layout.map(x => `${x}fr`).join(' ')\n    }\n  }, children), focused && selected && core.jsx(toolbar.InlineDialog, {\n    isRelative: true\n  }, core.jsx(toolbar.ToolbarGroup, null, layoutOptions.map((layoutOption, i) => core.jsx(toolbar.ToolbarButton, {\n    isSelected: layoutOption.toString() === layout.toString(),\n    key: i,\n    onMouseDown: event => {\n      event.preventDefault();\n      const path = slateReact.ReactEditor.findPath(editor, element);\n      slate.Transforms.setNodes(editor, {\n        type: 'layout',\n        layout: layoutOption\n      }, {\n        at: path\n      });\n    }\n  }, makeLayoutIcon(layoutOption))), core.jsx(toolbar.ToolbarSeparator, null), core.jsx(tooltip.Tooltip, {\n    content: \"Remove\",\n    weight: \"subtle\"\n  }, attrs => core.jsx(toolbar.ToolbarButton, _extends({\n    variant: \"destructive\",\n    onMouseDown: event => {\n      event.preventDefault();\n      const path = slateReact.ReactEditor.findPath(editor, element);\n      slate.Transforms.removeNodes(editor, {\n        at: path\n      });\n    }\n  }, attrs), core.jsx(Trash2Icon.Trash2Icon, {\n    size: \"small\"\n  }))))));\n};\nconst LayoutArea = _ref2 => {\n  let {\n    attributes,\n    children\n  } = _ref2;\n  const {\n    colors,\n    radii,\n    spacing\n  } = core.useTheme();\n  return core.jsx(\"div\", _extends({\n    css: {\n      border: `2px dashed ${colors.border}`,\n      borderRadius: radii.small,\n      paddingLeft: spacing.medium,\n      paddingRight: spacing.medium\n    }\n  }, attributes), children);\n};\nconst insertLayout = (editor, layout) => {\n  insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, [{\n    type: 'layout',\n    layout,\n    children: [{\n      type: 'layout-area',\n      children: [{\n        type: 'paragraph',\n        children: [{\n          text: ''\n        }]\n      }]\n    }]\n  }]);\n  const layoutEntry = slate.Editor.above(editor, {\n    match: x => x.type === 'layout'\n  });\n\n  if (layoutEntry) {\n    slate.Transforms.select(editor, [...layoutEntry[1], 0]);\n  }\n}; // Plugin\n\nfunction withLayouts(editor) {\n  const {\n    normalizeNode,\n    deleteBackward\n  } = editor;\n\n  editor.deleteBackward = unit => {\n    if (editor.selection && slate.Range.isCollapsed(editor.selection) && // this is just an little optimisation\n    // we're only doing things if we're at the start of a layout area\n    // and the start of anything will always be offset 0\n    // so we'll bailout if we're not at offset 0\n    editor.selection.anchor.offset === 0) {\n      const [aboveNode, abovePath] = slate.Editor.above(editor, {\n        match: node => node.type === 'layout-area'\n      }) || [editor, []];\n\n      if (aboveNode.type === 'layout-area' && slate.Point.equals(slate.Editor.start(editor, abovePath), editor.selection.anchor)) {\n        return;\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.normalizeNode = entry => {\n    const [node, path] = entry;\n\n    if (slate.Element.isElement(node) && node.type === 'layout') {\n      if (node.layout === undefined) {\n        slate.Transforms.unwrapNodes(editor, {\n          at: path\n        });\n        return;\n      }\n\n      if (node.children.length < node.layout.length) {\n        slate.Transforms.insertNodes(editor, Array.from({\n          length: node.layout.length - node.children.length\n        }).map(() => ({\n          type: 'layout-area',\n          children: [paragraphElement()]\n        })), {\n          at: [...path, node.children.length]\n        });\n        return;\n      }\n\n      if (node.children.length > node.layout.length) {\n        Array.from({\n          length: node.children.length - node.layout.length\n        }).map((_, i) => i).reverse().forEach(i => {\n          const layoutAreaToRemovePath = [...path, i + node.layout.length];\n          const child = node.children[i + node.layout.length];\n          moveChildren(editor, layoutAreaToRemovePath, [...path, node.layout.length - 1, node.children[node.layout.length - 1].children.length], node => node.type !== 'paragraph' || slate.Node.string(child) !== '');\n          slate.Transforms.removeNodes(editor, {\n            at: layoutAreaToRemovePath\n          });\n        });\n        return;\n      }\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n} // Utils\n// ------------------------------\n\nfunction makeLayoutIcon(ratios) {\n  const size = 16;\n  const element = core.jsx(\"div\", {\n    role: \"img\",\n    css: {\n      display: 'grid',\n      gridTemplateColumns: ratios.map(r => `${r}fr`).join(' '),\n      gap: 2,\n      width: size,\n      height: size\n    }\n  }, ratios.map((_, i) => {\n    return core.jsx(\"div\", {\n      key: i,\n      css: {\n        backgroundColor: 'currentcolor',\n        borderRadius: 1\n      }\n    });\n  }));\n  return element;\n}\n\nconst layoutsIcon = core.jsx(ColumnsIcon.ColumnsIcon, {\n  size: \"small\"\n});\nconst LayoutsButton = _ref3 => {\n  let {\n    layouts\n  } = _ref3;\n  const {\n    editor,\n    layouts: {\n      isSelected\n    }\n  } = useToolbarState();\n  return React.useMemo(() => core.jsx(tooltip.Tooltip, {\n    content: \"Layouts\",\n    weight: \"subtle\"\n  }, attrs => core.jsx(toolbar.ToolbarButton, _extends({\n    isSelected: isSelected,\n    onMouseDown: event => {\n      event.preventDefault();\n\n      if (isElementActive(editor, 'layout')) {\n        slate.Transforms.unwrapNodes(editor, {\n          match: node => node.type === 'layout'\n        });\n        return;\n      }\n\n      insertLayout(editor, layouts[0]);\n    }\n  }, attrs), layoutsIcon)), [editor, isSelected, layouts]);\n};\n\nconst _excluded$1 = [\"type\"];\nconst isListType = type => type === 'ordered-list' || type === 'unordered-list';\nconst isListNode = node => isListType(node.type);\nconst toggleList = (editor, format) => {\n  const listAbove = getListTypeAbove(editor);\n  const isActive = isElementActive(editor, format) && (listAbove === 'none' || listAbove === format);\n  slate.Editor.withoutNormalizing(editor, () => {\n    slate.Transforms.unwrapNodes(editor, {\n      match: isListNode,\n      split: true,\n      mode: isActive ? 'all' : 'lowest'\n    });\n\n    if (!isActive) {\n      slate.Transforms.wrapNodes(editor, {\n        type: format,\n        children: []\n      }, {\n        match: x => x.type !== 'list-item-content' && slate.Editor.isBlock(editor, x)\n      });\n    }\n  });\n};\n\nfunction getAncestorList(editor) {\n  if (editor.selection) {\n    const listItem = slate.Editor.above(editor, {\n      match: nodeTypeMatcher('list-item')\n    });\n    const list = slate.Editor.above(editor, {\n      match: isListNode\n    });\n\n    if (listItem && list) {\n      return {\n        isInside: true,\n        listItem,\n        list\n      };\n    }\n  }\n\n  return {\n    isInside: false\n  };\n}\n\nfunction withList(editor) {\n  const {\n    insertBreak,\n    normalizeNode,\n    deleteBackward\n  } = editor;\n\n  editor.deleteBackward = unit => {\n    if (editor.selection) {\n      const ancestorList = getAncestorList(editor);\n\n      if (ancestorList.isInside && slate.Range.isCollapsed(editor.selection) && slate.Editor.isStart(editor, editor.selection.anchor, ancestorList.list[1])) {\n        slate.Transforms.unwrapNodes(editor, {\n          match: isListNode,\n          split: true\n        });\n        return;\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.insertBreak = () => {\n    const [listItem] = slate.Editor.nodes(editor, {\n      match: node => node.type === 'list-item',\n      mode: 'lowest'\n    });\n\n    if (listItem && slate.Node.string(listItem[0]) === '') {\n      slate.Transforms.unwrapNodes(editor, {\n        match: isListNode,\n        split: true\n      });\n      return;\n    }\n\n    insertBreak();\n  };\n\n  editor.normalizeNode = entry => {\n    const [node, path] = entry;\n\n    if (slate.Element.isElement(node) || slate.Editor.isEditor(node)) {\n      const isElementBeingNormalizedAList = isListNode(node);\n\n      for (const [childNode, childPath] of slate.Node.children(editor, path)) {\n        const index = childPath[childPath.length - 1]; // merge sibling lists\n\n        if (isListNode(childNode)) {\n          var _node$children;\n\n          if (((_node$children = node.children[childPath[childPath.length - 1] + 1]) === null || _node$children === void 0 ? void 0 : _node$children.type) === childNode.type) {\n            const siblingNodePath = slate.Path.next(childPath);\n            moveChildren(editor, siblingNodePath, [...childPath, childNode.children.length]);\n            slate.Transforms.removeNodes(editor, {\n              at: siblingNodePath\n            });\n            return;\n          }\n\n          if (isElementBeingNormalizedAList) {\n            const previousChild = node.children[index - 1];\n\n            if (slate.Element.isElement(previousChild)) {\n              slate.Transforms.moveNodes(editor, {\n                at: childPath,\n                to: [...slate.Path.previous(childPath), previousChild.children.length - 1]\n              });\n            } else {\n              slate.Transforms.unwrapNodes(editor, {\n                at: childPath\n              });\n            }\n\n            return;\n          }\n        }\n\n        if (node.type === 'list-item' && childNode.type !== 'list-item-content' && index === 0 && slate.Editor.isBlock(editor, childNode)) {\n          if (path[path.length - 1] !== 0) {\n            const previousChild = slate.Node.get(editor, slate.Path.previous(path));\n\n            if (slate.Element.isElement(previousChild)) {\n              slate.Transforms.moveNodes(editor, {\n                at: path,\n                to: [...slate.Path.previous(path), previousChild.children.length]\n              });\n              return;\n            }\n          }\n\n          slate.Transforms.unwrapNodes(editor, {\n            at: childPath\n          });\n          return;\n        }\n\n        if (node.type === 'list-item' && childNode.type === 'list-item-content' && index !== 0) {\n          slate.Transforms.splitNodes(editor, {\n            at: childPath\n          });\n          return;\n        }\n      }\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n}\nconst ListButton = /*#__PURE__*/React.forwardRef(function ListButton(props, ref) {\n  const {\n    editor,\n    lists: {\n      [props.type === 'ordered-list' ? 'ordered' : 'unordered']: {\n        isDisabled,\n        isSelected\n      }\n    }\n  } = useToolbarState();\n  return React.useMemo(() => {\n    const {\n      type\n    } = props,\n          restProps = _objectWithoutProperties(props, _excluded$1);\n\n    return core.jsx(toolbar.ToolbarButton, _extends({\n      ref: ref,\n      isDisabled: isDisabled,\n      isSelected: isSelected,\n      onMouseDown: event => {\n        event.preventDefault();\n        toggleList(editor, type);\n      }\n    }, restProps));\n  }, [props, ref, isDisabled, isSelected, editor]);\n});\nfunction nestList(editor) {\n  const block = slate.Editor.above(editor, {\n    match: n => slate.Editor.isBlock(editor, n)\n  });\n\n  if (!block || block[0].type !== 'list-item-content') {\n    return false;\n  }\n\n  const listItemPath = slate.Path.parent(block[1]); // we're the first item in the list therefore we can't nest\n\n  if (listItemPath[listItemPath.length - 1] === 0) {\n    return false;\n  }\n\n  const previousListItemPath = slate.Path.previous(listItemPath);\n  const previousListItemNode = slate.Node.get(editor, previousListItemPath);\n\n  if (previousListItemNode.children.length !== 1) {\n    // there's a list nested inside our previous sibling list item so move there\n    slate.Transforms.moveNodes(editor, {\n      at: listItemPath,\n      to: [...previousListItemPath, previousListItemNode.children.length - 1, previousListItemNode.children[previousListItemNode.children.length - 1].children.length]\n    });\n    return true;\n  }\n\n  const type = slate.Editor.parent(editor, slate.Path.parent(block[1]))[0].type;\n  slate.Editor.withoutNormalizing(editor, () => {\n    slate.Transforms.wrapNodes(editor, {\n      type,\n      children: []\n    }, {\n      at: listItemPath\n    });\n    slate.Transforms.moveNodes(editor, {\n      to: [...previousListItemPath, previousListItemNode.children.length],\n      at: listItemPath\n    });\n  });\n  return true;\n}\nfunction unnestList(editor) {\n  const block = slate.Editor.above(editor, {\n    match: n => slate.Editor.isBlock(editor, n)\n  });\n\n  if (block && block[0].type === 'list-item-content') {\n    slate.Transforms.unwrapNodes(editor, {\n      match: isListNode,\n      split: true\n    });\n    return true;\n  }\n\n  return false;\n}\n\nconst ToolbarStateContext = /*#__PURE__*/React__default[\"default\"].createContext(null);\nfunction useToolbarState() {\n  const toolbarState = React.useContext(ToolbarStateContext);\n\n  if (!toolbarState) {\n    throw new Error('ToolbarStateProvider must be used to use useToolbarState');\n  }\n\n  return toolbarState;\n}\nfunction getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks) {\n  const ancestorComponentProp = slate.Editor.above(editor, {\n    match: nodeTypeMatcher('component-block-prop', 'component-inline-prop')\n  });\n\n  if (ancestorComponentProp) {\n    const propPath = ancestorComponentProp[0].propPath;\n    const ancestorComponent = slate.Editor.parent(editor, ancestorComponentProp[1]);\n\n    if (ancestorComponent[0].type === 'component-block') {\n      const component = ancestorComponent[0].component;\n      const componentBlock = componentBlocks[component];\n\n      if (componentBlock && propPath) {\n        var _getChildFieldAtPropP;\n\n        const options = (_getChildFieldAtPropP = getChildFieldAtPropPath(propPath, ancestorComponent[0].props, componentBlock.props)) === null || _getChildFieldAtPropP === void 0 ? void 0 : _getChildFieldAtPropP.options;\n\n        if (options) {\n          return getDocumentFeaturesForChildField(editorDocumentFeatures, options);\n        }\n      }\n    }\n  }\n}\nconst createToolbarState = (editor, componentBlocks, editorDocumentFeatures) => {\n  const locationDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks) || {\n    kind: 'block',\n    inlineMarks: 'inherit',\n    documentFeatures: {\n      dividers: true,\n      formatting: {\n        alignment: {\n          center: true,\n          end: true\n        },\n        blockTypes: {\n          blockquote: true,\n          code: true\n        },\n        headingLevels: [1, 2, 3, 4, 5, 6],\n        listTypes: {\n          ordered: true,\n          unordered: true\n        }\n      },\n      layouts: editorDocumentFeatures.layouts,\n      links: true,\n      relationships: true\n    },\n    softBreaks: true\n  };\n  let [maybeCodeBlockEntry] = slate.Editor.nodes(editor, {\n    match: node => node.type !== 'code' && slate.Editor.isBlock(editor, node)\n  });\n  const editorMarks = slate.Editor.marks(editor) || {};\n  const marks = Object.fromEntries(allMarks.map(mark => [mark, {\n    isDisabled: locationDocumentFeatures.inlineMarks !== 'inherit' && !locationDocumentFeatures.inlineMarks[mark] || !maybeCodeBlockEntry,\n    isSelected: !!editorMarks[mark]\n  }])); // Editor.marks is \"what are the marks that would be applied if text was inserted now\"\n  // that's not really the UX we want, if we have some a document like this\n  // <paragraph>\n  //   <text>\n  //     <anchor />\n  //     content\n  //   </text>\n  //   <text bold>bold</text>\n  //   <text>\n  //     content\n  //     <focus />\n  //   </text>\n  // </paragraph>\n  // we want bold to be shown as selected even though if you inserted text from that selection, it wouldn't be bold\n  // so we look at all the text nodes in the selection to get their marks\n  // but only if the selection is expanded because if you're in the middle of some text\n  // with your selection collapsed with a mark but you've removed it(i.e. editor.removeMark)\n  // the text nodes you're in will have the mark but the ui should show the mark as not being selected\n\n  if (editor.selection && slate.Range.isExpanded(editor.selection)) {\n    for (const node of slate.Editor.nodes(editor, {\n      match: slate.Text.isText\n    })) {\n      for (const key of Object.keys(node[0])) {\n        if (key === 'insertMenu' || key === 'text') {\n          continue;\n        }\n\n        if (key in marks) {\n          marks[key].isSelected = true;\n        }\n      }\n    }\n  }\n\n  let [headingEntry] = slate.Editor.nodes(editor, {\n    match: nodeTypeMatcher('heading')\n  });\n  let [listEntry] = slate.Editor.nodes(editor, {\n    match: isListNode\n  });\n  let [alignableEntry] = slate.Editor.nodes(editor, {\n    match: nodeTypeMatcher('paragraph', 'heading')\n  }); // (we're gonna use markdown here because the equivelant slate structure is quite large and doesn't add value here)\n  // let's imagine a document that looks like this:\n  // - thing\n  //   1. something<cursor />\n  // in the toolbar, you don't want to see that both ordered and unordered lists are selected\n  // you want to see only ordered list selected, because\n  // - you want to know what list you're actually in, you don't really care about the outer list\n  // - when you want to change the list to a unordered list, the unordered list button should be inactive to show you can change to it\n\n  const listTypeAbove = getListTypeAbove(editor);\n  return {\n    marks,\n    textStyles: {\n      selected: headingEntry ? headingEntry[0].level : 'normal',\n      allowedHeadingLevels: locationDocumentFeatures.kind === 'block' && !listEntry ? locationDocumentFeatures.documentFeatures.formatting.headingLevels : []\n    },\n    relationships: {\n      isDisabled: !locationDocumentFeatures.documentFeatures.relationships\n    },\n    code: {\n      isSelected: isElementActive(editor, 'code'),\n      isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.blockTypes.code)\n    },\n    lists: {\n      ordered: {\n        isSelected: isElementActive(editor, 'ordered-list') && (listTypeAbove === 'none' || listTypeAbove === 'ordered-list'),\n        isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.listTypes.ordered && !headingEntry)\n      },\n      unordered: {\n        isSelected: isElementActive(editor, 'unordered-list') && (listTypeAbove === 'none' || listTypeAbove === 'unordered-list'),\n        isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.listTypes.unordered && !headingEntry)\n      }\n    },\n    alignment: {\n      isDisabled: !alignableEntry && !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.alignment),\n      selected: (alignableEntry === null || alignableEntry === void 0 ? void 0 : alignableEntry[0].textAlign) || 'start'\n    },\n    blockquote: {\n      isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.blockTypes.blockquote),\n      isSelected: isElementActive(editor, 'blockquote')\n    },\n    layouts: {\n      isSelected: isElementActive(editor, 'layout')\n    },\n    links: {\n      isDisabled: !editor.selection || slate.Range.isCollapsed(editor.selection) || !locationDocumentFeatures.documentFeatures.links,\n      isSelected: isElementActive(editor, 'link')\n    },\n    editor,\n    dividers: {\n      isDisabled: locationDocumentFeatures.kind === 'inline' || !locationDocumentFeatures.documentFeatures.dividers\n    },\n    clearFormatting: {\n      isDisabled: !(Object.values(marks).some(x => x.isSelected) || !!hasBlockThatClearsOnClearFormatting(editor))\n    },\n    editorDocumentFeatures\n  };\n};\n\nfunction hasBlockThatClearsOnClearFormatting(editor) {\n  const [node] = slate.Editor.nodes(editor, {\n    match: node => node.type === 'heading' || node.type === 'code' || node.type === 'blockquote'\n  });\n  return !!node;\n}\n\nfunction getListTypeAbove(editor) {\n  const listAbove = slate.Editor.above(editor, {\n    match: isListNode\n  });\n\n  if (!listAbove) {\n    return 'none';\n  }\n\n  return listAbove[0].type;\n}\nconst ToolbarStateProvider = _ref => {\n  let {\n    children,\n    componentBlocks,\n    editorDocumentFeatures,\n    relationships\n  } = _ref;\n  const editor = slateReact.useSlate();\n  return /*#__PURE__*/React__default[\"default\"].createElement(DocumentFieldRelationshipsProvider, {\n    value: relationships\n  }, /*#__PURE__*/React__default[\"default\"].createElement(LayoutOptionsProvider, {\n    value: editorDocumentFeatures.layouts\n  }, /*#__PURE__*/React__default[\"default\"].createElement(ComponentBlockContext.Provider, {\n    value: componentBlocks\n  }, /*#__PURE__*/React__default[\"default\"].createElement(ToolbarStateContext.Provider, {\n    value: createToolbarState(editor, componentBlocks, editorDocumentFeatures)\n  }, children))));\n};\n\nconst isLinkActive = editor => {\n  return isElementActive(editor, 'link');\n};\n\nconst wrapLink = (editor, url) => {\n  if (isLinkActive(editor)) {\n    slate.Transforms.unwrapNodes(editor, {\n      match: n => n.type === 'link'\n    });\n    return;\n  }\n\n  const {\n    selection\n  } = editor;\n  const isCollapsed = selection && slate.Range.isCollapsed(selection);\n\n  if (isCollapsed) {\n    slate.Transforms.insertNodes(editor, {\n      type: 'link',\n      href: url,\n      children: [{\n        text: url\n      }]\n    });\n  } else {\n    slate.Transforms.wrapNodes(editor, {\n      type: 'link',\n      href: url,\n      children: [{\n        text: ''\n      }]\n    }, {\n      split: true\n    });\n  }\n};\nconst LinkElement = _ref => {\n  let {\n    attributes,\n    children,\n    element: __elementForGettingPath\n  } = _ref;\n  const {\n    typography\n  } = core.useTheme();\n  const editor = slateReact.useSlateStatic();\n  const [currentElement, setNode] = useElementWithSetNodes(editor, __elementForGettingPath);\n  const href = currentElement.href;\n  const selected = slateReact.useSelected();\n  const focused = slateReact.useFocused();\n  const [focusedInInlineDialog, setFocusedInInlineDialog] = React.useState(false);\n  const [localForceValidation, setLocalForceValidation] = React.useState(false);\n  const {\n    dialog,\n    trigger\n  } = popover.useControlledPopover({\n    isOpen: selected && focused || focusedInInlineDialog,\n    onClose: () => {}\n  }, {\n    placement: 'bottom-start',\n    modifiers: [{\n      name: 'offset',\n      options: {\n        offset: [0, 8]\n      }\n    }]\n  });\n  const unlink = useEventCallback(() => {\n    slate.Transforms.unwrapNodes(editor, {\n      at: slateReact.ReactEditor.findPath(editor, __elementForGettingPath)\n    });\n  });\n  const forceValidation = useForceValidation();\n  const showInvalidState = api.isValidURL(href) ? false : forceValidation || localForceValidation;\n  return core.jsx(\"span\", _extends({}, attributes, {\n    css: {\n      position: 'relative',\n      display: 'inline-block'\n    }\n  }), core.jsx(\"a\", _extends({}, trigger.props, {\n    css: {\n      color: showInvalidState ? 'red' : undefined\n    },\n    ref: trigger.ref,\n    href: href\n  }), children), (selected && focused || focusedInInlineDialog) && core.jsx(core.Portal, null, core.jsx(toolbar.InlineDialog, _extends({}, dialog.props, {\n    ref: dialog.ref,\n    onFocus: () => {\n      setFocusedInInlineDialog(true);\n    },\n    onBlur: () => {\n      setFocusedInInlineDialog(false);\n      setLocalForceValidation(true);\n    }\n  }), core.jsx(\"div\", {\n    css: {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, core.jsx(toolbar.ToolbarGroup, null, core.jsx(\"input\", {\n    css: {\n      fontSize: typography.fontSize.small,\n      width: 240\n    },\n    value: href,\n    onChange: event => {\n      setNode({\n        href: event.target.value\n      });\n    }\n  }), core.jsx(tooltip.Tooltip, {\n    content: \"Open link in new tab\",\n    weight: \"subtle\"\n  }, attrs => core.jsx(toolbar.ToolbarButton, _extends({\n    as: \"a\",\n    onMouseDown: event => {\n      event.preventDefault();\n    },\n    href: href,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    variant: \"action\"\n  }, attrs), externalLinkIcon)), separator, core.jsx(UnlinkButton, {\n    onUnlink: unlink\n  })), showInvalidState && core.jsx(\"span\", {\n    css: {\n      color: 'red'\n    }\n  }, \"Please enter a valid URL\")))));\n};\nconst separator = core.jsx(toolbar.ToolbarSeparator, null);\nconst externalLinkIcon = core.jsx(ExternalLinkIcon.ExternalLinkIcon, {\n  size: \"small\"\n});\nconst UnlinkButton = /*#__PURE__*/React.memo(function UnlinkButton(_ref2) {\n  let {\n    onUnlink\n  } = _ref2;\n  return core.jsx(tooltip.Tooltip, {\n    content: \"Unlink\",\n    weight: \"subtle\"\n  }, attrs => core.jsx(toolbar.ToolbarButton, _extends({\n    variant: \"destructive\",\n    onMouseDown: event => {\n      event.preventDefault();\n      onUnlink();\n    }\n  }, attrs), core.jsx(Trash2Icon.Trash2Icon, {\n    size: \"small\"\n  })));\n});\nlet linkIcon = core.jsx(LinkIcon.LinkIcon, {\n  size: \"small\"\n});\nconst LinkButton = /*#__PURE__*/React.forwardRef(function LinkButton(props, ref) {\n  const {\n    editor,\n    links: {\n      isDisabled,\n      isSelected\n    }\n  } = useToolbarState();\n  return React.useMemo(() => core.jsx(toolbar.ToolbarButton, _extends({\n    ref: ref,\n    isDisabled: isDisabled,\n    isSelected: isSelected,\n    onMouseDown: event => {\n      event.preventDefault();\n      wrapLink(editor, '');\n    }\n  }, props), linkIcon), [isSelected, isDisabled, editor, props, ref]);\n});\nconst linkButton = core.jsx(tooltip.Tooltip, {\n  content: \"Link\",\n  weight: \"subtle\"\n}, attrs => core.jsx(LinkButton, attrs));\nconst markdownLinkPattern = /(^|\\s)\\[(.+?)\\]\\((\\S+)\\)$/;\nfunction withLink(editorDocumentFeatures, componentBlocks, editor) {\n  const {\n    insertText,\n    isInline,\n    normalizeNode\n  } = editor;\n\n  editor.isInline = element => {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  if (editorDocumentFeatures.links) {\n    editor.insertText = text => {\n      insertText(text);\n      if (text !== ')' || !editor.selection) return;\n      const startOfBlock = slate.Editor.start(editor, slate.Editor.above(editor, {\n        match: node => slate.Editor.isBlock(editor, node)\n      })[1]);\n      const startOfBlockToEndOfShortcutString = slate.Editor.string(editor, {\n        anchor: editor.selection.anchor,\n        focus: startOfBlock\n      });\n      const match = markdownLinkPattern.exec(startOfBlockToEndOfShortcutString);\n      if (!match) return;\n      const ancestorComponentChildFieldDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks);\n\n      if ((ancestorComponentChildFieldDocumentFeatures === null || ancestorComponentChildFieldDocumentFeatures === void 0 ? void 0 : ancestorComponentChildFieldDocumentFeatures.documentFeatures.links) === false) {\n        return;\n      }\n\n      const [, maybeWhitespace, linkText, href] = match; // by doing this, the insertText(')') above will happen in a different undo than the link replacement\n      // so that means that when someone does an undo after this\n      // it will undo to the state of \"[content](link)\" rather than \"[content](link\" (note the missing closing bracket)\n\n      editor.history.undos.push([]);\n      const startOfShortcut = match.index === 0 ? startOfBlock : EditorAfterButIgnoringingPointsWithNoContent(editor, startOfBlock, {\n        distance: match.index\n      });\n      const startOfLinkText = EditorAfterButIgnoringingPointsWithNoContent(editor, startOfShortcut, {\n        distance: maybeWhitespace === '' ? 1 : 2\n      });\n      const endOfLinkText = EditorAfterButIgnoringingPointsWithNoContent(editor, startOfLinkText, {\n        distance: linkText.length\n      });\n      slate.Transforms.delete(editor, {\n        at: {\n          anchor: endOfLinkText,\n          focus: editor.selection.anchor\n        }\n      });\n      slate.Transforms.delete(editor, {\n        at: {\n          anchor: startOfShortcut,\n          focus: startOfLinkText\n        }\n      });\n      slate.Transforms.wrapNodes(editor, {\n        type: 'link',\n        href,\n        children: []\n      }, {\n        at: {\n          anchor: editor.selection.anchor,\n          focus: startOfShortcut\n        },\n        split: true\n      });\n      const nextNode = slate.Editor.next(editor);\n\n      if (nextNode) {\n        slate.Transforms.select(editor, nextNode[1]);\n      }\n    };\n  }\n\n  editor.normalizeNode = _ref3 => {\n    let [node, path] = _ref3;\n\n    if (node.type === 'link' && slate.Node.string(node) === '') {\n      slate.Transforms.unwrapNodes(editor, {\n        at: path\n      });\n      return;\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  return editor;\n}\n\nconst insertBlockquote = editor => {\n  const isActive = isElementActive(editor, 'blockquote');\n\n  if (isActive) {\n    slate.Transforms.unwrapNodes(editor, {\n      match: node => node.type === 'blockquote'\n    });\n  } else {\n    slate.Transforms.wrapNodes(editor, {\n      type: 'blockquote',\n      children: []\n    });\n  }\n};\n\nfunction getDirectBlockquoteParentFromSelection(editor) {\n  if (!editor.selection) return {\n    isInside: false\n  };\n  const [, parentPath] = slate.Editor.parent(editor, editor.selection);\n  const [maybeBlockquoteParent, maybeBlockquoteParentPath] = slate.Editor.parent(editor, parentPath);\n  const isBlockquote = maybeBlockquoteParent.type === 'blockquote';\n  return isBlockquote ? {\n    isInside: true,\n    path: maybeBlockquoteParentPath\n  } : {\n    isInside: false\n  };\n}\n\nfunction withBlockquote(editor) {\n  const {\n    insertBreak,\n    deleteBackward\n  } = editor;\n\n  editor.deleteBackward = unit => {\n    if (editor.selection) {\n      const parentBlockquote = getDirectBlockquoteParentFromSelection(editor);\n\n      if (parentBlockquote.isInside && slate.Range.isCollapsed(editor.selection) && // the selection is at the start of the paragraph\n      editor.selection.anchor.offset === 0 && // it's the first paragraph in the panel\n      editor.selection.anchor.path[editor.selection.anchor.path.length - 2] === 0) {\n        slate.Transforms.unwrapNodes(editor, {\n          match: node => node.type === 'blockquote',\n          split: true\n        });\n        return;\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.insertBreak = () => {\n    const panel = getDirectBlockquoteParentFromSelection(editor);\n\n    if (editor.selection && panel.isInside) {\n      const [node, nodePath] = slate.Editor.node(editor, editor.selection);\n\n      if (slate.Path.isDescendant(nodePath, panel.path) && slate.Node.string(node) === '') {\n        slate.Transforms.unwrapNodes(editor, {\n          match: node => node.type === 'blockquote',\n          split: true\n        });\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  return editor;\n}\nconst BlockquoteElement = _ref => {\n  let {\n    attributes,\n    children\n  } = _ref;\n  const {\n    colors,\n    spacing\n  } = core.useTheme();\n  return core.jsx(\"blockquote\", _extends({\n    css: {\n      borderLeft: '3px solid #CBD5E0',\n      color: colors.foregroundDim,\n      margin: 0,\n      padding: `0 ${spacing.xlarge}px`\n    }\n  }, attributes), children);\n};\n\nconst BlockquoteButton = _ref2 => {\n  let {\n    attrs\n  } = _ref2;\n  const {\n    editor,\n    blockquote: {\n      isDisabled,\n      isSelected\n    }\n  } = useToolbarState();\n  return React.useMemo(() => core.jsx(toolbar.ToolbarButton, _extends({\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    onMouseDown: event => {\n      event.preventDefault();\n      insertBlockquote(editor);\n    }\n  }, attrs), core.jsx(QuoteIcon, null)), [editor, attrs, isDisabled, isSelected]);\n};\n\nconst blockquoteButton = core.jsx(tooltip.Tooltip, {\n  content: core.jsx(React.Fragment, null, \"Quote\", core.jsx(toolbar.KeyboardInTooltip, null, '> ')),\n  weight: \"subtle\"\n}, attrs => core.jsx(BlockquoteButton, {\n  attrs: attrs\n}));\n\nconst QuoteIcon = () => core.jsx(IconBase, null, core.jsx(\"path\", {\n  d: \"M11.3031 2C9.83843 2 8.64879 3.22321 8.64879 4.73171C8.64879 6.23928 9.83843 7.46342 11.3031 7.46342C13.8195 7.46342 12.3613 12.2071 9.18767 12.7012C9.03793 12.7239 8.90127 12.7995 8.80243 12.9143C8.70358 13.029 8.64908 13.1754 8.64879 13.3268C8.64879 13.7147 8.99561 14.0214 9.37973 13.9627C15.148 13.0881 17.1991 2.00093 11.3031 2.00093V2ZM3.65526 2C2.18871 2 1 3.22228 1 4.73171C1 6.23835 2.18871 7.46155 3.65526 7.46155C6.17067 7.46155 4.71252 12.2071 1.53888 12.7012C1.3893 12.7239 1.25277 12.7993 1.15394 12.9139C1.05511 13.0285 1.00051 13.1746 1 13.3259C1 13.7137 1.34682 14.0205 1.73001 13.9617C7.50016 13.0872 9.55128 2 3.65526 2Z\"\n}));\n\nfunction withCodeBlock(editor) {\n  const {\n    insertBreak,\n    normalizeNode\n  } = editor;\n\n  editor.insertBreak = () => {\n    const [node, path] = slate.Editor.above(editor, {\n      match: n => slate.Editor.isBlock(editor, n)\n    }) || [editor, []];\n\n    if (node.type === 'code' && slate.Text.isText(node.children[0])) {\n      const text = node.children[0].text;\n\n      if (text[text.length - 1] === '\\n' && editor.selection && slate.Range.isCollapsed(editor.selection) && slate.Point.equals(slate.Editor.end(editor, path), editor.selection.anchor)) {\n        insertBreak();\n        slate.Transforms.setNodes(editor, {\n          type: 'paragraph',\n          children: []\n        });\n        slate.Transforms.delete(editor, {\n          distance: 1,\n          at: {\n            path: [...path, 0],\n            offset: text.length - 1\n          }\n        });\n        return;\n      }\n\n      editor.insertText('\\n');\n      return;\n    }\n\n    insertBreak();\n  };\n\n  editor.normalizeNode = _ref => {\n    let [node, path] = _ref;\n\n    if (node.type === 'code' && slate.Element.isElement(node)) {\n      for (const [index, childNode] of node.children.entries()) {\n        if (!slate.Text.isText(childNode)) {\n          if (editor.isVoid(childNode)) {\n            slate.Transforms.removeNodes(editor, {\n              at: [...path, index]\n            });\n          } else {\n            slate.Transforms.unwrapNodes(editor, {\n              at: [...path, index]\n            });\n          }\n\n          return;\n        }\n\n        const marks = Object.keys(childNode).filter(x => x !== 'text');\n\n        if (marks.length) {\n          slate.Transforms.unsetNodes(editor, marks, {\n            at: [...path, index]\n          });\n          return;\n        }\n      }\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  return editor;\n}\n\nfunction CodeButton(_ref2) {\n  let {\n    attrs\n  } = _ref2;\n  const {\n    editor,\n    code: {\n      isDisabled,\n      isSelected\n    }\n  } = useToolbarState();\n  return React.useMemo(() => core.jsx(toolbar.ToolbarButton, _extends({\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    onMouseDown: event => {\n      event.preventDefault();\n\n      if (isSelected) {\n        slate.Transforms.unwrapNodes(editor, {\n          match: node => node.type === 'code'\n        });\n      } else {\n        slate.Transforms.wrapNodes(editor, {\n          type: 'code',\n          children: [{\n            text: ''\n          }]\n        });\n      }\n    }\n  }, attrs), core.jsx(CodeIcon.CodeIcon, {\n    size: \"small\"\n  })), [isDisabled, isSelected, attrs, editor]);\n}\n\nconst codeButton = core.jsx(tooltip.Tooltip, {\n  weight: \"subtle\",\n  content: core.jsx(React.Fragment, null, \"Code block \", core.jsx(toolbar.KeyboardInTooltip, null, \"```\"))\n}, attrs => core.jsx(CodeButton, {\n  attrs: attrs\n}));\n\nconst TextAlignMenu = _ref => {\n  let {\n    alignment\n  } = _ref;\n  const [showMenu, setShowMenu] = React.useState(false);\n  const {\n    dialog,\n    trigger\n  } = popover.useControlledPopover({\n    isOpen: showMenu,\n    onClose: () => setShowMenu(false)\n  }, {\n    placement: 'bottom-start',\n    modifiers: [{\n      name: 'offset',\n      options: {\n        offset: [0, 8]\n      }\n    }]\n  });\n  return core.jsx(\"div\", {\n    css: {\n      display: 'inline-block',\n      position: 'relative'\n    }\n  }, core.jsx(tooltip.Tooltip, {\n    content: \"Text alignment\",\n    weight: \"subtle\"\n  }, attrs => core.jsx(TextAlignButton, {\n    attrs: attrs,\n    onToggle: () => {\n      setShowMenu(x => !x);\n    },\n    trigger: trigger,\n    showMenu: showMenu\n  })), showMenu ? core.jsx(toolbar.InlineDialog, _extends({\n    ref: dialog.ref\n  }, dialog.props), core.jsx(TextAlignDialog, {\n    alignment: alignment,\n    onClose: () => {\n      setShowMenu(false);\n    }\n  })) : null);\n};\n\nfunction TextAlignDialog(_ref2) {\n  let {\n    alignment,\n    onClose\n  } = _ref2;\n  const {\n    alignment: {\n      selected\n    },\n    editor\n  } = useToolbarState();\n  const alignments = ['start', ...Object.keys(alignment).filter(key => alignment[key])];\n  return core.jsx(toolbar.ToolbarGroup, null, alignments.map(alignment => core.jsx(tooltip.Tooltip, {\n    key: alignment,\n    content: `Align ${alignment}`,\n    weight: \"subtle\"\n  }, attrs => core.jsx(toolbar.ToolbarButton, _extends({\n    isSelected: selected === alignment,\n    onMouseDown: event => {\n      event.preventDefault();\n\n      if (alignment === 'start') {\n        slate.Transforms.unsetNodes(editor, 'textAlign', {\n          match: node => node.type === 'paragraph' || node.type === 'heading'\n        });\n      } else {\n        slate.Transforms.setNodes(editor, {\n          textAlign: alignment\n        }, {\n          match: node => node.type === 'paragraph' || node.type === 'heading'\n        });\n      }\n\n      onClose();\n    }\n  }, attrs), alignmentIcons[alignment]))));\n}\n\nconst alignmentIcons = {\n  start: core.jsx(AlignLeftIcon.AlignLeftIcon, {\n    size: \"small\"\n  }),\n  center: core.jsx(AlignCenterIcon.AlignCenterIcon, {\n    size: \"small\"\n  }),\n  end: core.jsx(AlignRightIcon.AlignRightIcon, {\n    size: \"small\"\n  })\n};\n\nfunction TextAlignButton(props) {\n  const {\n    alignment: {\n      isDisabled,\n      selected\n    }\n  } = useToolbarState();\n  return React.useMemo(() => core.jsx(toolbar.ToolbarButton, _extends({\n    isDisabled: isDisabled,\n    isPressed: props.showMenu,\n    onMouseDown: event => {\n      event.preventDefault();\n      props.onToggle();\n    }\n  }, props.attrs, props.trigger.props, {\n    ref: applyRef.applyRefs(props.attrs.ref, props.trigger.ref)\n  }), alignmentIcons[selected], downIcon$1), [isDisabled, selected, props]);\n}\n\nconst downIcon$1 = core.jsx(ChevronDownIcon.ChevronDownIcon, {\n  size: \"small\"\n});\n\nconst minusIcon = /*#__PURE__*/React__default[\"default\"].createElement(MinusIcon.MinusIcon, {\n  size: \"small\"\n});\nfunction insertDivider(editor) {\n  insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {\n    type: 'divider',\n    children: [{\n      text: ''\n    }]\n  });\n  slate.Editor.insertNode(editor, {\n    type: 'paragraph',\n    children: [{\n      text: ''\n    }]\n  });\n}\n\nconst DividerButton = _ref => {\n  let {\n    attrs\n  } = _ref;\n  const {\n    editor,\n    dividers: {\n      isDisabled\n    }\n  } = useToolbarState();\n  return React.useMemo(() => /*#__PURE__*/React__default[\"default\"].createElement(toolbar.ToolbarButton, _extends({\n    isDisabled: isDisabled,\n    onMouseDown: event => {\n      event.preventDefault();\n      insertDivider(editor);\n    }\n  }, attrs), minusIcon), [editor, isDisabled, attrs]);\n};\n\nconst dividerButton = /*#__PURE__*/React__default[\"default\"].createElement(tooltip.Tooltip, {\n  content: /*#__PURE__*/React__default[\"default\"].createElement(React.Fragment, null, \"Divider\", /*#__PURE__*/React__default[\"default\"].createElement(toolbar.KeyboardInTooltip, null, \"---\")),\n  weight: \"subtle\"\n}, attrs => /*#__PURE__*/React__default[\"default\"].createElement(DividerButton, {\n  attrs: attrs\n}));\nfunction withDivider(editor) {\n  const {\n    isVoid\n  } = editor;\n\n  editor.isVoid = node => {\n    return node.type === 'divider' || isVoid(node);\n  };\n\n  return editor;\n}\n\nconst _excluded = [\"type\"],\n      _excluded2 = [\"ref\"];\nfunction Toolbar(_ref) {\n  let {\n    documentFeatures,\n    viewState\n  } = _ref;\n  const relationship = React.useContext(DocumentFieldRelationshipsContext);\n  const blockComponent = React.useContext(ComponentBlockContext);\n  const hasBlockItems = Object.entries(relationship).length || Object.keys(blockComponent).length;\n  return core.jsx(ToolbarContainer, null, !!documentFeatures.formatting.headingLevels.length && core.jsx(React.Fragment, null, core.jsx(HeadingMenu, {\n    headingLevels: documentFeatures.formatting.headingLevels\n  }), core.jsx(toolbar.ToolbarSeparator, null)), Object.values(documentFeatures.formatting.inlineMarks).some(x => x) && core.jsx(React.Fragment, null, core.jsx(InlineMarks, {\n    marks: documentFeatures.formatting.inlineMarks\n  }), core.jsx(toolbar.ToolbarSeparator, null)), (documentFeatures.formatting.alignment.center || documentFeatures.formatting.alignment.end) && core.jsx(TextAlignMenu, {\n    alignment: documentFeatures.formatting.alignment\n  }), documentFeatures.formatting.listTypes.unordered && core.jsx(tooltip.Tooltip, {\n    content: core.jsx(React.Fragment, null, \"Bullet List \", core.jsx(toolbar.KeyboardInTooltip, null, \"- \")),\n    weight: \"subtle\"\n  }, attrs => core.jsx(ListButton, _extends({\n    type: \"unordered-list\"\n  }, attrs), core.jsx(BulletListIcon, null))), documentFeatures.formatting.listTypes.ordered && core.jsx(tooltip.Tooltip, {\n    content: core.jsx(React.Fragment, null, \"Numbered List \", core.jsx(toolbar.KeyboardInTooltip, null, \"1. \")),\n    weight: \"subtle\"\n  }, attrs => core.jsx(ListButton, _extends({\n    type: \"ordered-list\"\n  }, attrs), core.jsx(NumberedListIcon, null))), (documentFeatures.formatting.alignment.center || documentFeatures.formatting.alignment.end || documentFeatures.formatting.listTypes.unordered || documentFeatures.formatting.listTypes.ordered) && core.jsx(toolbar.ToolbarSeparator, null), documentFeatures.dividers && dividerButton, documentFeatures.links && linkButton, documentFeatures.formatting.blockTypes.blockquote && blockquoteButton, !!documentFeatures.layouts.length && core.jsx(LayoutsButton, {\n    layouts: documentFeatures.layouts\n  }), documentFeatures.formatting.blockTypes.code && codeButton, !!hasBlockItems && core.jsx(InsertBlockMenu, null), core.jsx(toolbar.ToolbarSeparator, null), React.useMemo(() => {\n    const ExpandIcon = viewState !== null && viewState !== void 0 && viewState.expanded ? Minimize2Icon.Minimize2Icon : Maximize2Icon.Maximize2Icon;\n    return viewState && core.jsx(tooltip.Tooltip, {\n      content: viewState.expanded ? 'Collapse' : 'Expand',\n      weight: \"subtle\"\n    }, attrs => core.jsx(toolbar.ToolbarButton, _extends({\n      onMouseDown: event => {\n        event.preventDefault();\n        viewState.toggle();\n      }\n    }, attrs), core.jsx(ExpandIcon, {\n      size: \"small\"\n    })));\n  }, [viewState]));\n}\n/* UI Components */\n\nconst MarkButton = /*#__PURE__*/React.forwardRef(function MarkButton(props, ref) {\n  const {\n    editor,\n    marks: {\n      [props.type]: {\n        isDisabled,\n        isSelected\n      }\n    }\n  } = useToolbarState();\n  return React.useMemo(() => {\n    const restProps = _objectWithoutProperties(props, _excluded);\n\n    return core.jsx(toolbar.ToolbarButton, _extends({\n      ref: ref,\n      isDisabled: isDisabled,\n      isSelected: isSelected,\n      onMouseDown: event => {\n        event.preventDefault();\n\n        if (isSelected) {\n          slate.Editor.removeMark(editor, props.type);\n        } else {\n          slate.Editor.addMark(editor, props.type, true);\n        }\n      }\n    }, restProps));\n  }, [editor, isDisabled, isSelected, props, ref]);\n});\n\nconst ToolbarContainer = _ref2 => {\n  let {\n    children\n  } = _ref2;\n  const {\n    colors,\n    spacing\n  } = core.useTheme();\n  return core.jsx(\"div\", {\n    css: {\n      backgroundColor: colors.background,\n      boxShadow: `0 1px ${colors.border}, 0 -1px ${colors.border}`,\n      paddingBottom: spacing.small,\n      paddingTop: spacing.small,\n      position: 'sticky',\n      top: 0,\n      zIndex: 2\n    }\n  }, core.jsx(toolbar.ToolbarGroup, null, children));\n};\n\nconst downIcon = core.jsx(ChevronDownIcon.ChevronDownIcon, {\n  size: \"small\"\n});\n\nfunction HeadingButton(_ref3) {\n  let {\n    trigger,\n    onToggleShowMenu,\n    showMenu\n  } = _ref3;\n  const {\n    textStyles\n  } = useToolbarState();\n  let buttonLabel = textStyles.selected === 'normal' ? 'Normal text' : 'Heading ' + textStyles.selected;\n  const isDisabled = textStyles.allowedHeadingLevels.length === 0;\n  return React.useMemo(() => core.jsx(toolbar.ToolbarButton, _extends({\n    ref: trigger.ref,\n    isPressed: showMenu,\n    isDisabled: isDisabled,\n    onMouseDown: event => {\n      event.preventDefault();\n      onToggleShowMenu();\n    },\n    style: {\n      textAlign: 'left',\n      width: 116\n    }\n  }, trigger.props), core.jsx(\"span\", {\n    css: {\n      flex: 1\n    }\n  }, buttonLabel), downIcon), [buttonLabel, trigger, showMenu, onToggleShowMenu, isDisabled]);\n}\n\nconst HeadingMenu = _ref4 => {\n  let {\n    headingLevels\n  } = _ref4;\n  const [showMenu, setShowMenu] = React.useState(false);\n  const {\n    dialog,\n    trigger\n  } = popover.useControlledPopover({\n    isOpen: showMenu,\n    onClose: () => setShowMenu(false)\n  }, {\n    placement: 'bottom-start',\n    modifiers: [{\n      name: 'offset',\n      options: {\n        offset: [0, 8]\n      }\n    }]\n  });\n  return core.jsx(\"div\", {\n    css: {\n      display: 'inline-block',\n      position: 'relative'\n    }\n  }, core.jsx(HeadingButton, {\n    showMenu: showMenu,\n    trigger: trigger,\n    onToggleShowMenu: () => {\n      setShowMenu(x => !x);\n    }\n  }), showMenu ? core.jsx(toolbar.InlineDialog, _extends({\n    ref: dialog.ref\n  }, dialog.props), core.jsx(HeadingDialog, {\n    headingLevels: headingLevels,\n    onCloseMenu: () => {\n      setShowMenu(false);\n    }\n  })) : null);\n};\n\nfunction HeadingDialog(_ref5) {\n  let {\n    headingLevels,\n    onCloseMenu\n  } = _ref5;\n  const {\n    editor,\n    textStyles\n  } = useToolbarState();\n  return core.jsx(toolbar.ToolbarGroup, {\n    direction: \"column\"\n  }, headingLevels.map(hNum => {\n    let Tag = `h${hNum}`;\n    const isSelected = textStyles.selected === hNum;\n    return core.jsx(toolbar.ToolbarButton, {\n      key: hNum,\n      isSelected: isSelected,\n      onMouseDown: event => {\n        event.preventDefault();\n\n        if (isSelected) {\n          slate.Transforms.unwrapNodes(editor, {\n            match: n => n.type === 'heading'\n          });\n        } else {\n          slate.Transforms.setNodes(editor, {\n            type: 'heading',\n            level: hNum\n          }, {\n            match: node => node.type === 'paragraph' || node.type === 'heading'\n          });\n        }\n\n        onCloseMenu();\n      }\n    }, core.jsx(Tag, null, \"Heading \", hNum));\n  }));\n}\n\nfunction InsertBlockMenu() {\n  const [showMenu, setShowMenu] = React.useState(false);\n  const {\n    dialog,\n    trigger\n  } = popover.useControlledPopover({\n    isOpen: showMenu,\n    onClose: () => setShowMenu(false)\n  }, {\n    placement: 'bottom-start',\n    modifiers: [{\n      name: 'offset',\n      options: {\n        offset: [0, 8]\n      }\n    }]\n  });\n  return core.jsx(\"div\", {\n    css: {\n      display: 'inline-block',\n      position: 'relative'\n    }\n  }, core.jsx(tooltip.Tooltip, {\n    content: core.jsx(React.Fragment, null, \"Insert \", core.jsx(toolbar.KeyboardInTooltip, null, \"/\")),\n    weight: \"subtle\"\n  }, _ref6 => {\n    let {\n      ref\n    } = _ref6,\n        attrs = _objectWithoutProperties(_ref6, _excluded2);\n\n    return core.jsx(toolbar.ToolbarButton, _extends({\n      ref: applyRef.applyRefs(ref, trigger.ref),\n      isPressed: showMenu,\n      onMouseDown: event => {\n        event.preventDefault();\n        setShowMenu(v => !v);\n      }\n    }, trigger.props, attrs), core.jsx(PlusIcon.PlusIcon, {\n      size: \"small\",\n      style: {\n        strokeWidth: 3\n      }\n    }), core.jsx(ChevronDownIcon.ChevronDownIcon, {\n      size: \"small\"\n    }));\n  }), showMenu ? core.jsx(toolbar.InlineDialog, _extends({\n    ref: dialog.ref\n  }, dialog.props), core.jsx(toolbar.ToolbarGroup, {\n    direction: \"column\"\n  }, core.jsx(RelationshipButton, {\n    onClose: () => setShowMenu(false)\n  }), core.jsx(BlockComponentsButtons, {\n    onClose: () => setShowMenu(false)\n  }))) : null);\n}\n\nfunction InlineMarks(_ref7) {\n  let {\n    marks\n  } = _ref7;\n  const [showMenu, setShowMenu] = React.useState(false);\n  const {\n    dialog,\n    trigger\n  } = popover.useControlledPopover({\n    isOpen: showMenu,\n    onClose: () => setShowMenu(false)\n  }, {\n    placement: 'bottom-start',\n    modifiers: [{\n      name: 'offset',\n      options: {\n        offset: [0, 8]\n      }\n    }]\n  });\n  return core.jsx(React.Fragment, null, marks.bold && core.jsx(tooltip.Tooltip, {\n    content: core.jsx(React.Fragment, null, \"Bold\", core.jsx(toolbar.KeyboardInTooltip, null, modifierKeyText, \"B\")),\n    weight: \"subtle\"\n  }, attrs => core.jsx(MarkButton, _extends({\n    type: \"bold\"\n  }, attrs), core.jsx(BoldIcon.BoldIcon, {\n    size: \"small\",\n    style: {\n      strokeWidth: 3\n    }\n  }))), marks.italic && core.jsx(tooltip.Tooltip, {\n    content: core.jsx(React.Fragment, null, \"Italic\", core.jsx(toolbar.KeyboardInTooltip, null, modifierKeyText, \"I\")),\n    weight: \"subtle\"\n  }, attrs => core.jsx(MarkButton, _extends({\n    type: \"italic\"\n  }, attrs), core.jsx(ItalicIcon.ItalicIcon, {\n    size: \"small\"\n  }))), core.jsx(tooltip.Tooltip, {\n    content: \"More formatting\",\n    weight: \"subtle\"\n  }, attrs => core.jsx(MoreFormattingButton, {\n    isOpen: showMenu,\n    onToggle: () => {\n      setShowMenu(v => !v);\n    },\n    trigger: trigger,\n    attrs: attrs\n  })), showMenu && core.jsx(MoreFormattingDialog, {\n    onCloseMenu: () => {\n      setShowMenu(false);\n    },\n    dialog: dialog,\n    marks: marks\n  }));\n}\n\nfunction MoreFormattingDialog(_ref8) {\n  let {\n    dialog,\n    marks,\n    onCloseMenu\n  } = _ref8;\n  // not doing optimisations in here because this will only render when it's open\n  // which will be rare and you won't be typing while it's open\n  const {\n    editor,\n    clearFormatting: {\n      isDisabled\n    }\n  } = useToolbarState();\n  return core.jsx(toolbar.InlineDialog, _extends({\n    onMouseDown: event => {\n      if (event.target.nodeName === 'BUTTON') {\n        onCloseMenu();\n      }\n    },\n    ref: dialog.ref\n  }, dialog.props), core.jsx(toolbar.ToolbarGroup, {\n    direction: \"column\"\n  }, marks.underline && core.jsx(MarkButton, {\n    type: \"underline\"\n  }, core.jsx(ContentInButtonWithShortcut, {\n    content: \"Underline\",\n    shortcut: `${modifierKeyText}U`\n  })), marks.strikethrough && core.jsx(MarkButton, {\n    type: \"strikethrough\"\n  }, \"Strikethrough\"), marks.code && core.jsx(MarkButton, {\n    type: \"code\"\n  }, \"Code\"), marks.keyboard && core.jsx(MarkButton, {\n    type: \"keyboard\"\n  }, \"Keyboard\"), marks.subscript && core.jsx(MarkButton, {\n    type: \"subscript\"\n  }, \"Subscript\"), marks.superscript && core.jsx(MarkButton, {\n    type: \"superscript\"\n  }, \"Superscript\"), core.jsx(toolbar.ToolbarButton, {\n    isDisabled: isDisabled,\n    onMouseDown: event => {\n      event.preventDefault();\n      clearFormatting(editor);\n    }\n  }, core.jsx(ContentInButtonWithShortcut, {\n    content: \"Clear Formatting\",\n    shortcut: `${modifierKeyText}\\\\`\n  }))));\n}\n\nfunction ContentInButtonWithShortcut(_ref9) {\n  let {\n    content,\n    shortcut\n  } = _ref9;\n  const theme = core.useTheme();\n  return core.jsx(\"span\", {\n    css: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      width: '100%'\n    }\n  }, core.jsx(\"span\", null, content), core.jsx(\"kbd\", {\n    css: {\n      fontFamily: 'inherit',\n      marginLeft: theme.spacing.small,\n      padding: theme.spacing.xxsmall,\n      paddingLeft: theme.spacing.xsmall,\n      paddingRight: theme.spacing.xsmall,\n      backgroundColor: theme.palette.neutral400,\n      borderRadius: theme.radii.xsmall,\n      color: theme.colors.foregroundDim,\n      whiteSpace: 'pre'\n    }\n  }, shortcut));\n}\n\nfunction MoreFormattingButton(_ref10) {\n  let {\n    onToggle,\n    isOpen,\n    trigger,\n    attrs\n  } = _ref10;\n  const {\n    marks\n  } = useToolbarState();\n  const isActive = marks.strikethrough.isSelected || marks.underline.isSelected || marks.code.isSelected || marks.keyboard.isSelected || marks.subscript.isSelected || marks.superscript.isSelected;\n  return React.useMemo(() => core.jsx(toolbar.ToolbarButton, _extends({\n    isPressed: isOpen,\n    isSelected: isActive,\n    onMouseDown: event => {\n      event.preventDefault();\n      onToggle();\n    }\n  }, trigger.props, attrs, {\n    ref: applyRef.applyRefs(attrs.ref, trigger.ref)\n  }), core.jsx(MoreHorizontalIcon.MoreHorizontalIcon, {\n    size: \"small\"\n  })), [isActive, onToggle, isOpen, trigger, attrs]);\n} // Custom (non-feather) Icons\n// ------------------------------\n\n\nconst IconBase = props => core.jsx(\"svg\", _extends({\n  \"aria-hidden\": \"true\",\n  fill: \"currentColor\",\n  focusable: \"false\",\n  height: \"16\",\n  role: \"presentation\",\n  viewBox: \"0 0 16 16\",\n  width: \"16\"\n}, props));\n\nconst BulletListIcon = () => core.jsx(IconBase, null, core.jsx(\"path\", {\n  d: \"M2 4a1 1 0 100-2 1 1 0 000 2zm3.75-1.5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zM3 8a1 1 0 11-2 0 1 1 0 012 0zm-1 6a1 1 0 100-2 1 1 0 000 2z\"\n}));\n\nconst NumberedListIcon = () => core.jsx(IconBase, null, core.jsx(\"path\", {\n  d: \"M2.003 2.5a.5.5 0 00-.723-.447l-1.003.5a.5.5 0 00.446.895l.28-.14V6H.5a.5.5 0 000 1h2.006a.5.5 0 100-1h-.503V2.5zM5 3.25a.75.75 0 01.75-.75h8.5a.75.75 0 010 1.5h-8.5A.75.75 0 015 3.25zm0 5a.75.75 0 01.75-.75h8.5a.75.75 0 010 1.5h-8.5A.75.75 0 015 8.25zm0 5a.75.75 0 01.75-.75h8.5a.75.75 0 010 1.5h-8.5a.75.75 0 01-.75-.75zM.924 10.32l.003-.004a.851.851 0 01.144-.153A.66.66 0 011.5 10c.195 0 .306.068.374.146a.57.57 0 01.128.376c0 .453-.269.682-.8 1.078l-.035.025C.692 11.98 0 12.495 0 13.5a.5.5 0 00.5.5h2.003a.5.5 0 000-1H1.146c.132-.197.351-.372.654-.597l.047-.035c.47-.35 1.156-.858 1.156-1.845 0-.365-.118-.744-.377-1.038-.268-.303-.658-.484-1.126-.484-.48 0-.84.202-1.068.392a1.858 1.858 0 00-.348.384l-.007.011-.002.004-.001.002-.001.001a.5.5 0 00.851.525zM.5 10.055l-.427-.26.427.26z\"\n}));\n\nconst headingStylesMap = {\n  h1: {\n    fontSize: '2.2rem'\n  },\n  h2: {\n    fontSize: '1.8rem'\n  },\n  h3: {\n    fontSize: '1.5rem'\n  },\n  h4: {\n    fontSize: '1.2rem'\n  },\n  h5: {\n    fontSize: '0.83rem'\n  },\n  h6: {\n    fontSize: '0.67rem'\n  }\n};\nconst HeadingElement = _ref => {\n  let {\n    attributes,\n    children,\n    element\n  } = _ref;\n  const Tag = `h${element.level}`;\n  const headingStyle = headingStylesMap[Tag];\n  return core.jsx(Tag, _extends({}, attributes, {\n    css: _objectSpread(_objectSpread({}, headingStyle), {}, {\n      textAlign: element.textAlign\n    })\n  }), children);\n};\nfunction withHeading(editor) {\n  const {\n    insertBreak\n  } = editor;\n\n  editor.insertBreak = () => {\n    insertBreak();\n    const entry = slate.Editor.above(editor, {\n      match: n => n.type === 'heading'\n    });\n    if (!entry || !editor.selection || !slate.Range.isCollapsed(editor.selection)) return;\n    const path = entry[1];\n\n    if ( // we want to unwrap the heading when the user inserted a break at the end of the heading\n    // when the user inserts a break at the end of a heading, the new heading\n    // that we want to unwrap will be empty so the end will be equal to the selection\n    slate.Point.equals(slate.Editor.end(editor, path), editor.selection.anchor)) {\n      slate.Transforms.unwrapNodes(editor, {\n        at: path\n      });\n      return;\n    } // we also want to unwrap the _previous_ heading when the user inserted a break\n    // at the start of the heading, essentially just inserting an empty paragraph above the heading\n\n\n    if (!slate.Path.hasPrevious(path)) return;\n    const previousPath = slate.Path.previous(path);\n    const previousNode = slate.Node.get(editor, previousPath);\n\n    if (previousNode.type === 'heading' && previousNode.children.length === 1 && slate.Text.isText(previousNode.children[0]) && previousNode.children[0].text === '') {\n      slate.Transforms.unwrapNodes(editor, {\n        at: previousPath\n      });\n    }\n  };\n\n  return editor;\n}\n\n// and TS doesn't understand the type narrowing when doing a spread for some reason\n// so that's why things aren't being spread in some cases\n\nconst renderElement = props => {\n  switch (props.element.type) {\n    case 'layout':\n      return core.jsx(LayoutContainer, {\n        attributes: props.attributes,\n        children: props.children,\n        element: props.element\n      });\n\n    case 'layout-area':\n      return core.jsx(LayoutArea, props);\n\n    case 'code':\n      return core.jsx(CodeElement, props);\n\n    case 'component-block':\n      {\n        return core.jsx(ComponentBlocksElement, {\n          attributes: props.attributes,\n          children: props.children,\n          element: props.element\n        });\n      }\n\n    case 'component-inline-prop':\n    case 'component-block-prop':\n      return core.jsx(ComponentInlineProp, props);\n\n    case 'heading':\n      return core.jsx(HeadingElement, {\n        attributes: props.attributes,\n        children: props.children,\n        element: props.element\n      });\n\n    case 'link':\n      return core.jsx(LinkElement, {\n        attributes: props.attributes,\n        children: props.children,\n        element: props.element\n      });\n\n    case 'ordered-list':\n      return core.jsx(\"ol\", props.attributes, props.children);\n\n    case 'unordered-list':\n      return core.jsx(\"ul\", props.attributes, props.children);\n\n    case 'list-item':\n      return core.jsx(\"li\", props.attributes, props.children);\n\n    case 'list-item-content':\n      return core.jsx(\"span\", props.attributes, props.children);\n\n    case 'blockquote':\n      return core.jsx(BlockquoteElement, props);\n\n    case 'relationship':\n      return core.jsx(RelationshipElement, {\n        attributes: props.attributes,\n        children: props.children,\n        element: props.element\n      });\n\n    case 'divider':\n      return core.jsx(DividerElement, props);\n\n    default:\n      return core.jsx(\"p\", _extends({\n        css: {\n          textAlign: props.element.textAlign\n        }\n      }, props.attributes), props.children);\n  }\n};\n/* Block Elements */\n\nconst CodeElement = _ref => {\n  let {\n    attributes,\n    children\n  } = _ref;\n  const {\n    colors,\n    radii,\n    spacing,\n    typography\n  } = core.useTheme();\n  return core.jsx(\"pre\", _extends({\n    spellCheck: \"false\",\n    css: {\n      backgroundColor: colors.backgroundDim,\n      border: `1px solid ${colors.border}`,\n      borderRadius: radii.xsmall,\n      fontFamily: typography.fontFamily.monospace,\n      fontSize: typography.fontSize.small,\n      padding: `${spacing.small}px ${spacing.medium}px`\n    }\n  }, attributes), core.jsx(\"code\", {\n    css: {\n      fontFamily: 'inherit'\n    }\n  }, children));\n};\n\nconst DividerElement = _ref2 => {\n  let {\n    attributes,\n    children\n  } = _ref2;\n  const {\n    colors,\n    spacing\n  } = core.useTheme();\n  const selected = slateReact.useSelected();\n  return core.jsx(\"div\", _extends({}, attributes, {\n    css: {\n      paddingBottom: spacing.medium,\n      paddingTop: spacing.medium,\n      marginBottom: spacing.medium,\n      marginTop: spacing.medium,\n      caretColor: 'transparent'\n    }\n  }), core.jsx(\"hr\", {\n    css: {\n      backgroundColor: selected ? colors.linkColor : colors.border,\n      border: 0,\n      height: 2\n    }\n  }), children);\n};\n\nconst allMarkdownShortcuts = {\n  bold: ['**', '__'],\n  italic: ['*', '_'],\n  strikethrough: ['~~'],\n  code: ['`']\n};\n\nfunction applyMark(editor, mark, shortcutText, startOfStartPoint) {\n  // so that this starts a new undo group\n  editor.history.undos.push([]);\n  const startPointRef = slate.Editor.pointRef(editor, startOfStartPoint);\n  slate.Transforms.delete(editor, {\n    at: editor.selection.anchor,\n    distance: shortcutText.length,\n    reverse: true\n  });\n  slate.Transforms.delete(editor, {\n    at: startOfStartPoint,\n    distance: shortcutText.length\n  });\n  slate.Transforms.setNodes(editor, {\n    [mark]: true\n  }, {\n    match: slate.Text.isText,\n    split: true,\n    at: {\n      anchor: startPointRef.unref(),\n      focus: editor.selection.anchor\n    }\n  }); // once you've ended the shortcut, you're done with the mark\n  // so we need to remove it so the text you insert after doesn't have it\n\n  editor.removeMark(mark);\n}\n\nfunction withMarks(editorDocumentFeatures, componentBlocks, editor) {\n  const {\n    insertText,\n    insertBreak\n  } = editor;\n\n  editor.insertBreak = () => {\n    insertBreak();\n    const marksAfterInsertBreak = slate.Editor.marks(editor);\n    if (!marksAfterInsertBreak || !editor.selection) return;\n    const parentBlock = slate.Editor.above(editor, {\n      match: node => slate.Editor.isBlock(editor, node)\n    });\n    if (!parentBlock) return;\n    const point = EditorAfterButIgnoringingPointsWithNoContent(editor, editor.selection.anchor);\n    const marksAfterInsertBreakArr = Object.keys(marksAfterInsertBreak);\n\n    if (!point || !slate.Path.isDescendant(point.path, parentBlock[1])) {\n      for (const mark of marksAfterInsertBreakArr) {\n        editor.removeMark(mark);\n      }\n\n      return;\n    }\n\n    const textNode = slate.Node.get(editor, point.path);\n\n    for (const mark of marksAfterInsertBreakArr) {\n      if (!textNode[mark]) {\n        editor.removeMark(mark);\n      }\n    }\n  };\n\n  const selectedMarkdownShortcuts = {};\n  const enabledMarks = editorDocumentFeatures.formatting.inlineMarks;\n  Object.keys(allMarkdownShortcuts).forEach(mark => {\n    if (enabledMarks[mark]) {\n      selectedMarkdownShortcuts[mark] = allMarkdownShortcuts[mark];\n    }\n  });\n  if (Object.keys(selectedMarkdownShortcuts).length === 0) return editor;\n\n  editor.insertText = text => {\n    insertText(text);\n\n    if (editor.selection && slate.Range.isCollapsed(editor.selection)) {\n      for (const [mark, shortcuts] of Object.entries(selectedMarkdownShortcuts)) {\n        for (const shortcutText of shortcuts) {\n          if (text === shortcutText[shortcutText.length - 1]) {\n            // this function is not inlined because\n            // https://github.com/swc-project/swc/issues/2622\n            const startOfBlock = getStartOfBlock(editor);\n            let startOfBlockToEndOfShortcutString = slate.Editor.string(editor, {\n              anchor: editor.selection.anchor,\n              focus: startOfBlock\n            });\n            const hasWhitespaceBeforeEndOfShortcut = /\\s/.test(startOfBlockToEndOfShortcutString.substr(-shortcutText.length - 1, 1));\n            const endOfShortcutContainsExpectedContent = shortcutText === startOfBlockToEndOfShortcutString.slice(-shortcutText.length);\n\n            if (hasWhitespaceBeforeEndOfShortcut || !endOfShortcutContainsExpectedContent) {\n              continue;\n            }\n\n            const strToMatchOn = startOfBlockToEndOfShortcutString.slice(0, -shortcutText.length - 1); // TODO: use regex probs\n\n            for (const [offsetFromStartOfBlock] of [...strToMatchOn].reverse().entries()) {\n              const expectedShortcutText = strToMatchOn.substr(offsetFromStartOfBlock, shortcutText.length);\n\n              if (expectedShortcutText !== shortcutText) {\n                continue;\n              }\n\n              const startOfStartOfShortcut = offsetFromStartOfBlock === 0 ? startOfBlock : EditorAfterButIgnoringingPointsWithNoContent(editor, startOfBlock, {\n                distance: offsetFromStartOfBlock\n              });\n              const endOfStartOfShortcut = slate.Editor.after(editor, startOfStartOfShortcut, {\n                distance: shortcutText.length\n              });\n\n              if (offsetFromStartOfBlock !== 0 && !/\\s/.test(slate.Editor.string(editor, {\n                anchor: slate.Editor.before(editor, startOfStartOfShortcut, {\n                  unit: 'character'\n                }),\n                focus: startOfStartOfShortcut\n              }))) {\n                continue;\n              }\n\n              const contentBetweenShortcuts = slate.Editor.string(editor, {\n                anchor: endOfStartOfShortcut,\n                focus: editor.selection.anchor\n              }).slice(0, -shortcutText.length);\n\n              if (contentBetweenShortcuts === '' || /\\s/.test(contentBetweenShortcuts[0])) {\n                continue;\n              } // this is a bit of a weird one\n              // let's say you had <text>__thing _<cursor /></text> and you insert `_`.\n              // without the below, that would turn into <text italic>_thing _<cursor /></text>\n              // but it's probably meant to be bold but it's not because of the space before the ending _\n              // there's probably a better way to do this but meh, this works\n\n\n              if (mark === 'italic' && (contentBetweenShortcuts[0] === '_' || contentBetweenShortcuts[0] === '*')) {\n                continue;\n              }\n\n              const ancestorComponentChildFieldDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks);\n\n              if (ancestorComponentChildFieldDocumentFeatures && ancestorComponentChildFieldDocumentFeatures.inlineMarks !== 'inherit' && ancestorComponentChildFieldDocumentFeatures.inlineMarks[mark] === false) {\n                continue;\n              }\n\n              applyMark(editor, mark, shortcutText, startOfStartOfShortcut);\n              return;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  return editor;\n}\n\nfunction getStartOfBlock(editor) {\n  return slate.Editor.start(editor, slate.Editor.above(editor, {\n    match: node => slate.Editor.isBlock(editor, node)\n  })[1]);\n}\n\nlet noop = () => {};\n\nfunction getOptions(toolbarState, componentBlocks, relationships) {\n  const options = [...Object.entries(relationships).filter(x => x[1].kind === 'inline').map(_ref => {\n    let [relationship, {\n      label\n    }] = _ref;\n    return {\n      label,\n      insert: editor => {\n        slate.Transforms.insertNodes(editor, {\n          type: 'relationship',\n          relationship,\n          data: null,\n          children: [{\n            text: ''\n          }]\n        });\n      }\n    };\n  }), ...Object.keys(componentBlocks).map(key => ({\n    label: componentBlocks[key].label,\n    insert: editor => {\n      insertComponentBlock(editor, componentBlocks, key, relationships);\n    }\n  })), ...toolbarState.textStyles.allowedHeadingLevels.map(level => ({\n    label: `Heading ${level}`,\n\n    insert(editor) {\n      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {\n        type: 'heading',\n        level,\n        children: [{\n          text: ''\n        }]\n      });\n    }\n\n  })), !toolbarState.blockquote.isDisabled && toolbarState.editorDocumentFeatures.formatting.blockTypes.blockquote && {\n    label: 'Blockquote',\n\n    insert(editor) {\n      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {\n        type: 'blockquote',\n        children: [{\n          text: ''\n        }]\n      });\n    }\n\n  }, !toolbarState.code.isDisabled && toolbarState.editorDocumentFeatures.formatting.blockTypes.code && {\n    label: 'Code block',\n\n    insert(editor) {\n      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {\n        type: 'code',\n        children: [{\n          text: ''\n        }]\n      });\n    }\n\n  }, !toolbarState.dividers.isDisabled && toolbarState.editorDocumentFeatures.dividers && {\n    label: 'Divider',\n\n    insert(editor) {\n      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {\n        type: 'divider',\n        children: [{\n          text: ''\n        }]\n      });\n    }\n\n  }, !!toolbarState.editorDocumentFeatures.layouts.length && {\n    label: 'Layout',\n\n    insert(editor) {\n      insertLayout(editor, toolbarState.editorDocumentFeatures.layouts[0]);\n    }\n\n  }, !toolbarState.lists.ordered.isDisabled && toolbarState.editorDocumentFeatures.formatting.listTypes.ordered && {\n    label: 'Numbered List',\n    keywords: ['ordered list'],\n\n    insert(editor) {\n      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {\n        type: 'ordered-list',\n        children: [{\n          text: ''\n        }]\n      });\n    }\n\n  }, !toolbarState.lists.unordered.isDisabled && toolbarState.editorDocumentFeatures.formatting.listTypes.unordered && {\n    label: 'Bullet List',\n    keywords: ['unordered list'],\n\n    insert(editor) {\n      insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, {\n        type: 'unordered-list',\n        children: [{\n          text: ''\n        }]\n      });\n    }\n\n  }];\n  return options.filter(x => typeof x !== 'boolean');\n}\n\nfunction insertOption(editor, text, option) {\n  const path = slateReact.ReactEditor.findPath(editor, text);\n  slate.Transforms.delete(editor, {\n    at: {\n      focus: slate.Editor.start(editor, path),\n      anchor: slate.Editor.end(editor, path)\n    }\n  });\n  option.insert(editor);\n} // TODO: the changing width of the menu when searching isn't great\n\n\nfunction InsertMenu(_ref2) {\n  let {\n    children,\n    text\n  } = _ref2;\n  const toolbarState = useToolbarState();\n  const {\n    editor,\n    relationships: {\n      isDisabled: relationshipsDisabled\n    }\n  } = toolbarState;\n  const {\n    dialog,\n    trigger\n  } = popover.useControlledPopover({\n    isOpen: true,\n    onClose: noop\n  }, {\n    placement: 'bottom-start'\n  });\n  const componentBlocks = React.useContext(ComponentBlockContext);\n  const relationships = useDocumentFieldRelationships();\n  const options = matchSorter.matchSorter(getOptions(toolbarState, componentBlocks, relationshipsDisabled ? {} : relationships), text.text.slice(1), {\n    keys: ['label', 'keywords']\n  });\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n  if (options.length && selectedIndex >= options.length) {\n    setSelectedIndex(0);\n  }\n\n  const stateRef = React.useRef({\n    selectedIndex,\n    options,\n    text\n  });\n  React.useEffect(() => {\n    stateRef.current = {\n      selectedIndex,\n      options,\n      text\n    };\n  });\n  const dialogRef = React.useRef(null);\n  React.useEffect(() => {\n    var _dialogRef$current, _dialogRef$current$ch;\n\n    const element = (_dialogRef$current = dialogRef.current) === null || _dialogRef$current === void 0 ? void 0 : (_dialogRef$current$ch = _dialogRef$current.children) === null || _dialogRef$current$ch === void 0 ? void 0 : _dialogRef$current$ch[selectedIndex];\n\n    if (dialogRef.current && element) {\n      scrollIntoView__default[\"default\"](element, {\n        scrollMode: 'if-needed',\n        boundary: dialogRef.current,\n        block: 'nearest'\n      });\n    }\n  }, [selectedIndex]);\n  React.useEffect(() => {\n    const domNode = slateReact.ReactEditor.toDOMNode(editor, editor);\n\n    let listener = event => {\n      if (event.defaultPrevented) return;\n\n      switch (event.key) {\n        case 'ArrowDown':\n          {\n            if (stateRef.current.options.length) {\n              event.preventDefault();\n              setSelectedIndex(stateRef.current.selectedIndex === stateRef.current.options.length - 1 ? 0 : stateRef.current.selectedIndex + 1);\n            }\n\n            return;\n          }\n\n        case 'ArrowUp':\n          {\n            if (stateRef.current.options.length) {\n              event.preventDefault();\n              setSelectedIndex(stateRef.current.selectedIndex === 0 ? stateRef.current.options.length - 1 : stateRef.current.selectedIndex - 1);\n            }\n\n            return;\n          }\n\n        case 'Enter':\n          {\n            const option = stateRef.current.options[stateRef.current.selectedIndex];\n\n            if (option) {\n              insertOption(editor, stateRef.current.text, option);\n              event.preventDefault();\n            }\n\n            return;\n          }\n\n        case 'Escape':\n          {\n            const path = slateReact.ReactEditor.findPath(editor, stateRef.current.text);\n            slate.Transforms.unsetNodes(editor, 'insertMenu', {\n              at: path\n            });\n            event.preventDefault();\n            return;\n          }\n      }\n    };\n\n    domNode.addEventListener('keydown', listener);\n    return () => {\n      domNode.removeEventListener('keydown', listener);\n    };\n  }, [editor]);\n  const DIALOG_HEIGHT = 300;\n  return core.jsx(React.Fragment, null, core.jsx(\"span\", _extends({}, trigger.props, {\n    css: {\n      color: 'blue'\n    },\n    ref: trigger.ref\n  }), children), core.jsx(core.Portal, null, core.jsx(toolbar.InlineDialog, _extends({\n    contentEditable: false\n  }, dialog.props, {\n    css: {\n      display: options.length ? undefined : 'none',\n      userSelect: 'none',\n      maxHeight: DIALOG_HEIGHT\n    },\n    ref: dialog.ref\n  }), core.jsx(\"div\", {\n    ref: dialogRef,\n    css: {\n      overflowY: 'auto',\n      maxHeight: DIALOG_HEIGHT - 8 * 2\n    }\n  }, options.map((option, index) => core.jsx(toolbar.ToolbarButton, {\n    key: option.label,\n    isPressed: index === selectedIndex,\n    onMouseEnter: () => {\n      setSelectedIndex(index);\n    },\n    onMouseDown: event => {\n      event.preventDefault();\n      insertOption(editor, text, option);\n    }\n  }, option.label))))));\n}\nconst nodeListsWithoutInsertMenu = new WeakSet();\nconst nodesWithoutInsertMenu = new WeakSet();\n\nfunction findPathWithInsertMenu(node, path) {\n  if (slate.Text.isText(node)) {\n    return node.insertMenu ? path : undefined;\n  }\n\n  if (nodeListsWithoutInsertMenu.has(node.children)) {\n    return;\n  }\n\n  for (const [index, child] of node.children.entries()) {\n    if (nodesWithoutInsertMenu.has(child)) continue;\n    let maybePath = findPathWithInsertMenu(child, [...path, index]);\n\n    if (maybePath) {\n      return maybePath;\n    }\n\n    nodesWithoutInsertMenu.add(child);\n  }\n\n  nodeListsWithoutInsertMenu.add(node.children);\n}\n\nfunction removeInsertMenuMarkWhenOutsideOfSelection(editor) {\n  var _Editor$marks;\n\n  const path = findPathWithInsertMenu(editor, []);\n\n  if (path && !((_Editor$marks = slate.Editor.marks(editor)) !== null && _Editor$marks !== void 0 && _Editor$marks.insertMenu) && (!editor.selection || !slate.Path.equals(editor.selection.anchor.path, path) || !slate.Path.equals(editor.selection.focus.path, path))) {\n    slate.Transforms.unsetNodes(editor, 'insertMenu', {\n      at: path\n    });\n    return true;\n  }\n\n  return false;\n}\n\nfunction withInsertMenu(editor) {\n  const {\n    normalizeNode,\n    apply,\n    insertText\n  } = editor;\n\n  editor.normalizeNode = _ref3 => {\n    let [node, path] = _ref3;\n\n    if (slate.Text.isText(node) && node.insertMenu) {\n      if (node.text[0] !== '/') {\n        slate.Transforms.unsetNodes(editor, 'insertMenu', {\n          at: path\n        });\n        return;\n      }\n\n      const whitespaceMatch = /\\s/.exec(node.text);\n\n      if (whitespaceMatch) {\n        slate.Transforms.unsetNodes(editor, 'insertMenu', {\n          at: {\n            anchor: {\n              path,\n              offset: whitespaceMatch.index\n            },\n            focus: slate.Editor.end(editor, path)\n          },\n          match: slate.Text.isText,\n          split: true\n        });\n        return;\n      }\n    }\n\n    if (slate.Editor.isEditor(editor) && removeInsertMenuMarkWhenOutsideOfSelection(editor)) {\n      return;\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  editor.apply = op => {\n    apply(op); // we're calling this here AND in normalizeNode\n    // because normalizeNode won't be called on selection changes\n    // but apply will\n    // we're still calling this from normalizeNode though because we want it to happen\n    // when normalization happens\n\n    if (op.type === 'set_selection') {\n      removeInsertMenuMarkWhenOutsideOfSelection(editor);\n    }\n  };\n\n  editor.insertText = text => {\n    insertText(text);\n\n    if (editor.selection && text === '/') {\n      const startOfBlock = slate.Editor.start(editor, slate.Editor.above(editor, {\n        match: node => slate.Editor.isBlock(editor, node)\n      })[1]);\n      const before = slate.Editor.before(editor, editor.selection.anchor, {\n        unit: 'character'\n      });\n\n      if (before && (slate.Point.equals(startOfBlock, before) || before.offset !== 0 && /\\s/.test(slate.Node.get(editor, before.path).text[before.offset - 1]))) {\n        slate.Transforms.setNodes(editor, {\n          insertMenu: true\n        }, {\n          at: {\n            anchor: before,\n            focus: editor.selection.anchor\n          },\n          match: slate.Text.isText,\n          split: true\n        });\n      }\n    }\n  };\n\n  return editor;\n}\n\n/** @jsxRuntime classic */\n\nfunction Placeholder(_ref) {\n  let {\n    placeholder,\n    children\n  } = _ref;\n  const [width, setWidth] = React.useState(0);\n  return core.jsx(\"span\", {\n    css: {\n      position: 'relative',\n      display: 'inline-block',\n      width\n    }\n  }, core.jsx(\"span\", {\n    contentEditable: false,\n    style: {\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'inline-block',\n      left: 0,\n      top: 0,\n      maxWidth: '100%',\n      whiteSpace: 'nowrap',\n      opacity: '0.5',\n      userSelect: 'none',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      textDecoration: 'none',\n      textAlign: 'left'\n    }\n  }, core.jsx(\"span\", {\n    ref: node => {\n      if (node) {\n        const offsetWidth = node.offsetWidth;\n\n        if (offsetWidth !== width) {\n          setWidth(offsetWidth);\n        }\n      }\n    }\n  }, placeholder)), children);\n}\n\nconst Leaf = _ref2 => {\n  let {\n    leaf,\n    text,\n    children,\n    attributes\n  } = _ref2;\n  const {\n    colors,\n    radii,\n    spacing,\n    typography\n  } = core.useTheme();\n  const {\n    underline,\n    strikethrough,\n    bold,\n    italic,\n    code,\n    keyboard,\n    superscript,\n    subscript,\n    placeholder,\n    insertMenu\n  } = leaf;\n\n  if (placeholder !== undefined) {\n    children = core.jsx(Placeholder, {\n      placeholder: placeholder\n    }, children);\n  }\n\n  if (insertMenu) {\n    children = core.jsx(InsertMenu, {\n      text: text\n    }, children);\n  }\n\n  if (code) {\n    children = core.jsx(\"code\", {\n      css: {\n        backgroundColor: colors.backgroundDim,\n        borderRadius: radii.xsmall,\n        display: 'inline-block',\n        fontFamily: typography.fontFamily.monospace,\n        fontSize: typography.fontSize.small,\n        padding: `0 ${spacing.xxsmall}px`\n      }\n    }, children);\n  }\n\n  if (bold) {\n    children = core.jsx(\"strong\", null, children);\n  }\n\n  if (strikethrough) {\n    children = core.jsx(\"s\", null, children);\n  }\n\n  if (italic) {\n    children = core.jsx(\"em\", null, children);\n  }\n\n  if (keyboard) {\n    children = core.jsx(\"kbd\", null, children);\n  }\n\n  if (superscript) {\n    children = core.jsx(\"sup\", null, children);\n  }\n\n  if (subscript) {\n    children = core.jsx(\"sub\", null, children);\n  }\n\n  if (underline) {\n    children = core.jsx(\"u\", null, children);\n  }\n\n  return core.jsx(\"span\", attributes, children);\n};\n\nconst renderLeaf = props => {\n  return core.jsx(Leaf, props);\n};\n\nfunction withSoftBreaks(isShiftPressedRef, editor) {\n  const {\n    insertBreak\n  } = editor; // TODO: should soft breaks only work in particular places\n\n  editor.insertBreak = () => {\n    if (isShiftPressedRef.current) {\n      slate.Transforms.insertText(editor, '\\n');\n    } else {\n      insertBreak();\n    }\n  };\n\n  return editor;\n}\nfunction useKeyDownRef(targetKey) {\n  const ref = React.useRef(false);\n  React.useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key !== targetKey) return;\n      ref.current = true;\n    };\n\n    const handleKeyUp = e => {\n      if (e.key !== targetKey) return;\n      ref.current = false;\n    };\n\n    document.addEventListener('keydown', handleKeyDown, {\n      passive: true\n    });\n    document.addEventListener('keyup', handleKeyUp, {\n      passive: true\n    });\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [targetKey]);\n  return ref;\n}\n\nconst shortcuts = {\n  '...': '…',\n  '-->': '→',\n  '->': '→',\n  '<-': '←',\n  '<--': '←',\n  '--': '–'\n};\nfunction withShortcuts(editor) {\n  const {\n    insertText\n  } = editor;\n\n  editor.insertText = text => {\n    insertText(text);\n\n    if (text === ' ' && editor.selection && slate.Range.isCollapsed(editor.selection)) {\n      const selectionPoint = editor.selection.anchor;\n      const ancestorBlock = slate.Editor.above(editor, {\n        match: node => slate.Editor.isBlock(editor, node)\n      });\n\n      if (ancestorBlock) {\n        Object.keys(shortcuts).forEach(shortcut => {\n          const pointBefore = slate.Editor.before(editor, selectionPoint, {\n            unit: 'character',\n            distance: shortcut.length + 1\n          });\n\n          if (pointBefore && slate.Path.isDescendant(pointBefore.path, ancestorBlock[1])) {\n            const range = {\n              anchor: selectionPoint,\n              focus: pointBefore\n            };\n            const str = slate.Editor.string(editor, range);\n\n            if (str.substr(0, shortcut.length) === shortcut) {\n              editor.history.undos.push([]);\n              slate.Transforms.select(editor, range);\n              editor.insertText(shortcuts[shortcut] + ' ');\n            }\n          }\n        });\n      }\n    }\n  };\n\n  return editor;\n}\n\nfunction withBlockMarkdownShortcuts(documentFeatures, componentBlocks, editor) {\n  const {\n    insertText\n  } = editor;\n  const shortcuts = Object.create(null);\n\n  const editorDocumentFeaturesForNormalizationToCheck = _objectSpread(_objectSpread({}, documentFeatures), {}, {\n    relationships: true\n  });\n\n  let addShortcut = function (text, insert, shouldBeEnabledInComponentBlock) {\n    let type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'paragraph';\n    if (!shouldBeEnabledInComponentBlock(editorDocumentFeaturesForNormalizationToCheck)) return;\n    const trigger = text[text.length - 1];\n\n    if (!shortcuts[trigger]) {\n      shortcuts[trigger] = Object.create(null);\n    }\n\n    shortcuts[trigger][text] = {\n      insert,\n      type,\n      shouldBeEnabledInComponentBlock\n    };\n  };\n\n  addShortcut('1. ', () => {\n    slate.Transforms.wrapNodes(editor, {\n      type: 'ordered-list',\n      children: []\n    }, {\n      match: n => slate.Editor.isBlock(editor, n)\n    });\n  }, features => features.formatting.listTypes.ordered);\n  addShortcut('- ', () => {\n    slate.Transforms.wrapNodes(editor, {\n      type: 'unordered-list',\n      children: []\n    }, {\n      match: n => slate.Editor.isBlock(editor, n)\n    });\n  }, features => features.formatting.listTypes.unordered);\n  addShortcut('* ', () => {\n    slate.Transforms.wrapNodes(editor, {\n      type: 'unordered-list',\n      children: []\n    }, {\n      match: n => slate.Editor.isBlock(editor, n)\n    });\n  }, features => features.formatting.listTypes.unordered);\n  documentFeatures.formatting.headingLevels.forEach(level => {\n    addShortcut('#'.repeat(level) + ' ', () => {\n      slate.Transforms.setNodes(editor, {\n        type: 'heading',\n        level\n      }, {\n        match: node => node.type === 'paragraph' || node.type === 'heading'\n      });\n    }, features => features.formatting.headingLevels.includes(level), 'heading-or-paragraph');\n  });\n  addShortcut('> ', () => {\n    slate.Transforms.wrapNodes(editor, {\n      type: 'blockquote',\n      children: []\n    }, {\n      match: node => node.type === 'paragraph'\n    });\n  }, features => features.formatting.blockTypes.blockquote);\n  addShortcut('```', () => {\n    slate.Transforms.wrapNodes(editor, {\n      type: 'code',\n      children: []\n    }, {\n      match: node => node.type === 'paragraph'\n    });\n  }, features => features.formatting.blockTypes.code);\n  addShortcut('---', () => {\n    insertDivider(editor);\n  }, features => features.dividers);\n\n  editor.insertText = text => {\n    insertText(text);\n    const shortcutsForTrigger = shortcuts[text];\n\n    if (shortcutsForTrigger && editor.selection && slate.Range.isCollapsed(editor.selection)) {\n      const {\n        anchor\n      } = editor.selection;\n      const block = slate.Editor.above(editor, {\n        match: node => slate.Editor.isBlock(editor, node)\n      });\n      if (!block || block[0].type !== 'paragraph' && block[0].type !== 'heading') return;\n      const start = slate.Editor.start(editor, block[1]);\n      const range = {\n        anchor,\n        focus: start\n      };\n      const shortcutText = slate.Editor.string(editor, range);\n      const shortcut = shortcutsForTrigger[shortcutText];\n\n      if (!shortcut || shortcut.type === 'paragraph' && block[0].type !== 'paragraph') {\n        return;\n      }\n\n      const locationDocumentFeatures = getAncestorComponentChildFieldDocumentFeatures(editor, documentFeatures, componentBlocks);\n\n      if (locationDocumentFeatures && (locationDocumentFeatures.kind === 'inline' || !shortcut.shouldBeEnabledInComponentBlock(locationDocumentFeatures.documentFeatures))) {\n        return;\n      } // so that this starts a new undo group\n\n\n      editor.history.undos.push([]);\n      slate.Transforms.select(editor, range);\n      slate.Transforms.delete(editor);\n      shortcut.insert();\n    }\n  };\n\n  return editor;\n}\n\n// a v important note\n// marks in the markdown ast/html are represented quite differently to how they are in slate\n// if you had the markdown **something https://keystonejs.com something**\n// the bold node is the parent of the link node\n// but in slate, marks are only represented on text nodes\nconst currentlyActiveMarks = new Set();\nconst currentlyDisabledMarks = new Set();\nfunction addMarkToChildren(mark, cb) {\n  const wasPreviouslyActive = currentlyActiveMarks.has(mark);\n  currentlyActiveMarks.add(mark);\n\n  try {\n    return cb();\n  } finally {\n    if (!wasPreviouslyActive) {\n      currentlyActiveMarks.delete(mark);\n    }\n  }\n}\nfunction addMarksToChildren(marks, cb) {\n  const marksToRemove = new Set();\n\n  for (const mark of marks) {\n    if (!currentlyActiveMarks.has(mark)) {\n      marksToRemove.add(mark);\n    }\n\n    currentlyActiveMarks.add(mark);\n  }\n\n  try {\n    return cb();\n  } finally {\n    for (const mark of marksToRemove) {\n      currentlyActiveMarks.delete(mark);\n    }\n  }\n}\nfunction forceDisableMarkForChildren(mark, cb) {\n  const wasPreviouslyDisabled = currentlyDisabledMarks.has(mark);\n  currentlyDisabledMarks.add(mark);\n\n  try {\n    return cb();\n  } finally {\n    if (!wasPreviouslyDisabled) {\n      currentlyDisabledMarks.delete(mark);\n    }\n  }\n}\nfunction getTextNodeForCurrentlyActiveMarks(text) {\n  const node = {\n    text\n  };\n\n  for (const mark of currentlyActiveMarks) {\n    if (!currentlyDisabledMarks.has(mark)) {\n      node[mark] = true;\n    }\n  }\n\n  return node;\n}\n\nfunction getAlignmentFromElement(element) {\n  const parent = element.parentElement; // confluence\n\n  const attribute = parent === null || parent === void 0 ? void 0 : parent.getAttribute('data-align'); // note: we don't show html that confluence would parse as alignment\n  // we could change that but meh\n  // (they match on div.fabric-editor-block-mark with data-align)\n\n  if (attribute === 'center' || attribute === 'end') {\n    return attribute;\n  }\n\n  if (element instanceof HTMLElement) {\n    // Google docs\n    const textAlign = element.style.textAlign;\n\n    if (textAlign === 'center') {\n      return 'center';\n    } // TODO: RTL things?\n\n\n    if (textAlign === 'right' || textAlign === 'end') {\n      return 'end';\n    }\n  }\n} // See https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types\n\n\nconst ELEMENT_TAGS = {\n  A: el => ({\n    type: 'link',\n    href: el.getAttribute('href'),\n    // underline is on links in Google Docs\n    children: forceDisableMarkForChildren('underline', () => deserializeChildren$1(el.childNodes))\n  }),\n  BLOCKQUOTE: () => ({\n    type: 'blockquote'\n  }),\n  H1: el => ({\n    type: 'heading',\n    level: 1,\n    textAlign: getAlignmentFromElement(el)\n  }),\n  H2: el => ({\n    type: 'heading',\n    level: 2,\n    textAlign: getAlignmentFromElement(el)\n  }),\n  H3: el => ({\n    type: 'heading',\n    level: 3,\n    textAlign: getAlignmentFromElement(el)\n  }),\n  H4: el => ({\n    type: 'heading',\n    level: 4,\n    textAlign: getAlignmentFromElement(el)\n  }),\n  H5: el => ({\n    type: 'heading',\n    level: 5,\n    textAlign: getAlignmentFromElement(el)\n  }),\n  H6: el => ({\n    type: 'heading',\n    level: 6,\n    textAlign: getAlignmentFromElement(el)\n  }),\n  IMG: el => ({\n    type: 'paragraph',\n    children: [{\n      text: `<img alt=${JSON.stringify(el.getAttribute('alt') || '')} src=${JSON.stringify(el.getAttribute('src') || '')}>`\n    }]\n  }),\n  LI: () => ({\n    type: 'list-item'\n  }),\n  OL: () => ({\n    type: 'ordered-list'\n  }),\n  P: el => ({\n    type: 'paragraph',\n    textAlign: getAlignmentFromElement(el)\n  }),\n  PRE: () => ({\n    type: 'code'\n  }),\n  UL: () => ({\n    type: 'unordered-list'\n  }),\n  HR: () => ({\n    type: 'divider',\n    children: [{\n      text: ''\n    }]\n  })\n};\nconst TEXT_TAGS = {\n  CODE: 'code',\n  DEL: 'strikethrough',\n  S: 'strikethrough',\n  STRIKE: 'strikethrough',\n  EM: 'italic',\n  I: 'italic',\n  STRONG: 'bold',\n  U: 'underline',\n  SUP: 'superscript',\n  SUB: 'subscript'\n};\n\nfunction marksFromElementAttributes(element) {\n  const marks = new Set();\n\n  if (element instanceof HTMLElement) {\n    const style = element.style;\n    const {\n      nodeName\n    } = element;\n    const markFromNodeName = TEXT_TAGS[nodeName];\n\n    if (markFromNodeName) {\n      marks.add(markFromNodeName);\n    }\n\n    const {\n      fontWeight,\n      textDecoration,\n      verticalAlign\n    } = style;\n\n    if (textDecoration === 'underline') {\n      marks.add('underline');\n    } else if (textDecoration === 'line-through') {\n      marks.add('strikethrough');\n    } // confluence\n\n\n    if (nodeName === 'SPAN' && element.classList.contains('code')) {\n      marks.add('code');\n    } // Google Docs does weird things with <b>\n\n\n    if (nodeName === 'B' && fontWeight !== 'normal') {\n      marks.add('bold');\n    } else if (typeof fontWeight === 'string' && (fontWeight === 'bold' || fontWeight === 'bolder' || fontWeight === '1000' || /^[5-9]\\d{2}$/.test(fontWeight))) {\n      marks.add('bold');\n    }\n\n    if (style.fontStyle === 'italic') {\n      marks.add('italic');\n    } // Google Docs uses vertical align for subscript and superscript instead of <sup> and <sub>\n\n\n    if (verticalAlign === 'super') {\n      marks.add('superscript');\n    } else if (verticalAlign === 'sub') {\n      marks.add('subscript');\n    }\n  }\n\n  return marks;\n}\n\nfunction deserializeHTML(html) {\n  const parsed = new DOMParser().parseFromString(html, 'text/html');\n  return deserializeHTMLNode(parsed.body);\n}\nfunction deserializeHTMLNode(el) {\n  if (el.nodeType === 3) {\n    const text = el.textContent;\n\n    if (!(text !== null && text !== void 0 && text.trim())) {\n      return [];\n    }\n\n    return [getTextNodeForCurrentlyActiveMarks(text)];\n  }\n\n  if (el.nodeType !== 1) {\n    return [];\n  }\n\n  let {\n    nodeName\n  } = el;\n\n  if (nodeName === 'BR') {\n    return [getTextNodeForCurrentlyActiveMarks('\\n')];\n  }\n\n  const marks = marksFromElementAttributes(el); // Dropbox Paper displays blockquotes as lists for some reason\n\n  if (el instanceof globalThis.Element && el.classList.contains('listtype-quote')) {\n    marks.delete('italic');\n    nodeName = 'BLOCKQUOTE';\n  }\n\n  return addMarksToChildren(marks, () => {\n    if (ELEMENT_TAGS[nodeName]) {\n      const attrs = ELEMENT_TAGS[nodeName](el);\n\n      if (attrs.children) {\n        return [attrs];\n      }\n\n      let children = deserializeChildren$1(el.childNodes);\n      return [_objectSpread(_objectSpread({}, attrs), {}, {\n        children: children\n      })];\n    }\n\n    return deserializeChildren$1(el.childNodes);\n  });\n}\n\nfunction deserializeChildren$1(nodes) {\n  const outputNodes = [];\n\n  for (const node of nodes) {\n    const result = deserializeHTMLNode(node);\n\n    if (result.length) {\n      outputNodes.push(...result);\n    }\n  }\n\n  if (!outputNodes.length) {\n    outputNodes.push({\n      text: ''\n    });\n  }\n\n  return outputNodes;\n}\n\nconst markdownConfig = {\n  mdastExtensions: [autoLinkLiteralFromMarkdownExtension__default[\"default\"], gfmStrikethroughFromMarkdownExtension__default[\"default\"]],\n  extensions: [autoLinkLiteralMarkdownSyntax__default[\"default\"], gfmStrikethroughMarkdownSyntax__default[\"default\"]()]\n};\nfunction deserializeMarkdown(markdown) {\n  const root = mdASTUtilFromMarkdown__default[\"default\"](markdown, markdownConfig);\n  const getDefinition = definitions__default[\"default\"](root);\n  let nodes = root.children;\n\n  if (nodes.length === 1 && nodes[0].type === 'paragraph') {\n    nodes = nodes[0].children;\n  }\n\n  return deserializeChildren(nodes, getDefinition);\n}\n\nfunction deserializeChildren(nodes, getDefinition) {\n  const outputNodes = [];\n\n  for (const node of nodes) {\n    const result = deserializeMarkdownNode(node, getDefinition);\n\n    if (result.length) {\n      outputNodes.push(...result);\n    }\n  }\n\n  if (!outputNodes.length) {\n    outputNodes.push({\n      text: ''\n    });\n  }\n\n  return outputNodes;\n}\n\nfunction deserializeMarkdownNode(node, getDefinition) {\n  switch (node.type) {\n    case 'blockquote':\n      {\n        return [{\n          type: 'blockquote',\n          children: deserializeChildren(node.children, getDefinition)\n        }];\n      }\n\n    case 'linkReference':\n      {\n        var _getDefinition;\n\n        return [{\n          type: 'link',\n          href: ((_getDefinition = getDefinition(node.identifier)) === null || _getDefinition === void 0 ? void 0 : _getDefinition.url) || '',\n          children: deserializeChildren(node.children, getDefinition)\n        }];\n      }\n\n    case 'link':\n      {\n        return [{\n          type: 'link',\n          href: node.url,\n          children: deserializeChildren(node.children, getDefinition)\n        }];\n      }\n\n    case 'code':\n      {\n        return [{\n          type: 'code',\n          children: [{\n            text: node.value\n          }]\n        }];\n      }\n\n    case 'paragraph':\n      {\n        return [{\n          type: 'paragraph',\n          children: deserializeChildren(node.children, getDefinition)\n        }];\n      }\n\n    case 'heading':\n      {\n        return [{\n          type: 'heading',\n          level: node.depth,\n          children: deserializeChildren(node.children, getDefinition)\n        }];\n      }\n\n    case 'list':\n      {\n        return [{\n          type: node.ordered ? 'ordered-list' : 'unordered-list',\n          children: deserializeChildren(node.children, getDefinition)\n        }];\n      }\n\n    case 'imageReference':\n      {\n        var _getDefinition2;\n\n        return [getTextNodeForCurrentlyActiveMarks(`![${node.alt || ''}](${((_getDefinition2 = getDefinition(node.identifier)) === null || _getDefinition2 === void 0 ? void 0 : _getDefinition2.url) || ''})`)];\n      }\n\n    case 'image':\n      {\n        return [getTextNodeForCurrentlyActiveMarks(`![${node.alt || ''}](${node.url})`)];\n      }\n\n    case 'listItem':\n      {\n        return [{\n          type: 'list-item',\n          children: deserializeChildren(node.children, getDefinition)\n        }];\n      }\n\n    case 'thematicBreak':\n      {\n        return [{\n          type: 'divider',\n          children: [{\n            text: ''\n          }]\n        }];\n      }\n\n    case 'break':\n      {\n        return [getTextNodeForCurrentlyActiveMarks('\\n')];\n      }\n\n    case 'delete':\n      {\n        return addMarkToChildren('strikethrough', () => deserializeChildren(node.children, getDefinition));\n      }\n\n    case 'strong':\n      {\n        return addMarkToChildren('bold', () => deserializeChildren(node.children, getDefinition));\n      }\n\n    case 'emphasis':\n      {\n        return addMarkToChildren('italic', () => deserializeChildren(node.children, getDefinition));\n      }\n\n    case 'inlineCode':\n      {\n        return addMarkToChildren('code', () => [getTextNodeForCurrentlyActiveMarks(node.value)]);\n      }\n    // while it would be nice if we parsed the html here\n    // it's a bit more complicated than just parsing the html\n    // because an html node might just be an opening/closing node\n    // but we just have an opening/closing node here\n    // not the opening and closing and children\n\n    case 'html':\n    case 'text':\n      {\n        return [getTextNodeForCurrentlyActiveMarks(node.value)];\n      }\n  }\n\n  return [];\n}\n\nfunction insertFragmentButDifferent(editor, nodes) {\n  if (slate.Editor.isBlock(editor, nodes[0])) {\n    insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, nodes);\n  } else {\n    slate.Transforms.insertFragment(editor, nodes);\n  }\n}\n\nfunction withPasting(editor) {\n  const {\n    insertData,\n    setFragmentData\n  } = editor;\n\n  editor.setFragmentData = data => {\n    if (editor.selection) {\n      data.setData('application/x-keystone-document-editor', 'true');\n    }\n\n    setFragmentData(data);\n  };\n\n  editor.insertData = data => {\n    // this exists because behind the scenes, Slate sets the slate document\n    // on the data transfer, this is great because it means when you copy and paste\n    // something in the editor or between editors, it'll use the actual Slate data\n    // rather than the serialized html so component blocks and etc. will work fine\n    // we're setting application/x-keystone-document-editor\n    // though so that we only accept slate data from Keystone's editor\n    // because other editors will likely have a different structure\n    // so we'll rely on the html deserialization instead\n    // (note that yes, we do call insertData at the end of this function\n    // which is where Slate's logic will run, it'll never do anything there though\n    // since anything that will have slate data will also have text/html which we handle\n    // before we call insertData)\n    // TODO: handle the case of copying between editors with different components blocks\n    // (right now, things will blow up in most cases)\n    if (data.getData('application/x-keystone-document-editor') === 'true') {\n      insertData(data);\n      return;\n    }\n\n    const blockAbove = slate.Editor.above(editor, {\n      match: node => slate.Editor.isBlock(editor, node)\n    });\n\n    if ((blockAbove === null || blockAbove === void 0 ? void 0 : blockAbove[0].type) === 'code') {\n      const plain = data.getData('text/plain');\n      editor.insertText(plain);\n      return;\n    }\n\n    let vsCodeEditorData = data.getData('vscode-editor-data');\n\n    if (vsCodeEditorData) {\n      try {\n        const vsCodeData = JSON.parse(vsCodeEditorData);\n\n        if ((vsCodeData === null || vsCodeData === void 0 ? void 0 : vsCodeData.mode) === 'markdown' || (vsCodeData === null || vsCodeData === void 0 ? void 0 : vsCodeData.mode) === 'mdx') {\n          const plain = data.getData('text/plain');\n\n          if (plain) {\n            const fragment = deserializeMarkdown(plain);\n            insertFragmentButDifferent(editor, fragment);\n            return;\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    let html = data.getData('text/html');\n\n    if (html) {\n      const fragment = deserializeHTML(html);\n      insertFragmentButDifferent(editor, fragment);\n      return;\n    }\n\n    const plain = data.getData('text/plain');\n\n    if (plain) {\n      const fragment = deserializeMarkdown(plain);\n      insertFragmentButDifferent(editor, fragment);\n      return;\n    }\n\n    insertData(data);\n  };\n\n  return editor;\n}\n\nconst HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline'\n};\n\nfunction isMarkActive(editor, mark) {\n  const marks = slate.Editor.marks(editor);\n\n  if (marks !== null && marks !== void 0 && marks[mark]) {\n    return true;\n  } // see the stuff about marks in toolbar-state for why this is here\n\n\n  for (const entry of slate.Editor.nodes(editor, {\n    match: slate.Text.isText\n  })) {\n    if (entry[0][mark]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nconst getKeyDownHandler = editor => event => {\n  if (event.defaultPrevented) return;\n\n  for (const hotkey in HOTKEYS) {\n    if (isHotkey__default[\"default\"](hotkey, event.nativeEvent)) {\n      event.preventDefault();\n      const mark = HOTKEYS[hotkey];\n      const isActive = isMarkActive(editor, mark);\n\n      if (isActive) {\n        slate.Editor.removeMark(editor, mark);\n      } else {\n        slate.Editor.addMark(editor, mark, true);\n      }\n\n      return;\n    }\n  }\n\n  if (isHotkey__default[\"default\"]('mod+\\\\', event.nativeEvent)) {\n    clearFormatting(editor);\n    return;\n  }\n\n  if (isHotkey__default[\"default\"]('mod+k', event.nativeEvent)) {\n    event.preventDefault();\n    wrapLink(editor, '');\n    return;\n  }\n\n  if (event.key === 'Tab') {\n    if (event.shiftKey) {\n      unnestList(editor);\n    } else {\n      nestList(editor);\n    }\n\n    event.preventDefault();\n    return;\n  }\n\n  if (event.key === 'Tab' && editor.selection) {\n    const layoutArea = slate.Editor.above(editor, {\n      match: node => node.type === 'layout-area'\n    });\n\n    if (layoutArea) {\n      const layoutAreaToEnter = event.shiftKey ? slate.Editor.before(editor, layoutArea[1], {\n        unit: 'block'\n      }) : slate.Editor.after(editor, layoutArea[1], {\n        unit: 'block'\n      });\n      slate.Transforms.setSelection(editor, {\n        anchor: layoutAreaToEnter,\n        focus: layoutAreaToEnter\n      });\n      event.preventDefault();\n    }\n  }\n};\n\nfunction createDocumentEditor(documentFeatures, componentBlocks, relationships, isShiftPressedRef) {\n  return withPasting(withSoftBreaks(isShiftPressedRef, withBlocksSchema(withLink(documentFeatures, componentBlocks, withList(withHeading(withRelationship(withInsertMenu(withComponentBlocks(componentBlocks, documentFeatures, relationships, withParagraphs(withShortcuts(withDivider(withLayouts(withMarks(documentFeatures, componentBlocks, withCodeBlock(withBlockMarkdownShortcuts(documentFeatures, componentBlocks, withBlockquote(withDocumentFeaturesNormalization(documentFeatures, relationships, slateHistory.withHistory(slateReact.withReact(slate.createEditor()))))))))))))))))))));\n}\nfunction DocumentEditor(_ref) {\n  let {\n    autoFocus,\n    onChange,\n    value,\n    componentBlocks,\n    relationships,\n    documentFeatures\n  } = _ref;\n  const isShiftPressedRef = useKeyDownRef('Shift');\n  const {\n    colors,\n    spacing\n  } = core.useTheme();\n  const [expanded, setExpanded] = React.useState(false);\n  const editor = React.useMemo(() => createDocumentEditor(documentFeatures, componentBlocks, relationships, isShiftPressedRef), [documentFeatures, componentBlocks, relationships, isShiftPressedRef]);\n  return core.jsx(\"div\", {\n    css: [{\n      display: 'flex',\n      flexDirection: 'column'\n    }, expanded && {\n      background: colors.background,\n      bottom: 0,\n      left: 0,\n      overflowY: 'auto',\n      // required to keep the toolbar stuck in place\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      zIndex: 100\n    }]\n  }, core.jsx(DocumentEditorProvider, {\n    componentBlocks: componentBlocks,\n    documentFeatures: documentFeatures,\n    relationships: relationships,\n    editor: editor,\n    value: value,\n    onChange: value => {\n      onChange === null || onChange === void 0 ? void 0 : onChange(value); // this fixes a strange issue in Safari where the selection stays inside of the editor\n      // after a blur event happens but the selection is still in the editor\n      // so the cursor is visually in the wrong place and it inserts text backwards\n\n      const selection = window.getSelection();\n\n      if (selection && !slateReact.ReactEditor.isFocused(editor)) {\n        const editorNode = slateReact.ReactEditor.toDOMNode(editor, editor);\n\n        if (selection.anchorNode === editorNode) {\n          slateReact.ReactEditor.focus(editor);\n        }\n      }\n    }\n  }, React.useMemo(() => core.jsx(Toolbar, {\n    documentFeatures: documentFeatures,\n    viewState: {\n      expanded,\n      toggle: () => {\n        setExpanded(v => !v);\n      }\n    }\n  }), [expanded, documentFeatures]), core.jsx(DocumentEditorEditable, {\n    css: expanded && {\n      marginLeft: spacing.medium,\n      marginRight: spacing.medium\n    },\n    autoFocus: autoFocus,\n    readOnly: onChange === undefined\n  }), // for debugging\n  false ));\n}\nfunction DocumentEditorProvider(_ref2) {\n  let {\n    children,\n    editor,\n    onChange,\n    value,\n    componentBlocks,\n    documentFeatures,\n    relationships\n  } = _ref2;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const identity = React.useMemo(() => Math.random().toString(36), [editor]);\n  return core.jsx(slateReact.Slate // this fixes issues with Slate crashing when a fast refresh occcurs\n  , {\n    key: identity,\n    editor: editor,\n    value: value,\n    onChange: value => {\n      onChange(value); // this fixes a strange issue in Safari where the selection stays inside of the editor\n      // after a blur event happens but the selection is still in the editor\n      // so the cursor is visually in the wrong place and it inserts text backwards\n\n      const selection = window.getSelection();\n\n      if (selection && !slateReact.ReactEditor.isFocused(editor)) {\n        const editorNode = slateReact.ReactEditor.toDOMNode(editor, editor);\n\n        if (selection.anchorNode === editorNode) {\n          slateReact.ReactEditor.focus(editor);\n        }\n      }\n    }\n  }, core.jsx(ToolbarStateProvider, {\n    componentBlocks: componentBlocks,\n    editorDocumentFeatures: documentFeatures,\n    relationships: relationships\n  }, children));\n}\nfunction DocumentEditorEditable(props) {\n  const editor = slateReact.useSlate();\n  const componentBlocks = React.useContext(ComponentBlockContext);\n  const onKeyDown = React.useMemo(() => getKeyDownHandler(editor), [editor]);\n  return core.jsx(slateReact.Editable, _extends({\n    decorate: React.useCallback(_ref3 => {\n      let [node, path] = _ref3;\n      let decorations = [];\n\n      if (node.type === 'component-block') {\n        if (node.children.length === 1 && slate.Element.isElement(node.children[0]) && node.children[0].type === 'component-inline-prop' && node.children[0].propPath === undefined) {\n          return decorations;\n        }\n\n        node.children.forEach((child, index) => {\n          if (slate.Node.string(child) === '' && slate.Element.isElement(child) && (child.type === 'component-block-prop' || child.type === 'component-inline-prop') && child.propPath !== undefined) {\n            const start = slate.Editor.start(editor, [...path, index]);\n            const placeholder = getPlaceholderTextForPropPath(child.propPath, componentBlocks[node.component].props, node.props);\n\n            if (placeholder) {\n              decorations.push({\n                placeholder,\n                anchor: start,\n                focus: start\n              });\n            }\n          }\n        });\n      }\n\n      return decorations;\n    }, [editor, componentBlocks]),\n    css: styles,\n    onKeyDown: onKeyDown,\n    renderElement: renderElement,\n    renderLeaf: renderLeaf\n  }, props));\n}\n\nconst orderedListStyles = ['lower-roman', 'decimal', 'lower-alpha'];\nconst unorderedListStyles = ['square', 'disc', 'circle'];\nlet styles = {\n  flex: 1\n};\nlet listDepth = 10;\n\nwhile (listDepth--) {\n  let arr = Array.from({\n    length: listDepth\n  });\n\n  if (arr.length) {\n    styles[arr.map(() => `ol`).join(' ')] = {\n      listStyle: orderedListStyles[listDepth % 3]\n    };\n    styles[arr.map(() => `ul`).join(' ')] = {\n      listStyle: unorderedListStyles[listDepth % 3]\n    };\n  }\n}\n\nfunction makeEditorSchema(obj) {\n  let ret = {};\n  Object.keys(obj).forEach(key => {\n    const val = obj[key];\n\n    if (val.kind === 'blocks') {\n      ret[key] = {\n        kind: 'blocks',\n        allowedChildren: new Set(val.allowedChildren),\n        blockToWrapInlinesIn: val.allowedChildren[0],\n        invalidPositionHandleMode: val.invalidPositionHandleMode\n      };\n    } else {\n      ret[key] = val;\n    }\n  });\n  return ret;\n}\n\nconst blockquoteChildren = ['paragraph', 'code', 'heading', 'ordered-list', 'unordered-list', 'divider'];\nconst paragraphLike = [...blockquoteChildren, 'blockquote'];\nconst insideOfLayouts = [...paragraphLike, 'component-block'];\nconst editorSchema = makeEditorSchema({\n  editor: {\n    kind: 'blocks',\n    allowedChildren: [...insideOfLayouts, 'layout'],\n    invalidPositionHandleMode: 'move'\n  },\n  layout: {\n    kind: 'blocks',\n    allowedChildren: ['layout-area'],\n    invalidPositionHandleMode: 'move'\n  },\n  'layout-area': {\n    kind: 'blocks',\n    allowedChildren: insideOfLayouts,\n    invalidPositionHandleMode: 'unwrap'\n  },\n  blockquote: {\n    kind: 'blocks',\n    allowedChildren: blockquoteChildren,\n    invalidPositionHandleMode: 'move'\n  },\n  paragraph: {\n    kind: 'inlines',\n    invalidPositionHandleMode: 'unwrap'\n  },\n  code: {\n    kind: 'inlines',\n    invalidPositionHandleMode: 'move'\n  },\n  divider: {\n    kind: 'inlines',\n    invalidPositionHandleMode: 'move'\n  },\n  heading: {\n    kind: 'inlines',\n    invalidPositionHandleMode: 'unwrap'\n  },\n  'component-block': {\n    kind: 'blocks',\n    allowedChildren: ['component-block-prop', 'component-inline-prop'],\n    invalidPositionHandleMode: 'move'\n  },\n  'component-inline-prop': {\n    kind: 'inlines',\n    invalidPositionHandleMode: 'unwrap'\n  },\n  'component-block-prop': {\n    kind: 'blocks',\n    allowedChildren: paragraphLike,\n    invalidPositionHandleMode: 'unwrap'\n  },\n  'ordered-list': {\n    kind: 'blocks',\n    allowedChildren: ['list-item'],\n    invalidPositionHandleMode: 'move'\n  },\n  'unordered-list': {\n    kind: 'blocks',\n    allowedChildren: ['list-item'],\n    invalidPositionHandleMode: 'move'\n  },\n  'list-item': {\n    kind: 'blocks',\n    allowedChildren: ['list-item-content', 'ordered-list', 'unordered-list'],\n    invalidPositionHandleMode: 'unwrap'\n  },\n  'list-item-content': {\n    kind: 'inlines',\n    invalidPositionHandleMode: 'unwrap'\n  }\n});\n\nfunction withBlocksSchema(editor) {\n  const {\n    normalizeNode\n  } = editor;\n\n  editor.normalizeNode = _ref4 => {\n    let [node, path] = _ref4;\n\n    if (!slate.Text.isText(node) && node.type !== 'link' && node.type !== 'relationship') {\n      const nodeType = slate.Editor.isEditor(node) ? 'editor' : node.type;\n\n      if (typeof nodeType !== 'string' || editorSchema[nodeType] === undefined) {\n        slate.Transforms.unwrapNodes(editor, {\n          at: path\n        });\n        return;\n      }\n\n      const info = editorSchema[nodeType];\n\n      for (const [index, childNode] of node.children.entries()) {\n        const childPath = [...path, index];\n\n        if (info.kind === 'inlines') {\n          if (!slate.Text.isText(childNode) && !slate.Editor.isInline(editor, childNode)) {\n            handleNodeInInvalidPosition(editor, [childNode, childPath], path);\n            return;\n          }\n        } else {\n          if (!slate.Editor.isBlock(editor, childNode) || // these checks are implicit in Editor.isBlock\n          // but that isn't encoded in types so these will make TS happy\n          childNode.type === 'link' || childNode.type === 'relationship') {\n            slate.Transforms.wrapNodes(editor, {\n              type: info.blockToWrapInlinesIn,\n              children: []\n            }, {\n              at: childPath\n            });\n            return;\n          }\n\n          if (!info.allowedChildren.has(childNode.type)) {\n            handleNodeInInvalidPosition(editor, [childNode, childPath], path);\n            return;\n          }\n        }\n      }\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  return editor;\n}\n\nfunction handleNodeInInvalidPosition(editor, _ref5, parentPath) {\n  let [node, path] = _ref5;\n  const nodeType = node.type;\n  const childNodeInfo = editorSchema[nodeType];\n\n  if (!childNodeInfo || childNodeInfo.invalidPositionHandleMode === 'unwrap') {\n    slate.Transforms.unwrapNodes(editor, {\n      at: path\n    });\n    return;\n  } // the parent of a block will never be an inline so this casting is okay\n\n\n  const parentNode = slate.Node.get(editor, parentPath);\n  const info = editorSchema[parentNode.type || 'editor'];\n\n  if ((info === null || info === void 0 ? void 0 : info.kind) === 'blocks' && info.allowedChildren.has(nodeType)) {\n    if (parentPath.length === 0) {\n      slate.Transforms.moveNodes(editor, {\n        at: path,\n        to: [path[0] + 1]\n      });\n    } else {\n      slate.Transforms.moveNodes(editor, {\n        at: path,\n        to: slate.Path.next(parentPath)\n      });\n    }\n\n    return;\n  }\n\n  if (slate.Editor.isEditor(parentNode)) {\n    slate.Transforms.moveNodes(editor, {\n      at: path,\n      to: [path[0] + 1]\n    });\n    slate.Transforms.unwrapNodes(editor, {\n      at: [path[0] + 1]\n    });\n    return;\n  }\n\n  handleNodeInInvalidPosition(editor, [node, path], parentPath.slice(0, -1));\n} // to print the editor schema in Graphviz if you want to visualize it\n// function printEditorSchema(editorSchema: EditorSchema) {\n//   return `digraph G {\n//   concentrate=true;\n//   ${Object.keys(editorSchema)\n//     .map(key => {\n//       let val = editorSchema[key];\n//       if (val.kind === 'inlines') {\n//         return `\"${key}\" -> inlines`;\n//       }\n//       if (val.kind === 'blocks') {\n//         return `\"${key}\" -> {${[...val.allowedChildren].map(x => JSON.stringify(x)).join(' ')}}`;\n//       }\n//     })\n//     .join('\\n  ')}\n// }`;\n// }\n\nexports.DocumentEditor = DocumentEditor;\nexports.ForceValidationProvider = ForceValidationProvider;\nexports.assertNever = assertNever;\nexports.clientSideValidateProp = clientSideValidateProp;\nexports.createDocumentEditor = createDocumentEditor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/fields-document/dist/index-173c901b.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/fields-document/dist/toolbar-7e0e994e.cjs.dev.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/fields-document/dist/toolbar-7e0e994e.cjs.dev.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar _objectWithoutProperties = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar React = __webpack_require__(/*! react */ \"react\");\n\nconst _excluded$1 = [\"isRelative\"];\nconst InlineDialog = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    isRelative\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded$1);\n\n  const {\n    radii,\n    spacing\n  } = core.useTheme();\n  const relativeStyles = isRelative ? {\n    left: '50%',\n    margin: spacing.small,\n    transform: 'translateX(-50%)'\n  } : {};\n  return core.jsx(\"div\", _extends({\n    ref: ref,\n    contentEditable: false,\n    css: _objectSpread({\n      background: 'white',\n      borderRadius: radii.small,\n      boxShadow: `rgba(9, 30, 66, 0.31) 0px 0px 1px, rgba(9, 30, 66, 0.25) 0px 4px 8px -2px`,\n      padding: spacing.small,\n      position: 'absolute',\n      userSelect: 'none',\n      zIndex: 1\n    }, relativeStyles)\n  }, props));\n});\n\nconst _excluded = [\"children\", \"direction\"],\n      _excluded2 = [\"as\", \"isDisabled\", \"isPressed\", \"isSelected\", \"variant\"];\n// ------------------------------\n\nconst ToolbarSpacer = () => {\n  const {\n    spacing\n  } = core.useTheme();\n  return core.jsx(\"span\", {\n    css: {\n      display: 'inline-block',\n      width: spacing.large\n    }\n  });\n};\nconst ToolbarSeparator = () => {\n  const {\n    colors,\n    spacing\n  } = core.useTheme();\n  return core.jsx(\"span\", {\n    css: {\n      alignSelf: 'stretch',\n      background: colors.border,\n      display: 'inline-block',\n      marginLeft: spacing.xsmall,\n      marginRight: spacing.xsmall,\n      width: 1\n    }\n  });\n}; // Groups\n// ------------------------------\n\nconst autoFlowDirection = {\n  column: 'row',\n  row: 'column'\n};\nconst ToolbarGroupContext = /*#__PURE__*/React.createContext({\n  direction: 'row'\n});\n\nconst useToolbarGroupContext = () => React.useContext(ToolbarGroupContext);\n\nconst ToolbarGroup = core.forwardRefWithAs((_ref, ref) => {\n  let {\n    children,\n    direction = 'row'\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const {\n    spacing\n  } = core.useTheme();\n  return core.jsx(ToolbarGroupContext.Provider, {\n    value: {\n      direction\n    }\n  }, core.jsx(core.Box, _extends({\n    ref: ref,\n    css: {\n      display: 'inline-grid',\n      gap: spacing.xxsmall,\n      gridAutoFlow: autoFlowDirection[direction]\n    }\n  }, props), children));\n}); // Buttons\n// ------------------------------\n\nconst ToolbarButton = core.forwardRefWithAs(function ToolbarButton(_ref2, ref) {\n  let {\n    as: Tag = 'button',\n    isDisabled,\n    isPressed,\n    isSelected,\n    variant = 'default'\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, _excluded2);\n\n  const extraProps = {};\n  const {\n    direction: groupDirection\n  } = useToolbarGroupContext();\n  const {\n    colors,\n    palette,\n    radii,\n    sizing,\n    spacing,\n    typography\n  } = core.useTheme();\n\n  if (Tag === 'button') {\n    extraProps.type = 'button';\n  }\n\n  const variants = {\n    default: {\n      bgHover: palette.neutral200,\n      bgActive: palette.neutral300,\n      fg: palette.neutral800\n    },\n    action: {\n      bgHover: palette.blue50,\n      bgActive: palette.blue100,\n      fg: palette.blue600\n    },\n    destructive: {\n      bgHover: palette.red50,\n      bgActive: palette.red100,\n      fg: palette.red600\n    }\n  };\n  const style = variants[variant];\n  return core.jsx(Tag, _extends({}, extraProps, {\n    ref: ref,\n    disabled: isDisabled,\n    \"data-pressed\": isPressed,\n    \"data-selected\": isSelected,\n    \"data-display-mode\": groupDirection,\n    css: {\n      alignItems: 'center',\n      background: 0,\n      border: 0,\n      borderRadius: radii.xsmall,\n      color: style.fg,\n      cursor: 'pointer',\n      display: 'flex',\n      fontSize: typography.fontSize.small,\n      fontWeight: typography.fontWeight.medium,\n      height: sizing.medium,\n      whiteSpace: 'nowrap',\n      ':hover': {\n        background: style.bgHover\n      },\n      ':active': {\n        background: style.bgActive\n      },\n      '&:disabled': {\n        color: colors.foregroundDisabled,\n        pointerEvents: 'none'\n      },\n      '&[data-pressed=true]': {\n        background: style.bgActive\n      },\n      '&[data-selected=true]': {\n        background: colors.foregroundMuted,\n        color: colors.background\n      },\n      // alternate styles within button group\n      '&[data-display-mode=row]': {\n        paddingLeft: spacing.small,\n        paddingRight: spacing.small\n      },\n      '&[data-display-mode=column]': {\n        paddingLeft: spacing.medium,\n        paddingRight: spacing.medium\n      }\n    }\n  }, props));\n});\nfunction KeyboardInTooltip(_ref3) {\n  let {\n    children\n  } = _ref3;\n  const theme = core.useTheme();\n  return core.jsx(\"kbd\", {\n    css: {\n      margin: 2,\n      padding: theme.spacing.xxsmall,\n      fontFamily: 'inherit',\n      backgroundColor: theme.colors.foreground,\n      borderRadius: theme.radii.xsmall,\n      color: theme.colors.background,\n      whiteSpace: 'pre'\n    }\n  }, children);\n}\n\nexports.InlineDialog = InlineDialog;\nexports.KeyboardInTooltip = KeyboardInTooltip;\nexports.ToolbarButton = ToolbarButton;\nexports.ToolbarGroup = ToolbarGroup;\nexports.ToolbarSeparator = ToolbarSeparator;\nexports.ToolbarSpacer = ToolbarSpacer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/fields-document/dist/toolbar-7e0e994e.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/fields-document/views/dist/keystone-next-fields-document-views.cjs.dev.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/fields-document/views/dist/keystone-next-fields-document-views.cjs.dev.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar slate = __webpack_require__(/*! slate */ \"slate\");\nvar documentRenderer = __webpack_require__(/*! @keystone-next/document-renderer */ \"@keystone-next/document-renderer\");\nvar weakMemoize = __webpack_require__(/*! @emotion/weak-memoize */ \"@emotion/weak-memoize\");\nvar components = __webpack_require__(/*! @keystone-next/keystone/admin-ui/components */ \"@keystone-next/keystone/admin-ui/components\");\nvar index = __webpack_require__(/*! ../../dist/index-173c901b.cjs.dev.js */ \"../../node_modules/@keystone-next/fields-document/dist/index-173c901b.cjs.dev.js\");\nvar api = __webpack_require__(/*! ../../dist/api-fdd916d1.cjs.dev.js */ \"../../node_modules/@keystone-next/fields-document/dist/api-fdd916d1.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\n__webpack_require__(/*! react */ \"react\");\n__webpack_require__(/*! is-hotkey */ \"is-hotkey\");\n__webpack_require__(/*! slate-react */ \"slate-react\");\n__webpack_require__(/*! slate-history */ \"slate-history\");\n__webpack_require__(/*! @keystone-ui/popover */ \"@keystone-ui/popover\");\n__webpack_require__(/*! @keystone-ui/tooltip */ \"@keystone-ui/tooltip\");\n__webpack_require__(/*! @keystone-ui/icons/icons/LinkIcon */ \"@keystone-ui/icons/icons/LinkIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/Trash2Icon */ \"@keystone-ui/icons/icons/Trash2Icon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ExternalLinkIcon */ \"@keystone-ui/icons/icons/ExternalLinkIcon\");\n__webpack_require__(/*! ../../dist/toolbar-7e0e994e.cjs.dev.js */ \"../../node_modules/@keystone-next/fields-document/dist/toolbar-7e0e994e.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\n__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n__webpack_require__(/*! @keystone-next/keystone/admin-ui/context */ \"@keystone-next/keystone/admin-ui/context\");\n__webpack_require__(/*! @keystone-next/keystone/fields/types/relationship/views/RelationshipSelect */ \"@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect\");\n__webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ColumnsIcon */ \"@keystone-ui/icons/icons/ColumnsIcon\");\n__webpack_require__(/*! apply-ref */ \"apply-ref\");\n__webpack_require__(/*! @keystone-ui/icons/icons/BoldIcon */ \"@keystone-ui/icons/icons/BoldIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ItalicIcon */ \"@keystone-ui/icons/icons/ItalicIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/PlusIcon */ \"@keystone-ui/icons/icons/PlusIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ChevronDownIcon */ \"@keystone-ui/icons/icons/ChevronDownIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/Maximize2Icon */ \"@keystone-ui/icons/icons/Maximize2Icon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/Minimize2Icon */ \"@keystone-ui/icons/icons/Minimize2Icon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/MoreHorizontalIcon */ \"@keystone-ui/icons/icons/MoreHorizontalIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/CodeIcon */ \"@keystone-ui/icons/icons/CodeIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlignLeftIcon */ \"@keystone-ui/icons/icons/AlignLeftIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlignRightIcon */ \"@keystone-ui/icons/icons/AlignRightIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlignCenterIcon */ \"@keystone-ui/icons/icons/AlignCenterIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/MinusIcon */ \"@keystone-ui/icons/icons/MinusIcon\");\n__webpack_require__(/*! match-sorter */ \"match-sorter\");\n__webpack_require__(/*! scroll-into-view-if-needed */ \"scroll-into-view-if-needed\");\n__webpack_require__(/*! mdast-util-from-markdown */ \"mdast-util-from-markdown\");\n__webpack_require__(/*! mdast-util-gfm-autolink-literal/from-markdown */ \"mdast-util-gfm-autolink-literal/from-markdown\");\n__webpack_require__(/*! micromark-extension-gfm-autolink-literal */ \"micromark-extension-gfm-autolink-literal\");\n__webpack_require__(/*! mdast-util-gfm-strikethrough/from-markdown */ \"mdast-util-gfm-strikethrough/from-markdown\");\n__webpack_require__(/*! micromark-extension-gfm-strikethrough */ \"micromark-extension-gfm-strikethrough\");\n__webpack_require__(/*! mdast-util-definitions */ \"mdast-util-definitions\");\n__webpack_require__(/*! @braintree/sanitize-url */ \"@braintree/sanitize-url\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar weakMemoize__default = /*#__PURE__*/_interopDefault(weakMemoize);\n\n/** @jsxRuntime classic */\nconst Field = _ref => {\n  let {\n    field,\n    value,\n    onChange,\n    autoFocus,\n    forceValidation\n  } = _ref;\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), core.jsx(index.ForceValidationProvider, {\n    value: !!forceValidation\n  }, core.jsx(index.DocumentEditor, {\n    autoFocus: autoFocus,\n    value: value,\n    onChange: onChange,\n    componentBlocks: field.componentBlocks,\n    relationships: field.relationships,\n    documentFeatures: field.documentFeatures\n  })));\n};\n\nconst serialize = nodes => {\n  return nodes.map(n => slate.Node.string(n)).join('\\n');\n};\n\nconst Cell = _ref2 => {\n  var _item$field$path;\n\n  let {\n    item,\n    field,\n    linkTo\n  } = _ref2;\n  const value = (_item$field$path = item[field.path]) === null || _item$field$path === void 0 ? void 0 : _item$field$path.document;\n  if (!value) return null;\n  const plainText = serialize(value);\n  const cutText = plainText.length > 100 ? plainText.slice(0, 100) + '...' : plainText;\n  return linkTo ? core.jsx(components.CellLink, linkTo, cutText) : core.jsx(components.CellContainer, null, cutText);\n};\nCell.supportsLinkTo = true;\nconst CardValue = _ref3 => {\n  var _item$field$path2;\n\n  let {\n    item,\n    field\n  } = _ref3;\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), core.jsx(documentRenderer.DocumentRenderer, {\n    document: ((_item$field$path2 = item[field.path]) === null || _item$field$path2 === void 0 ? void 0 : _item$field$path2.document) || []\n  }));\n};\nconst allowedExportsOnCustomViews = ['componentBlocks'];\nconst controller = config => {\n  const memoizedIsComponentBlockValid = weakMemoize__default[\"default\"](componentBlock => weakMemoize__default[\"default\"](props => index.clientSideValidateProp({\n    kind: 'object',\n    value: componentBlock.props\n  }, props)));\n  const componentBlocks = config.customViews.componentBlocks || {};\n  const serverSideComponentBlocksSet = new Set(config.fieldMeta.componentBlocksPassedOnServer);\n  const componentBlocksOnlyBeingPassedOnTheClient = Object.keys(componentBlocks).filter(x => !serverSideComponentBlocksSet.has(x));\n\n  if (componentBlocksOnlyBeingPassedOnTheClient.length) {\n    throw new Error(`(${config.listKey}:${config.path}) The following component blocks are being passed in the custom view but not in the server-side field config: ${JSON.stringify(componentBlocksOnlyBeingPassedOnTheClient)}`);\n  }\n\n  const clientSideComponentBlocksSet = new Set(Object.keys(componentBlocks));\n  const componentBlocksOnlyBeingPassedOnTheServer = config.fieldMeta.componentBlocksPassedOnServer.filter(x => !clientSideComponentBlocksSet.has(x));\n\n  if (componentBlocksOnlyBeingPassedOnTheServer.length) {\n    throw new Error(`(${config.listKey}:${config.path}) The following component blocks are being passed in the server-side field config but not in the custom view: ${JSON.stringify(componentBlocksOnlyBeingPassedOnTheServer)}`);\n  }\n\n  const validateNode = weakMemoize__default[\"default\"](node => {\n    if (slate.Text.isText(node)) {\n      return true;\n    }\n\n    if (node.type === 'component-block') {\n      const componentBlock = componentBlocks[node.component];\n\n      if (componentBlock) {\n        if (!memoizedIsComponentBlockValid(componentBlock)(node.props)) {\n          return false;\n        }\n      }\n    }\n\n    if (node.type === 'link' && (typeof node.href !== 'string' || !api.isValidURL(node.href))) {\n      return false;\n    }\n\n    return node.children.every(node => validateNode(node));\n  });\n  return {\n    path: config.path,\n    label: config.label,\n    graphqlSelection: `${config.path} {document(hydrateRelationships: true)}`,\n    componentBlocks: config.customViews.componentBlocks || {},\n    documentFeatures: config.fieldMeta.documentFeatures,\n    relationships: config.fieldMeta.relationships,\n    defaultValue: [{\n      type: 'paragraph',\n      children: [{\n        text: ''\n      }]\n    }],\n    deserialize: data => {\n      var _data$config$path;\n\n      return ((_data$config$path = data[config.path]) === null || _data$config$path === void 0 ? void 0 : _data$config$path.document) || [{\n        type: 'paragraph',\n        children: [{\n          text: ''\n        }]\n      }];\n    },\n    serialize: value => ({\n      [config.path]: value\n    }),\n\n    validate(value) {\n      return value.every(node => validateNode(node));\n    }\n\n  };\n};\n\nexports.CardValue = CardValue;\nexports.Cell = Cell;\nexports.Field = Field;\nexports.allowedExportsOnCustomViews = allowedExportsOnCustomViews;\nexports.controller = controller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/fields-document/views/dist/keystone-next-fields-document-views.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/fields-document/views/dist/keystone-next-fields-document-views.cjs.js":
/*!***************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/fields-document/views/dist/keystone-next-fields-document-views.cjs.js ***!
  \***************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./keystone-next-fields-document-views.cjs.dev.js */ \"../../node_modules/@keystone-next/fields-document/views/dist/keystone-next-fields-document-views.cjs.dev.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2ZpZWxkcy1kb2N1bWVudC92aWV3cy9kaXN0L2tleXN0b25lLW5leHQtZmllbGRzLWRvY3VtZW50LXZpZXdzLmNqcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsMk1BQTRFO0FBQzlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9Aa2V5c3RvbmUtbmV4dC9maWVsZHMtZG9jdW1lbnQvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWZpZWxkcy1kb2N1bWVudC12aWV3cy5janMuanM/NTdkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9rZXlzdG9uZS1uZXh0LWZpZWxkcy1kb2N1bWVudC12aWV3cy5janMucHJvZC5qc1wiKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4va2V5c3RvbmUtbmV4dC1maWVsZHMtZG9jdW1lbnQtdmlld3MuY2pzLmRldi5qc1wiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/fields-document/views/dist/keystone-next-fields-document-views.cjs.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view/dist/keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.dev.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view/dist/keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.dev.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar CellContainer = __webpack_require__(/*! ../../../../dist/CellContainer-453254b5.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js\");\nvar CellLink = __webpack_require__(/*! ../../../../dist/CellLink-dc41c877.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellLink-dc41c877.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"../../node_modules/@babel/runtime/helpers/defineProperty.js\");\n__webpack_require__(/*! react */ \"react\");\n__webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlertTriangleIcon */ \"@keystone-ui/icons/icons/AlertTriangleIcon\");\n__webpack_require__(/*! next/link */ \"../../node_modules/next/link.js\");\n__webpack_require__(/*! @keystone-ui/toast */ \"@keystone-ui/toast\");\n__webpack_require__(/*! @keystone-ui/loading */ \"@keystone-ui/loading\");\n__webpack_require__(/*! @keystone-ui/modals */ \"@keystone-ui/modals\");\n__webpack_require__(/*! apollo-upload-client */ \"apollo-upload-client\");\n__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\n__webpack_require__(/*! @emotion/hash */ \"@emotion/hash\");\n__webpack_require__(/*! ../../../../dist/sqlite-a2385a81.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n__webpack_require__(/*! ../../../../dist/graphql-ts-schema-2a220120.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\");\n__webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n__webpack_require__(/*! ../../../../dist/admin-meta-graphql-9f9a9c11.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\n__webpack_require__(/*! next/router */ \"next/router\");\n__webpack_require__(/*! @keystone-ui/popover */ \"@keystone-ui/popover\");\n__webpack_require__(/*! @keystone-ui/icons/icons/MoreHorizontalIcon */ \"@keystone-ui/icons/icons/MoreHorizontalIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ChevronRightIcon */ \"@keystone-ui/icons/icons/ChevronRightIcon\");\n__webpack_require__(/*! ../../../../dist/SignoutButton-081410d6.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js\");\n__webpack_require__(/*! fast-deep-equal */ \"fast-deep-equal\");\n__webpack_require__(/*! @keystone-ui/notice */ \"@keystone-ui/notice\");\n__webpack_require__(/*! ../../../../admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js\");\n__webpack_require__(/*! decimal.js */ \"decimal.js\");\n__webpack_require__(/*! @graphql-tools/schema */ \"@graphql-tools/schema\");\n__webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\n__webpack_require__(/*! @graphql-ts/schema */ \"@graphql-ts/schema\");\n__webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\n__webpack_require__(/*! graphql-upload/public/GraphQLUpload.js */ \"graphql-upload/public/GraphQLUpload.js\");\n__webpack_require__(/*! graphql */ \"graphql\");\n__webpack_require__(/*! @graphql-ts/extend */ \"@graphql-ts/extend\");\n__webpack_require__(/*! @graphql-ts/schema/api-with-context */ \"@graphql-ts/schema/api-with-context\");\n\n/** @jsxRuntime classic */\nconst Field = () => null;\nconst Cell = _ref => {\n  let {\n    item,\n    field,\n    linkTo\n  } = _ref;\n  let value = item[field.path] + '';\n  return linkTo ? core.jsx(CellLink.CellLink, linkTo, value) : core.jsx(CellContainer.CellContainer, null, value);\n};\nCell.supportsLinkTo = true;\nconst CardValue = _ref2 => {\n  let {\n    item,\n    field\n  } = _ref2;\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), item[field.path]);\n};\nconst controller = config => {\n  return {\n    path: config.path,\n    label: config.label,\n    graphqlSelection: config.path,\n    idFieldKind: config.fieldMeta.kind,\n    defaultValue: undefined,\n    deserialize: () => {},\n    serialize: () => ({}),\n    filter: {\n      Filter(props) {\n        return core.jsx(fields.TextInput, {\n          onChange: event => {\n            props.onChange(event.target.value);\n          },\n          value: props.value,\n          autoFocus: props.autoFocus\n        });\n      },\n\n      graphql: _ref3 => {\n        let {\n          type,\n          value\n        } = _ref3;\n\n        if (type === 'not') {\n          return {\n            [config.path]: {\n              not: {\n                equals: value\n              }\n            }\n          };\n        }\n\n        const valueWithoutWhitespace = value.replace(/\\s/g, '');\n        const key = type === 'is' ? 'equals' : type === 'not_in' ? 'notIn' : type;\n        return {\n          [config.path]: {\n            [key]: ['in', 'not_in'].includes(type) ? valueWithoutWhitespace.split(',') : valueWithoutWhitespace\n          }\n        };\n      },\n\n      Label(_ref4) {\n        let {\n          label,\n          value,\n          type\n        } = _ref4;\n        let renderedValue = value.replace(/\\s/g, '');\n\n        if (['in', 'not_in'].includes(type)) {\n          renderedValue = value.split(',').join(', ');\n        }\n\n        return `${label.toLowerCase()}: ${renderedValue}`;\n      },\n\n      types: {\n        is: {\n          label: 'Is exactly',\n          initialValue: ''\n        },\n        not: {\n          label: 'Is not exactly',\n          initialValue: ''\n        },\n        gt: {\n          label: 'Is greater than',\n          initialValue: ''\n        },\n        lt: {\n          label: 'Is less than',\n          initialValue: ''\n        },\n        gte: {\n          label: 'Is greater than or equal to',\n          initialValue: ''\n        },\n        lte: {\n          label: 'Is less than or equal to',\n          initialValue: ''\n        },\n        in: {\n          label: 'Is one of',\n          initialValue: ''\n        },\n        not_in: {\n          label: 'Is not one of',\n          initialValue: ''\n        }\n      }\n    }\n  };\n};\n\nexports.CardValue = CardValue;\nexports.Cell = Cell;\nexports.Field = Field;\nexports.controller = controller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view/dist/keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view/dist/keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view/dist/keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view/dist/keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.dev.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL19fX2ludGVybmFsLWRvLW5vdC11c2Utd2lsbC1icmVhay1pbi1wYXRjaC9hZG1pbi11aS9pZC1maWVsZC12aWV3L2Rpc3Qva2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1fX19pbnRlcm5hbC1kby1ub3QtdXNlLXdpbGwtYnJlYWstaW4tcGF0Y2gtYWRtaW4tdWktaWQtZmllbGQtdmlldy5janMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLDBXQUFpSTtBQUNuSSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvX19faW50ZXJuYWwtZG8tbm90LXVzZS13aWxsLWJyZWFrLWluLXBhdGNoL2FkbWluLXVpL2lkLWZpZWxkLXZpZXcvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLV9fX2ludGVybmFsLWRvLW5vdC11c2Utd2lsbC1icmVhay1pbi1wYXRjaC1hZG1pbi11aS1pZC1maWVsZC12aWV3LmNqcy5qcz85OGIyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2tleXN0b25lLW5leHQta2V5c3RvbmUtX19faW50ZXJuYWwtZG8tbm90LXVzZS13aWxsLWJyZWFrLWluLXBhdGNoLWFkbWluLXVpLWlkLWZpZWxkLXZpZXcuY2pzLnByb2QuanNcIik7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2tleXN0b25lLW5leHQta2V5c3RvbmUtX19faW50ZXJuYWwtZG8tbm90LXVzZS13aWxsLWJyZWFrLWluLXBhdGNoLWFkbWluLXVpLWlkLWZpZWxkLXZpZXcuY2pzLmRldi5qc1wiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view/dist/keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/admin-ui/context/dist/keystone-next-keystone-admin-ui-context.cjs.dev.js":
/*!***************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/admin-ui/context/dist/keystone-next-keystone-admin-ui-context.cjs.dev.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar React = __webpack_require__(/*! react */ \"react\");\nvar core$1 = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar toast = __webpack_require__(/*! @keystone-ui/toast */ \"@keystone-ui/toast\");\nvar loading = __webpack_require__(/*! @keystone-ui/loading */ \"@keystone-ui/loading\");\nvar modals = __webpack_require__(/*! @keystone-ui/modals */ \"@keystone-ui/modals\");\nvar apolloUploadClient = __webpack_require__(/*! apollo-upload-client */ \"apollo-upload-client\");\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar hashString = __webpack_require__(/*! @emotion/hash */ \"@emotion/hash\");\nvar core = __webpack_require__(/*! ../../../dist/core-11c9ffea.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/core-11c9ffea.cjs.dev.js\");\n__webpack_require__(/*! ../../../dist/sqlite-a2385a81.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n__webpack_require__(/*! ../../../dist/graphql-ts-schema-2a220120.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\");\nvar client = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\nvar adminMetaGraphql = __webpack_require__(/*! ../../../dist/admin-meta-graphql-9f9a9c11.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js\");\nvar dataGetter = __webpack_require__(/*! ../../../dist/dataGetter-9fbe2f8e.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/dataGetter-9fbe2f8e.cjs.dev.js\");\n__webpack_require__(/*! decimal.js */ \"decimal.js\");\n__webpack_require__(/*! @graphql-tools/schema */ \"@graphql-tools/schema\");\n__webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\n__webpack_require__(/*! @graphql-ts/schema */ \"@graphql-ts/schema\");\n__webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\n__webpack_require__(/*! graphql-upload/public/GraphQLUpload.js */ \"graphql-upload/public/GraphQLUpload.js\");\n__webpack_require__(/*! graphql */ \"graphql\");\n__webpack_require__(/*! @graphql-ts/extend */ \"@graphql-ts/extend\");\n__webpack_require__(/*! @graphql-ts/schema/api-with-context */ \"@graphql-ts/schema/api-with-context\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar React__default = /*#__PURE__*/_interopDefault(React);\nvar hashString__default = /*#__PURE__*/_interopDefault(hashString);\n\nconst expectedExports = new Set(['Cell', 'Field', 'controller', 'CardValue']);\nconst adminMetaLocalStorageKey = 'keystone.adminMeta';\nlet _mustRenderServerResult = true;\n\nfunction useMustRenderServerResult() {\n  let [, forceUpdate] = React.useState(0);\n  React.useEffect(() => {\n    _mustRenderServerResult = false;\n    forceUpdate(1);\n  }, []);\n\n  if (typeof window === 'undefined') {\n    return true;\n  }\n\n  return _mustRenderServerResult;\n}\n\nfunction useAdminMeta(adminMetaHash, fieldViews) {\n  const adminMetaFromLocalStorage = React.useMemo(() => {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const item = localStorage.getItem(adminMetaLocalStorageKey);\n\n    if (item === null) {\n      return;\n    }\n\n    try {\n      let parsed = JSON.parse(item);\n\n      if (parsed.hash === adminMetaHash) {\n        return parsed.meta;\n      }\n    } catch (err) {\n      return;\n    }\n  }, [adminMetaHash]); // it seems like Apollo doesn't skip the first fetch when using skip: true so we're using useLazyQuery instead\n\n  const [fetchStaticAdminMeta, {\n    data,\n    error,\n    called\n  }] = client.useLazyQuery(adminMetaGraphql.staticAdminMetaQuery, {\n    fetchPolicy: 'network-only'\n  });\n  let shouldFetchAdminMeta = adminMetaFromLocalStorage === undefined && !called;\n  React.useEffect(() => {\n    if (shouldFetchAdminMeta) {\n      fetchStaticAdminMeta();\n    }\n  }, [shouldFetchAdminMeta, fetchStaticAdminMeta]);\n  const runtimeAdminMeta = React.useMemo(() => {\n    if ((!data || error) && !adminMetaFromLocalStorage) {\n      return undefined;\n    }\n\n    const adminMeta = adminMetaFromLocalStorage ? adminMetaFromLocalStorage : data.keystone.adminMeta;\n    const runtimeAdminMeta = {\n      enableSessionItem: adminMeta.enableSessionItem,\n      enableSignout: adminMeta.enableSignout,\n      lists: {}\n    };\n    adminMeta.lists.forEach(list => {\n      runtimeAdminMeta.lists[list.key] = _objectSpread(_objectSpread({}, list), {}, {\n        gqlNames: core.getGqlNames({\n          listKey: list.key,\n          pluralGraphQLName: list.listQueryName\n        }),\n        fields: {}\n      });\n      list.fields.forEach(field => {\n        var _field$itemView$field, _field$itemView;\n\n        expectedExports.forEach(exportName => {\n          if (fieldViews[field.viewsIndex][exportName] === undefined) {\n            throw new Error(`The view for the field at ${list.key}.${field.path} is missing the ${exportName} export`);\n          }\n        });\n        Object.keys(fieldViews[field.viewsIndex]).forEach(exportName => {\n          if (!expectedExports.has(exportName) && exportName !== 'allowedExportsOnCustomViews') {\n            throw new Error(`Unexpected export named ${exportName} from the view from the field at ${list.key}.${field.path}`);\n          }\n        });\n\n        const views = _objectSpread({}, fieldViews[field.viewsIndex]);\n\n        const customViews = {};\n\n        if (field.customViewsIndex !== null) {\n          const customViewsSource = fieldViews[field.customViewsIndex];\n          const allowedExportsOnCustomViews = new Set(views.allowedExportsOnCustomViews);\n          Object.keys(customViewsSource).forEach(exportName => {\n            if (allowedExportsOnCustomViews.has(exportName)) {\n              customViews[exportName] = customViewsSource[exportName];\n            } else if (expectedExports.has(exportName)) {\n              views[exportName] = customViewsSource[exportName];\n            } else {\n              throw new Error(`Unexpected export named ${exportName} from the custom view from field at ${list.key}.${field.path}`);\n            }\n          });\n        }\n\n        runtimeAdminMeta.lists[list.key].fields[field.path] = _objectSpread(_objectSpread({}, field), {}, {\n          itemView: {\n            fieldMode: (_field$itemView$field = (_field$itemView = field.itemView) === null || _field$itemView === void 0 ? void 0 : _field$itemView.fieldMode) !== null && _field$itemView$field !== void 0 ? _field$itemView$field : null\n          },\n          views,\n          controller: fieldViews[field.viewsIndex].controller({\n            listKey: list.key,\n            fieldMeta: field.fieldMeta,\n            label: field.label,\n            path: field.path,\n            customViews\n          })\n        });\n      });\n    });\n\n    if (typeof window !== 'undefined' && !adminMetaFromLocalStorage) {\n      localStorage.setItem(adminMetaLocalStorageKey, JSON.stringify({\n        hash: hashString__default[\"default\"](JSON.stringify(adminMeta)),\n        meta: adminMeta\n      }));\n    }\n\n    return runtimeAdminMeta;\n  }, [data, error, adminMetaFromLocalStorage, fieldViews]);\n  const mustRenderServerResult = useMustRenderServerResult();\n\n  if (mustRenderServerResult) {\n    return {\n      state: 'loading'\n    };\n  }\n\n  if (runtimeAdminMeta) {\n    return {\n      state: 'loaded',\n      value: runtimeAdminMeta\n    };\n  }\n\n  if (error) {\n    return {\n      state: 'error',\n      error,\n      refetch: () => {\n        fetchStaticAdminMeta();\n      }\n    };\n  }\n\n  return {\n    state: 'loading'\n  };\n}\n\nfunction useLazyMetadata(query) {\n  let result = client.useQuery(query, {\n    errorPolicy: 'all',\n    fetchPolicy: 'network-only'\n  });\n  return React.useMemo(() => {\n    var _result$error, _result$error$network, _result$error2, _result$error$network2, _result$error3, _result$error$network3, _result$error4;\n\n    let refetch = () => {\n      result.refetch();\n    };\n\n    let dataGetter$1 = dataGetter.makeDataGetter(result.data, (_result$error = result.error) === null || _result$error === void 0 ? void 0 : _result$error.graphQLErrors);\n    const authenticatedItemGetter = dataGetter$1.get('authenticatedItem');\n    const keystoneMetaGetter = dataGetter$1.get('keystone');\n    return {\n      refetch,\n      authenticatedItem: getAuthenticatedItem(result, authenticatedItemGetter.errors || ((_result$error$network = (_result$error2 = result.error) === null || _result$error2 === void 0 ? void 0 : _result$error2.networkError) !== null && _result$error$network !== void 0 ? _result$error$network : undefined)),\n      visibleLists: getVisibleLists(result, keystoneMetaGetter.errors || ((_result$error$network2 = (_result$error3 = result.error) === null || _result$error3 === void 0 ? void 0 : _result$error3.networkError) !== null && _result$error$network2 !== void 0 ? _result$error$network2 : undefined)),\n      createViewFieldModes: getCreateViewFieldModes(result, keystoneMetaGetter.errors || ((_result$error$network3 = (_result$error4 = result.error) === null || _result$error4 === void 0 ? void 0 : _result$error4.networkError) !== null && _result$error$network3 !== void 0 ? _result$error$network3 : undefined))\n    };\n  }, [result]);\n}\n\nfunction getCreateViewFieldModes(_ref, error) {\n  let {\n    data\n  } = _ref;\n\n  if (error) {\n    return {\n      state: 'error',\n      error\n    };\n  }\n\n  if (data) {\n    const lists = {};\n    data.keystone.adminMeta.lists.forEach(list => {\n      lists[list.key] = {};\n      list.fields.forEach(field => {\n        lists[list.key][field.path] = field.createView.fieldMode;\n      });\n    });\n    return {\n      state: 'loaded',\n      lists\n    };\n  }\n\n  return {\n    state: 'loading'\n  };\n}\n\nfunction getVisibleLists(_ref2, error) {\n  let {\n    data\n  } = _ref2;\n\n  if (error) {\n    return {\n      state: 'error',\n      error\n    };\n  }\n\n  if (data) {\n    const lists = new Set();\n    data.keystone.adminMeta.lists.forEach(list => {\n      if (!list.isHidden) {\n        lists.add(list.key);\n      }\n    });\n    return {\n      state: 'loaded',\n      lists\n    };\n  }\n\n  return {\n    state: 'loading'\n  };\n}\n\nfunction getAuthenticatedItem(_ref3, error) {\n  let {\n    data\n  } = _ref3;\n\n  if (error) {\n    return {\n      state: 'error',\n      error\n    };\n  }\n\n  if (data) {\n    if (!data.authenticatedItem || // this is for the case where there is a new type\n    // in the AuthenticatedItem union and the query\n    // that the admin ui has doesn't get the id\n    // (yes, undefined is very specific and very intentional, it should not be checking for null)\n    data.authenticatedItem.id === undefined) {\n      return {\n        state: 'unauthenticated'\n      };\n    }\n\n    const labelField = Object.keys(data.authenticatedItem).filter(x => x !== '__typename' && x !== 'id')[0];\n    return {\n      state: 'authenticated',\n      id: data.authenticatedItem.id,\n      label: data.authenticatedItem[labelField] || data.authenticatedItem.id,\n      listKey: data.authenticatedItem.__typename\n    };\n  }\n\n  return {\n    state: 'loading'\n  };\n}\n\nconst KeystoneContext = /*#__PURE__*/React.createContext(undefined);\n\nfunction InternalKeystoneProvider(_ref) {\n  let {\n    adminConfig,\n    fieldViews,\n    adminMetaHash,\n    children,\n    lazyMetadataQuery,\n    apiPath\n  } = _ref;\n  const adminMeta = useAdminMeta(adminMetaHash, fieldViews);\n  const {\n    authenticatedItem,\n    visibleLists,\n    createViewFieldModes,\n    refetch\n  } = useLazyMetadata(lazyMetadataQuery);\n\n  const reinitContext = () => {\n    var _adminMeta$refetch;\n\n    adminMeta === null || adminMeta === void 0 ? void 0 : (_adminMeta$refetch = adminMeta.refetch) === null || _adminMeta$refetch === void 0 ? void 0 : _adminMeta$refetch.call(adminMeta);\n    refetch();\n  };\n\n  if (adminMeta.state === 'loading') {\n    return /*#__PURE__*/React__default[\"default\"].createElement(core$1.Center, {\n      fillView: true\n    }, /*#__PURE__*/React__default[\"default\"].createElement(loading.LoadingDots, {\n      label: \"Loading Admin Metadata\",\n      size: \"large\"\n    }));\n  }\n\n  return /*#__PURE__*/React__default[\"default\"].createElement(toast.ToastProvider, null, /*#__PURE__*/React__default[\"default\"].createElement(modals.DrawerProvider, null, /*#__PURE__*/React__default[\"default\"].createElement(KeystoneContext.Provider, {\n    value: {\n      adminConfig,\n      adminMeta,\n      fieldViews,\n      authenticatedItem,\n      reinitContext,\n      visibleLists,\n      createViewFieldModes,\n      apiPath\n    }\n  }, children)));\n}\n\nconst KeystoneProvider = props => {\n  const apolloClient = React.useMemo(() => new client.ApolloClient({\n    cache: new client.InMemoryCache(),\n    link: apolloUploadClient.createUploadLink({\n      uri: props.apiPath\n    })\n  }), [props.apiPath]);\n  return /*#__PURE__*/React__default[\"default\"].createElement(client.ApolloProvider, {\n    client: apolloClient\n  }, /*#__PURE__*/React__default[\"default\"].createElement(InternalKeystoneProvider, props));\n};\nconst useKeystone = () => {\n  const value = React.useContext(KeystoneContext);\n\n  if (!value) {\n    throw new Error('useKeystone must be called inside a KeystoneProvider component');\n  }\n\n  if (value.adminMeta.state === 'error') {\n    // If we get an \"Access denied\" error, it probably means the user doesn't have access to the\n    // adminMeta but has navigated (probably client-side) to a page that requires it. We reload\n    // the page so the server-side access control can run which should bounce them to the right\n    // place (or display the no-access page)\n    if (value.adminMeta.error.message === 'Access denied') {\n      window.location.reload();\n    }\n\n    throw new Error('An error occurred when loading Admin Metadata');\n  }\n\n  return {\n    adminConfig: value.adminConfig,\n    adminMeta: value.adminMeta.value,\n    authenticatedItem: value.authenticatedItem,\n    visibleLists: value.visibleLists,\n    createViewFieldModes: value.createViewFieldModes,\n    apiPath: value.apiPath\n  };\n};\nconst useReinitContext = () => {\n  const value = React.useContext(KeystoneContext);\n\n  if (!value) {\n    throw new Error('useReinitContext must be called inside a KeystoneProvider component');\n  }\n\n  return value.reinitContext;\n};\nconst useRawKeystone = () => {\n  const value = React.useContext(KeystoneContext);\n\n  if (!value) {\n    throw new Error('useRawKeystone must be called inside a KeystoneProvider component');\n  }\n\n  return value;\n};\nconst useList = key => {\n  const {\n    adminMeta: {\n      lists\n    }\n  } = useKeystone();\n\n  if (lists[key]) {\n    return lists[key];\n  } else {\n    throw new Error(`Invalid list key provided to useList: ${key}`);\n  }\n};\n\nexports.KeystoneProvider = KeystoneProvider;\nexports.useKeystone = useKeystone;\nexports.useList = useList;\nexports.useRawKeystone = useRawKeystone;\nexports.useReinitContext = useReinitContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2FkbWluLXVpL2NvbnRleHQvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWFkbWluLXVpLWNvbnRleHQuY2pzLmRldi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELFlBQVksbUJBQU8sQ0FBQyxvQkFBTztBQUMzQixhQUFhLG1CQUFPLENBQUMsNENBQW1CO0FBQ3hDLFlBQVksbUJBQU8sQ0FBQyw4Q0FBb0I7QUFDeEMsY0FBYyxtQkFBTyxDQUFDLGtEQUFzQjtBQUM1QyxhQUFhLG1CQUFPLENBQUMsZ0RBQXFCO0FBQzFDLHlCQUF5QixtQkFBTyxDQUFDLGtEQUFzQjtBQUN2RCxvQkFBb0IsbUJBQU8sQ0FBQyx3R0FBc0M7QUFDbEUsaUJBQWlCLG1CQUFPLENBQUMsb0NBQWU7QUFDeEMsV0FBVyxtQkFBTyxDQUFDLHdIQUF3QztBQUMzRCxtQkFBTyxDQUFDLDRIQUEwQztBQUNsRCxtQkFBTyxDQUFDLDRIQUFnRDtBQUN4RCxtQkFBTyxDQUFDLGtKQUFxRDtBQUM3RCxhQUFhLG1CQUFPLENBQUMsc0NBQWdCO0FBQ3JDLHVCQUF1QixtQkFBTyxDQUFDLG9KQUFzRDtBQUNyRixpQkFBaUIsbUJBQU8sQ0FBQyxvSUFBOEM7QUFDdkUsbUJBQU8sQ0FBQyw4QkFBWTtBQUNwQixtQkFBTyxDQUFDLG9EQUF1QjtBQUMvQixtQkFBTyxDQUFDLHNGQUF3QztBQUNoRCxtQkFBTyxDQUFDLDhDQUFvQjtBQUM1QixtQkFBTyxDQUFDLDRDQUFtQjtBQUMzQixtQkFBTyxDQUFDLHNGQUF3QztBQUNoRCxtQkFBTyxDQUFDLHdCQUFTO0FBQ2pCLG1CQUFPLENBQUMsOENBQW9CO0FBQzVCLG1CQUFPLENBQUMsZ0ZBQXFDOztBQUU3QywrQkFBK0IsaUNBQWlDOztBQUVoRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRyxvQkFBb0I7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsV0FBVztBQUNsRjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseURBQXlELFNBQVMsR0FBRyxZQUFZLGlCQUFpQixZQUFZO0FBQzlHO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx1REFBdUQsWUFBWSxrQ0FBa0MsU0FBUyxHQUFHLFdBQVc7QUFDNUg7QUFDQSxTQUFTOztBQUVULHNDQUFzQzs7QUFFdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkLHlEQUF5RCxZQUFZLHFDQUFxQyxTQUFTLEdBQUcsV0FBVztBQUNqSTtBQUNBLFdBQVc7QUFDWDs7QUFFQSw0RkFBNEYsWUFBWTtBQUN4RztBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsSUFBSTtBQUNKLDZEQUE2RCxJQUFJO0FBQ2pFO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCLG1CQUFtQjtBQUNuQixlQUFlO0FBQ2Ysc0JBQXNCO0FBQ3RCLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvYWRtaW4tdWkvY29udGV4dC9kaXN0L2tleXN0b25lLW5leHQta2V5c3RvbmUtYWRtaW4tdWktY29udGV4dC5janMuZGV2LmpzP2E0ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGNvcmUkMSA9IHJlcXVpcmUoJ0BrZXlzdG9uZS11aS9jb3JlJyk7XG52YXIgdG9hc3QgPSByZXF1aXJlKCdAa2V5c3RvbmUtdWkvdG9hc3QnKTtcbnZhciBsb2FkaW5nID0gcmVxdWlyZSgnQGtleXN0b25lLXVpL2xvYWRpbmcnKTtcbnZhciBtb2RhbHMgPSByZXF1aXJlKCdAa2V5c3RvbmUtdWkvbW9kYWxzJyk7XG52YXIgYXBvbGxvVXBsb2FkQ2xpZW50ID0gcmVxdWlyZSgnYXBvbGxvLXVwbG9hZC1jbGllbnQnKTtcbnZhciBfb2JqZWN0U3ByZWFkID0gcmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyJyk7XG52YXIgaGFzaFN0cmluZyA9IHJlcXVpcmUoJ0BlbW90aW9uL2hhc2gnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vZGlzdC9jb3JlLTExYzlmZmVhLmNqcy5kZXYuanMnKTtcbnJlcXVpcmUoJy4uLy4uLy4uL2Rpc3Qvc3FsaXRlLWEyMzg1YTgxLmNqcy5kZXYuanMnKTtcbnJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uLy4uLy4uL2Rpc3QvZ3JhcGhxbC10cy1zY2hlbWEtMmEyMjAxMjAuY2pzLmRldi5qcycpO1xudmFyIGNsaWVudCA9IHJlcXVpcmUoJ0BhcG9sbG8vY2xpZW50Jyk7XG52YXIgYWRtaW5NZXRhR3JhcGhxbCA9IHJlcXVpcmUoJy4uLy4uLy4uL2Rpc3QvYWRtaW4tbWV0YS1ncmFwaHFsLTlmOWE5YzExLmNqcy5kZXYuanMnKTtcbnZhciBkYXRhR2V0dGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vZGlzdC9kYXRhR2V0dGVyLTlmYmUyZjhlLmNqcy5kZXYuanMnKTtcbnJlcXVpcmUoJ2RlY2ltYWwuanMnKTtcbnJlcXVpcmUoJ0BncmFwaHFsLXRvb2xzL3NjaGVtYScpO1xucmVxdWlyZSgnQGdyYXBocWwtdHMvc2NoZW1hL2FwaS13aXRob3V0LWNvbnRleHQnKTtcbnJlcXVpcmUoJ0BncmFwaHFsLXRzL3NjaGVtYScpO1xucmVxdWlyZSgnZ3JhcGhxbC10eXBlLWpzb24nKTtcbnJlcXVpcmUoJ2dyYXBocWwtdXBsb2FkL3B1YmxpYy9HcmFwaFFMVXBsb2FkLmpzJyk7XG5yZXF1aXJlKCdncmFwaHFsJyk7XG5yZXF1aXJlKCdAZ3JhcGhxbC10cy9leHRlbmQnKTtcbnJlcXVpcmUoJ0BncmFwaHFsLXRzL3NjaGVtYS9hcGktd2l0aC1jb250ZXh0Jyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG52YXIgUmVhY3RfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0KFJlYWN0KTtcbnZhciBoYXNoU3RyaW5nX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdChoYXNoU3RyaW5nKTtcblxuY29uc3QgZXhwZWN0ZWRFeHBvcnRzID0gbmV3IFNldChbJ0NlbGwnLCAnRmllbGQnLCAnY29udHJvbGxlcicsICdDYXJkVmFsdWUnXSk7XG5jb25zdCBhZG1pbk1ldGFMb2NhbFN0b3JhZ2VLZXkgPSAna2V5c3RvbmUuYWRtaW5NZXRhJztcbmxldCBfbXVzdFJlbmRlclNlcnZlclJlc3VsdCA9IHRydWU7XG5cbmZ1bmN0aW9uIHVzZU11c3RSZW5kZXJTZXJ2ZXJSZXN1bHQoKSB7XG4gIGxldCBbLCBmb3JjZVVwZGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBfbXVzdFJlbmRlclNlcnZlclJlc3VsdCA9IGZhbHNlO1xuICAgIGZvcmNlVXBkYXRlKDEpO1xuICB9LCBbXSk7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gX211c3RSZW5kZXJTZXJ2ZXJSZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHVzZUFkbWluTWV0YShhZG1pbk1ldGFIYXNoLCBmaWVsZFZpZXdzKSB7XG4gIGNvbnN0IGFkbWluTWV0YUZyb21Mb2NhbFN0b3JhZ2UgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYWRtaW5NZXRhTG9jYWxTdG9yYWdlS2V5KTtcblxuICAgIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBwYXJzZWQgPSBKU09OLnBhcnNlKGl0ZW0pO1xuXG4gICAgICBpZiAocGFyc2VkLmhhc2ggPT09IGFkbWluTWV0YUhhc2gpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZC5tZXRhO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSwgW2FkbWluTWV0YUhhc2hdKTsgLy8gaXQgc2VlbXMgbGlrZSBBcG9sbG8gZG9lc24ndCBza2lwIHRoZSBmaXJzdCBmZXRjaCB3aGVuIHVzaW5nIHNraXA6IHRydWUgc28gd2UncmUgdXNpbmcgdXNlTGF6eVF1ZXJ5IGluc3RlYWRcblxuICBjb25zdCBbZmV0Y2hTdGF0aWNBZG1pbk1ldGEsIHtcbiAgICBkYXRhLFxuICAgIGVycm9yLFxuICAgIGNhbGxlZFxuICB9XSA9IGNsaWVudC51c2VMYXp5UXVlcnkoYWRtaW5NZXRhR3JhcGhxbC5zdGF0aWNBZG1pbk1ldGFRdWVyeSwge1xuICAgIGZldGNoUG9saWN5OiAnbmV0d29yay1vbmx5J1xuICB9KTtcbiAgbGV0IHNob3VsZEZldGNoQWRtaW5NZXRhID0gYWRtaW5NZXRhRnJvbUxvY2FsU3RvcmFnZSA9PT0gdW5kZWZpbmVkICYmICFjYWxsZWQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHNob3VsZEZldGNoQWRtaW5NZXRhKSB7XG4gICAgICBmZXRjaFN0YXRpY0FkbWluTWV0YSgpO1xuICAgIH1cbiAgfSwgW3Nob3VsZEZldGNoQWRtaW5NZXRhLCBmZXRjaFN0YXRpY0FkbWluTWV0YV0pO1xuICBjb25zdCBydW50aW1lQWRtaW5NZXRhID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCghZGF0YSB8fCBlcnJvcikgJiYgIWFkbWluTWV0YUZyb21Mb2NhbFN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgYWRtaW5NZXRhID0gYWRtaW5NZXRhRnJvbUxvY2FsU3RvcmFnZSA/IGFkbWluTWV0YUZyb21Mb2NhbFN0b3JhZ2UgOiBkYXRhLmtleXN0b25lLmFkbWluTWV0YTtcbiAgICBjb25zdCBydW50aW1lQWRtaW5NZXRhID0ge1xuICAgICAgZW5hYmxlU2Vzc2lvbkl0ZW06IGFkbWluTWV0YS5lbmFibGVTZXNzaW9uSXRlbSxcbiAgICAgIGVuYWJsZVNpZ25vdXQ6IGFkbWluTWV0YS5lbmFibGVTaWdub3V0LFxuICAgICAgbGlzdHM6IHt9XG4gICAgfTtcbiAgICBhZG1pbk1ldGEubGlzdHMuZm9yRWFjaChsaXN0ID0+IHtcbiAgICAgIHJ1bnRpbWVBZG1pbk1ldGEubGlzdHNbbGlzdC5rZXldID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBsaXN0KSwge30sIHtcbiAgICAgICAgZ3FsTmFtZXM6IGNvcmUuZ2V0R3FsTmFtZXMoe1xuICAgICAgICAgIGxpc3RLZXk6IGxpc3Qua2V5LFxuICAgICAgICAgIHBsdXJhbEdyYXBoUUxOYW1lOiBsaXN0Lmxpc3RRdWVyeU5hbWVcbiAgICAgICAgfSksXG4gICAgICAgIGZpZWxkczoge31cbiAgICAgIH0pO1xuICAgICAgbGlzdC5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgIHZhciBfZmllbGQkaXRlbVZpZXckZmllbGQsIF9maWVsZCRpdGVtVmlldztcblxuICAgICAgICBleHBlY3RlZEV4cG9ydHMuZm9yRWFjaChleHBvcnROYW1lID0+IHtcbiAgICAgICAgICBpZiAoZmllbGRWaWV3c1tmaWVsZC52aWV3c0luZGV4XVtleHBvcnROYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSB2aWV3IGZvciB0aGUgZmllbGQgYXQgJHtsaXN0LmtleX0uJHtmaWVsZC5wYXRofSBpcyBtaXNzaW5nIHRoZSAke2V4cG9ydE5hbWV9IGV4cG9ydGApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5rZXlzKGZpZWxkVmlld3NbZmllbGQudmlld3NJbmRleF0pLmZvckVhY2goZXhwb3J0TmFtZSA9PiB7XG4gICAgICAgICAgaWYgKCFleHBlY3RlZEV4cG9ydHMuaGFzKGV4cG9ydE5hbWUpICYmIGV4cG9ydE5hbWUgIT09ICdhbGxvd2VkRXhwb3J0c09uQ3VzdG9tVmlld3MnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZXhwb3J0IG5hbWVkICR7ZXhwb3J0TmFtZX0gZnJvbSB0aGUgdmlldyBmcm9tIHRoZSBmaWVsZCBhdCAke2xpc3Qua2V5fS4ke2ZpZWxkLnBhdGh9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB2aWV3cyA9IF9vYmplY3RTcHJlYWQoe30sIGZpZWxkVmlld3NbZmllbGQudmlld3NJbmRleF0pO1xuXG4gICAgICAgIGNvbnN0IGN1c3RvbVZpZXdzID0ge307XG5cbiAgICAgICAgaWYgKGZpZWxkLmN1c3RvbVZpZXdzSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBjdXN0b21WaWV3c1NvdXJjZSA9IGZpZWxkVmlld3NbZmllbGQuY3VzdG9tVmlld3NJbmRleF07XG4gICAgICAgICAgY29uc3QgYWxsb3dlZEV4cG9ydHNPbkN1c3RvbVZpZXdzID0gbmV3IFNldCh2aWV3cy5hbGxvd2VkRXhwb3J0c09uQ3VzdG9tVmlld3MpO1xuICAgICAgICAgIE9iamVjdC5rZXlzKGN1c3RvbVZpZXdzU291cmNlKS5mb3JFYWNoKGV4cG9ydE5hbWUgPT4ge1xuICAgICAgICAgICAgaWYgKGFsbG93ZWRFeHBvcnRzT25DdXN0b21WaWV3cy5oYXMoZXhwb3J0TmFtZSkpIHtcbiAgICAgICAgICAgICAgY3VzdG9tVmlld3NbZXhwb3J0TmFtZV0gPSBjdXN0b21WaWV3c1NvdXJjZVtleHBvcnROYW1lXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRFeHBvcnRzLmhhcyhleHBvcnROYW1lKSkge1xuICAgICAgICAgICAgICB2aWV3c1tleHBvcnROYW1lXSA9IGN1c3RvbVZpZXdzU291cmNlW2V4cG9ydE5hbWVdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGV4cG9ydCBuYW1lZCAke2V4cG9ydE5hbWV9IGZyb20gdGhlIGN1c3RvbSB2aWV3IGZyb20gZmllbGQgYXQgJHtsaXN0LmtleX0uJHtmaWVsZC5wYXRofWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcnVudGltZUFkbWluTWV0YS5saXN0c1tsaXN0LmtleV0uZmllbGRzW2ZpZWxkLnBhdGhdID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmaWVsZCksIHt9LCB7XG4gICAgICAgICAgaXRlbVZpZXc6IHtcbiAgICAgICAgICAgIGZpZWxkTW9kZTogKF9maWVsZCRpdGVtVmlldyRmaWVsZCA9IChfZmllbGQkaXRlbVZpZXcgPSBmaWVsZC5pdGVtVmlldykgPT09IG51bGwgfHwgX2ZpZWxkJGl0ZW1WaWV3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZmllbGQkaXRlbVZpZXcuZmllbGRNb2RlKSAhPT0gbnVsbCAmJiBfZmllbGQkaXRlbVZpZXckZmllbGQgIT09IHZvaWQgMCA/IF9maWVsZCRpdGVtVmlldyRmaWVsZCA6IG51bGxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZpZXdzLFxuICAgICAgICAgIGNvbnRyb2xsZXI6IGZpZWxkVmlld3NbZmllbGQudmlld3NJbmRleF0uY29udHJvbGxlcih7XG4gICAgICAgICAgICBsaXN0S2V5OiBsaXN0LmtleSxcbiAgICAgICAgICAgIGZpZWxkTWV0YTogZmllbGQuZmllbGRNZXRhLFxuICAgICAgICAgICAgbGFiZWw6IGZpZWxkLmxhYmVsLFxuICAgICAgICAgICAgcGF0aDogZmllbGQucGF0aCxcbiAgICAgICAgICAgIGN1c3RvbVZpZXdzXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAhYWRtaW5NZXRhRnJvbUxvY2FsU3RvcmFnZSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYWRtaW5NZXRhTG9jYWxTdG9yYWdlS2V5LCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGhhc2g6IGhhc2hTdHJpbmdfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKEpTT04uc3RyaW5naWZ5KGFkbWluTWV0YSkpLFxuICAgICAgICBtZXRhOiBhZG1pbk1ldGFcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcnVudGltZUFkbWluTWV0YTtcbiAgfSwgW2RhdGEsIGVycm9yLCBhZG1pbk1ldGFGcm9tTG9jYWxTdG9yYWdlLCBmaWVsZFZpZXdzXSk7XG4gIGNvbnN0IG11c3RSZW5kZXJTZXJ2ZXJSZXN1bHQgPSB1c2VNdXN0UmVuZGVyU2VydmVyUmVzdWx0KCk7XG5cbiAgaWYgKG11c3RSZW5kZXJTZXJ2ZXJSZXN1bHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGU6ICdsb2FkaW5nJ1xuICAgIH07XG4gIH1cblxuICBpZiAocnVudGltZUFkbWluTWV0YSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0ZTogJ2xvYWRlZCcsXG4gICAgICB2YWx1ZTogcnVudGltZUFkbWluTWV0YVxuICAgIH07XG4gIH1cblxuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGU6ICdlcnJvcicsXG4gICAgICBlcnJvcixcbiAgICAgIHJlZmV0Y2g6ICgpID0+IHtcbiAgICAgICAgZmV0Y2hTdGF0aWNBZG1pbk1ldGEoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0ZTogJ2xvYWRpbmcnXG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZUxhenlNZXRhZGF0YShxdWVyeSkge1xuICBsZXQgcmVzdWx0ID0gY2xpZW50LnVzZVF1ZXJ5KHF1ZXJ5LCB7XG4gICAgZXJyb3JQb2xpY3k6ICdhbGwnLFxuICAgIGZldGNoUG9saWN5OiAnbmV0d29yay1vbmx5J1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHZhciBfcmVzdWx0JGVycm9yLCBfcmVzdWx0JGVycm9yJG5ldHdvcmssIF9yZXN1bHQkZXJyb3IyLCBfcmVzdWx0JGVycm9yJG5ldHdvcmsyLCBfcmVzdWx0JGVycm9yMywgX3Jlc3VsdCRlcnJvciRuZXR3b3JrMywgX3Jlc3VsdCRlcnJvcjQ7XG5cbiAgICBsZXQgcmVmZXRjaCA9ICgpID0+IHtcbiAgICAgIHJlc3VsdC5yZWZldGNoKCk7XG4gICAgfTtcblxuICAgIGxldCBkYXRhR2V0dGVyJDEgPSBkYXRhR2V0dGVyLm1ha2VEYXRhR2V0dGVyKHJlc3VsdC5kYXRhLCAoX3Jlc3VsdCRlcnJvciA9IHJlc3VsdC5lcnJvcikgPT09IG51bGwgfHwgX3Jlc3VsdCRlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Jlc3VsdCRlcnJvci5ncmFwaFFMRXJyb3JzKTtcbiAgICBjb25zdCBhdXRoZW50aWNhdGVkSXRlbUdldHRlciA9IGRhdGFHZXR0ZXIkMS5nZXQoJ2F1dGhlbnRpY2F0ZWRJdGVtJyk7XG4gICAgY29uc3Qga2V5c3RvbmVNZXRhR2V0dGVyID0gZGF0YUdldHRlciQxLmdldCgna2V5c3RvbmUnKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVmZXRjaCxcbiAgICAgIGF1dGhlbnRpY2F0ZWRJdGVtOiBnZXRBdXRoZW50aWNhdGVkSXRlbShyZXN1bHQsIGF1dGhlbnRpY2F0ZWRJdGVtR2V0dGVyLmVycm9ycyB8fCAoKF9yZXN1bHQkZXJyb3IkbmV0d29yayA9IChfcmVzdWx0JGVycm9yMiA9IHJlc3VsdC5lcnJvcikgPT09IG51bGwgfHwgX3Jlc3VsdCRlcnJvcjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yZXN1bHQkZXJyb3IyLm5ldHdvcmtFcnJvcikgIT09IG51bGwgJiYgX3Jlc3VsdCRlcnJvciRuZXR3b3JrICE9PSB2b2lkIDAgPyBfcmVzdWx0JGVycm9yJG5ldHdvcmsgOiB1bmRlZmluZWQpKSxcbiAgICAgIHZpc2libGVMaXN0czogZ2V0VmlzaWJsZUxpc3RzKHJlc3VsdCwga2V5c3RvbmVNZXRhR2V0dGVyLmVycm9ycyB8fCAoKF9yZXN1bHQkZXJyb3IkbmV0d29yazIgPSAoX3Jlc3VsdCRlcnJvcjMgPSByZXN1bHQuZXJyb3IpID09PSBudWxsIHx8IF9yZXN1bHQkZXJyb3IzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcmVzdWx0JGVycm9yMy5uZXR3b3JrRXJyb3IpICE9PSBudWxsICYmIF9yZXN1bHQkZXJyb3IkbmV0d29yazIgIT09IHZvaWQgMCA/IF9yZXN1bHQkZXJyb3IkbmV0d29yazIgOiB1bmRlZmluZWQpKSxcbiAgICAgIGNyZWF0ZVZpZXdGaWVsZE1vZGVzOiBnZXRDcmVhdGVWaWV3RmllbGRNb2RlcyhyZXN1bHQsIGtleXN0b25lTWV0YUdldHRlci5lcnJvcnMgfHwgKChfcmVzdWx0JGVycm9yJG5ldHdvcmszID0gKF9yZXN1bHQkZXJyb3I0ID0gcmVzdWx0LmVycm9yKSA9PT0gbnVsbCB8fCBfcmVzdWx0JGVycm9yNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Jlc3VsdCRlcnJvcjQubmV0d29ya0Vycm9yKSAhPT0gbnVsbCAmJiBfcmVzdWx0JGVycm9yJG5ldHdvcmszICE9PSB2b2lkIDAgPyBfcmVzdWx0JGVycm9yJG5ldHdvcmszIDogdW5kZWZpbmVkKSlcbiAgICB9O1xuICB9LCBbcmVzdWx0XSk7XG59XG5cbmZ1bmN0aW9uIGdldENyZWF0ZVZpZXdGaWVsZE1vZGVzKF9yZWYsIGVycm9yKSB7XG4gIGxldCB7XG4gICAgZGF0YVxuICB9ID0gX3JlZjtcblxuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGU6ICdlcnJvcicsXG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cblxuICBpZiAoZGF0YSkge1xuICAgIGNvbnN0IGxpc3RzID0ge307XG4gICAgZGF0YS5rZXlzdG9uZS5hZG1pbk1ldGEubGlzdHMuZm9yRWFjaChsaXN0ID0+IHtcbiAgICAgIGxpc3RzW2xpc3Qua2V5XSA9IHt9O1xuICAgICAgbGlzdC5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgIGxpc3RzW2xpc3Qua2V5XVtmaWVsZC5wYXRoXSA9IGZpZWxkLmNyZWF0ZVZpZXcuZmllbGRNb2RlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiAnbG9hZGVkJyxcbiAgICAgIGxpc3RzXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhdGU6ICdsb2FkaW5nJ1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRWaXNpYmxlTGlzdHMoX3JlZjIsIGVycm9yKSB7XG4gIGxldCB7XG4gICAgZGF0YVxuICB9ID0gX3JlZjI7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiAnZXJyb3InLFxuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgaWYgKGRhdGEpIHtcbiAgICBjb25zdCBsaXN0cyA9IG5ldyBTZXQoKTtcbiAgICBkYXRhLmtleXN0b25lLmFkbWluTWV0YS5saXN0cy5mb3JFYWNoKGxpc3QgPT4ge1xuICAgICAgaWYgKCFsaXN0LmlzSGlkZGVuKSB7XG4gICAgICAgIGxpc3RzLmFkZChsaXN0LmtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiAnbG9hZGVkJyxcbiAgICAgIGxpc3RzXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhdGU6ICdsb2FkaW5nJ1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRBdXRoZW50aWNhdGVkSXRlbShfcmVmMywgZXJyb3IpIHtcbiAgbGV0IHtcbiAgICBkYXRhXG4gIH0gPSBfcmVmMztcblxuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGU6ICdlcnJvcicsXG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cblxuICBpZiAoZGF0YSkge1xuICAgIGlmICghZGF0YS5hdXRoZW50aWNhdGVkSXRlbSB8fCAvLyB0aGlzIGlzIGZvciB0aGUgY2FzZSB3aGVyZSB0aGVyZSBpcyBhIG5ldyB0eXBlXG4gICAgLy8gaW4gdGhlIEF1dGhlbnRpY2F0ZWRJdGVtIHVuaW9uIGFuZCB0aGUgcXVlcnlcbiAgICAvLyB0aGF0IHRoZSBhZG1pbiB1aSBoYXMgZG9lc24ndCBnZXQgdGhlIGlkXG4gICAgLy8gKHllcywgdW5kZWZpbmVkIGlzIHZlcnkgc3BlY2lmaWMgYW5kIHZlcnkgaW50ZW50aW9uYWwsIGl0IHNob3VsZCBub3QgYmUgY2hlY2tpbmcgZm9yIG51bGwpXG4gICAgZGF0YS5hdXRoZW50aWNhdGVkSXRlbS5pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0ZTogJ3VuYXV0aGVudGljYXRlZCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgbGFiZWxGaWVsZCA9IE9iamVjdC5rZXlzKGRhdGEuYXV0aGVudGljYXRlZEl0ZW0pLmZpbHRlcih4ID0+IHggIT09ICdfX3R5cGVuYW1lJyAmJiB4ICE9PSAnaWQnKVswXTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGU6ICdhdXRoZW50aWNhdGVkJyxcbiAgICAgIGlkOiBkYXRhLmF1dGhlbnRpY2F0ZWRJdGVtLmlkLFxuICAgICAgbGFiZWw6IGRhdGEuYXV0aGVudGljYXRlZEl0ZW1bbGFiZWxGaWVsZF0gfHwgZGF0YS5hdXRoZW50aWNhdGVkSXRlbS5pZCxcbiAgICAgIGxpc3RLZXk6IGRhdGEuYXV0aGVudGljYXRlZEl0ZW0uX190eXBlbmFtZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXRlOiAnbG9hZGluZydcbiAgfTtcbn1cblxuY29uc3QgS2V5c3RvbmVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcblxuZnVuY3Rpb24gSW50ZXJuYWxLZXlzdG9uZVByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBhZG1pbkNvbmZpZyxcbiAgICBmaWVsZFZpZXdzLFxuICAgIGFkbWluTWV0YUhhc2gsXG4gICAgY2hpbGRyZW4sXG4gICAgbGF6eU1ldGFkYXRhUXVlcnksXG4gICAgYXBpUGF0aFxuICB9ID0gX3JlZjtcbiAgY29uc3QgYWRtaW5NZXRhID0gdXNlQWRtaW5NZXRhKGFkbWluTWV0YUhhc2gsIGZpZWxkVmlld3MpO1xuICBjb25zdCB7XG4gICAgYXV0aGVudGljYXRlZEl0ZW0sXG4gICAgdmlzaWJsZUxpc3RzLFxuICAgIGNyZWF0ZVZpZXdGaWVsZE1vZGVzLFxuICAgIHJlZmV0Y2hcbiAgfSA9IHVzZUxhenlNZXRhZGF0YShsYXp5TWV0YWRhdGFRdWVyeSk7XG5cbiAgY29uc3QgcmVpbml0Q29udGV4dCA9ICgpID0+IHtcbiAgICB2YXIgX2FkbWluTWV0YSRyZWZldGNoO1xuXG4gICAgYWRtaW5NZXRhID09PSBudWxsIHx8IGFkbWluTWV0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9hZG1pbk1ldGEkcmVmZXRjaCA9IGFkbWluTWV0YS5yZWZldGNoKSA9PT0gbnVsbCB8fCBfYWRtaW5NZXRhJHJlZmV0Y2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hZG1pbk1ldGEkcmVmZXRjaC5jYWxsKGFkbWluTWV0YSk7XG4gICAgcmVmZXRjaCgpO1xuICB9O1xuXG4gIGlmIChhZG1pbk1ldGEuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoY29yZSQxLkNlbnRlciwge1xuICAgICAgZmlsbFZpZXc6IHRydWVcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQobG9hZGluZy5Mb2FkaW5nRG90cywge1xuICAgICAgbGFiZWw6IFwiTG9hZGluZyBBZG1pbiBNZXRhZGF0YVwiLFxuICAgICAgc2l6ZTogXCJsYXJnZVwiXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudCh0b2FzdC5Ub2FzdFByb3ZpZGVyLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQobW9kYWxzLkRyYXdlclByb3ZpZGVyLCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoS2V5c3RvbmVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIGFkbWluQ29uZmlnLFxuICAgICAgYWRtaW5NZXRhLFxuICAgICAgZmllbGRWaWV3cyxcbiAgICAgIGF1dGhlbnRpY2F0ZWRJdGVtLFxuICAgICAgcmVpbml0Q29udGV4dCxcbiAgICAgIHZpc2libGVMaXN0cyxcbiAgICAgIGNyZWF0ZVZpZXdGaWVsZE1vZGVzLFxuICAgICAgYXBpUGF0aFxuICAgIH1cbiAgfSwgY2hpbGRyZW4pKSk7XG59XG5cbmNvbnN0IEtleXN0b25lUHJvdmlkZXIgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IGFwb2xsb0NsaWVudCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gbmV3IGNsaWVudC5BcG9sbG9DbGllbnQoe1xuICAgIGNhY2hlOiBuZXcgY2xpZW50LkluTWVtb3J5Q2FjaGUoKSxcbiAgICBsaW5rOiBhcG9sbG9VcGxvYWRDbGllbnQuY3JlYXRlVXBsb2FkTGluayh7XG4gICAgICB1cmk6IHByb3BzLmFwaVBhdGhcbiAgICB9KVxuICB9KSwgW3Byb3BzLmFwaVBhdGhdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdF9fZGVmYXVsdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChjbGllbnQuQXBvbGxvUHJvdmlkZXIsIHtcbiAgICBjbGllbnQ6IGFwb2xsb0NsaWVudFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoSW50ZXJuYWxLZXlzdG9uZVByb3ZpZGVyLCBwcm9wcykpO1xufTtcbmNvbnN0IHVzZUtleXN0b25lID0gKCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoS2V5c3RvbmVDb250ZXh0KTtcblxuICBpZiAoIXZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VLZXlzdG9uZSBtdXN0IGJlIGNhbGxlZCBpbnNpZGUgYSBLZXlzdG9uZVByb3ZpZGVyIGNvbXBvbmVudCcpO1xuICB9XG5cbiAgaWYgKHZhbHVlLmFkbWluTWV0YS5zdGF0ZSA9PT0gJ2Vycm9yJykge1xuICAgIC8vIElmIHdlIGdldCBhbiBcIkFjY2VzcyBkZW5pZWRcIiBlcnJvciwgaXQgcHJvYmFibHkgbWVhbnMgdGhlIHVzZXIgZG9lc24ndCBoYXZlIGFjY2VzcyB0byB0aGVcbiAgICAvLyBhZG1pbk1ldGEgYnV0IGhhcyBuYXZpZ2F0ZWQgKHByb2JhYmx5IGNsaWVudC1zaWRlKSB0byBhIHBhZ2UgdGhhdCByZXF1aXJlcyBpdC4gV2UgcmVsb2FkXG4gICAgLy8gdGhlIHBhZ2Ugc28gdGhlIHNlcnZlci1zaWRlIGFjY2VzcyBjb250cm9sIGNhbiBydW4gd2hpY2ggc2hvdWxkIGJvdW5jZSB0aGVtIHRvIHRoZSByaWdodFxuICAgIC8vIHBsYWNlIChvciBkaXNwbGF5IHRoZSBuby1hY2Nlc3MgcGFnZSlcbiAgICBpZiAodmFsdWUuYWRtaW5NZXRhLmVycm9yLm1lc3NhZ2UgPT09ICdBY2Nlc3MgZGVuaWVkJykge1xuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiBsb2FkaW5nIEFkbWluIE1ldGFkYXRhJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFkbWluQ29uZmlnOiB2YWx1ZS5hZG1pbkNvbmZpZyxcbiAgICBhZG1pbk1ldGE6IHZhbHVlLmFkbWluTWV0YS52YWx1ZSxcbiAgICBhdXRoZW50aWNhdGVkSXRlbTogdmFsdWUuYXV0aGVudGljYXRlZEl0ZW0sXG4gICAgdmlzaWJsZUxpc3RzOiB2YWx1ZS52aXNpYmxlTGlzdHMsXG4gICAgY3JlYXRlVmlld0ZpZWxkTW9kZXM6IHZhbHVlLmNyZWF0ZVZpZXdGaWVsZE1vZGVzLFxuICAgIGFwaVBhdGg6IHZhbHVlLmFwaVBhdGhcbiAgfTtcbn07XG5jb25zdCB1c2VSZWluaXRDb250ZXh0ID0gKCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoS2V5c3RvbmVDb250ZXh0KTtcblxuICBpZiAoIXZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VSZWluaXRDb250ZXh0IG11c3QgYmUgY2FsbGVkIGluc2lkZSBhIEtleXN0b25lUHJvdmlkZXIgY29tcG9uZW50Jyk7XG4gIH1cblxuICByZXR1cm4gdmFsdWUucmVpbml0Q29udGV4dDtcbn07XG5jb25zdCB1c2VSYXdLZXlzdG9uZSA9ICgpID0+IHtcbiAgY29uc3QgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEtleXN0b25lQ29udGV4dCk7XG5cbiAgaWYgKCF2YWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlUmF3S2V5c3RvbmUgbXVzdCBiZSBjYWxsZWQgaW5zaWRlIGEgS2V5c3RvbmVQcm92aWRlciBjb21wb25lbnQnKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5jb25zdCB1c2VMaXN0ID0ga2V5ID0+IHtcbiAgY29uc3Qge1xuICAgIGFkbWluTWV0YToge1xuICAgICAgbGlzdHNcbiAgICB9XG4gIH0gPSB1c2VLZXlzdG9uZSgpO1xuXG4gIGlmIChsaXN0c1trZXldKSB7XG4gICAgcmV0dXJuIGxpc3RzW2tleV07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxpc3Qga2V5IHByb3ZpZGVkIHRvIHVzZUxpc3Q6ICR7a2V5fWApO1xuICB9XG59O1xuXG5leHBvcnRzLktleXN0b25lUHJvdmlkZXIgPSBLZXlzdG9uZVByb3ZpZGVyO1xuZXhwb3J0cy51c2VLZXlzdG9uZSA9IHVzZUtleXN0b25lO1xuZXhwb3J0cy51c2VMaXN0ID0gdXNlTGlzdDtcbmV4cG9ydHMudXNlUmF3S2V5c3RvbmUgPSB1c2VSYXdLZXlzdG9uZTtcbmV4cG9ydHMudXNlUmVpbml0Q29udGV4dCA9IHVzZVJlaW5pdENvbnRleHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/admin-ui/context/dist/keystone-next-keystone-admin-ui-context.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar _objectWithoutProperties = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\nvar router = __webpack_require__(/*! next/router */ \"next/router\");\nvar Link$1 = __webpack_require__(/*! next/link */ \"../../node_modules/next/link.js\");\nvar React = __webpack_require__(/*! react */ \"react\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar Link__default = /*#__PURE__*/_interopDefault(Link$1);\nvar React__default = /*#__PURE__*/_interopDefault(React);\n\nconst _excluded = [\"href\", \"as\", \"replace\", \"scroll\", \"shallow\", \"prefetch\"];\nconst Link = _ref => {\n  let {\n    href,\n    as,\n    replace,\n    scroll,\n    shallow,\n    prefetch\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React__default[\"default\"].createElement(Link__default[\"default\"], {\n    href: href,\n    as: as,\n    replace: replace,\n    scroll: scroll,\n    shallow: shallow,\n    prefetch: prefetch\n  }, /*#__PURE__*/React__default[\"default\"].createElement(\"a\", props));\n};\n\nObject.defineProperty(exports, \"Router\", ({\n  enumerable: true,\n  get: function () { return router.Router; }\n}));\nObject.defineProperty(exports, \"createRouter\", ({\n  enumerable: true,\n  get: function () { return router.createRouter; }\n}));\nObject.defineProperty(exports, \"makePublicRouterInstance\", ({\n  enumerable: true,\n  get: function () { return router.makePublicRouterInstance; }\n}));\nObject.defineProperty(exports, \"useRouter\", ({\n  enumerable: true,\n  get: function () { return router.useRouter; }\n}));\nObject.defineProperty(exports, \"withRouter\", ({\n  enumerable: true,\n  get: function () { return router.withRouter; }\n}));\nexports.Link = Link;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2FkbWluLXVpL3JvdXRlci9kaXN0L2tleXN0b25lLW5leHQta2V5c3RvbmUtYWRtaW4tdWktcm91dGVyLmNqcy5kZXYuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDLEVBQUUsYUFBYSxFQUFDOztBQUU3RCwrQkFBK0IsbUJBQU8sQ0FBQyw0SEFBZ0Q7QUFDdkYsYUFBYSxtQkFBTyxDQUFDLGdDQUFhO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQyxrREFBVztBQUNoQyxZQUFZLG1CQUFPLENBQUMsb0JBQU87O0FBRTNCLCtCQUErQixpQ0FBaUM7O0FBRWhFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDBDQUF5QztBQUN6QztBQUNBLHFCQUFxQjtBQUNyQixDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQSxxQkFBcUI7QUFDckIsQ0FBQyxFQUFDO0FBQ0YsNERBQTJEO0FBQzNEO0FBQ0EscUJBQXFCO0FBQ3JCLENBQUMsRUFBQztBQUNGLDZDQUE0QztBQUM1QztBQUNBLHFCQUFxQjtBQUNyQixDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQSxxQkFBcUI7QUFDckIsQ0FBQyxFQUFDO0FBQ0YsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvYWRtaW4tdWkvcm91dGVyL2Rpc3Qva2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1hZG1pbi11aS1yb3V0ZXIuY2pzLmRldi5qcz8wMTg0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyA9IHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcbnZhciByb3V0ZXIgPSByZXF1aXJlKCduZXh0L3JvdXRlcicpO1xudmFyIExpbmskMSA9IHJlcXVpcmUoJ25leHQvbGluaycpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7ICdkZWZhdWx0JzogZSB9OyB9XG5cbnZhciBMaW5rX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdChMaW5rJDEpO1xudmFyIFJlYWN0X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdChSZWFjdCk7XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcImhyZWZcIiwgXCJhc1wiLCBcInJlcGxhY2VcIiwgXCJzY3JvbGxcIiwgXCJzaGFsbG93XCIsIFwicHJlZmV0Y2hcIl07XG5jb25zdCBMaW5rID0gX3JlZiA9PiB7XG4gIGxldCB7XG4gICAgaHJlZixcbiAgICBhcyxcbiAgICByZXBsYWNlLFxuICAgIHNjcm9sbCxcbiAgICBzaGFsbG93LFxuICAgIHByZWZldGNoXG4gIH0gPSBfcmVmLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KExpbmtfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLCB7XG4gICAgaHJlZjogaHJlZixcbiAgICBhczogYXMsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBzY3JvbGw6IHNjcm9sbCxcbiAgICBzaGFsbG93OiBzaGFsbG93LFxuICAgIHByZWZldGNoOiBwcmVmZXRjaFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKSk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1JvdXRlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByb3V0ZXIuUm91dGVyOyB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY3JlYXRlUm91dGVyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJvdXRlci5jcmVhdGVSb3V0ZXI7IH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdtYWtlUHVibGljUm91dGVySW5zdGFuY2UnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcm91dGVyLm1ha2VQdWJsaWNSb3V0ZXJJbnN0YW5jZTsgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3VzZVJvdXRlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByb3V0ZXIudXNlUm91dGVyOyB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnd2l0aFJvdXRlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByb3V0ZXIud2l0aFJvdXRlcjsgfVxufSk7XG5leHBvcnRzLkxpbmsgPSBMaW5rO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\nvar _objectWithoutProperties = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\n\nconst _excluded = [\"children\"];\n/**\n * This is the component you should use when you want the standard padding around a cell value\n */\n\nconst CellContainer = _ref => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const {\n    spacing\n  } = core.useTheme();\n  return core.jsx(\"div\", _extends({\n    css: {\n      padding: spacing.small\n    }\n  }, props), children);\n};\n\nexports.CellContainer = CellContainer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvQ2VsbENvbnRhaW5lci00NTMyNTRiNS5janMuZGV2LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyw0RkFBZ0M7QUFDdkQsK0JBQStCLG1CQUFPLENBQUMsNEhBQWdEO0FBQ3ZGLFdBQVcsbUJBQU8sQ0FBQyw0Q0FBbUI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZGlzdC9DZWxsQ29udGFpbmVyLTQ1MzI1NGI1LmNqcy5kZXYuanM/OTE5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyA9IHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnQGtleXN0b25lLXVpL2NvcmUnKTtcblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIl07XG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbXBvbmVudCB5b3Ugc2hvdWxkIHVzZSB3aGVuIHlvdSB3YW50IHRoZSBzdGFuZGFyZCBwYWRkaW5nIGFyb3VuZCBhIGNlbGwgdmFsdWVcbiAqL1xuXG5jb25zdCBDZWxsQ29udGFpbmVyID0gX3JlZiA9PiB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWYsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHtcbiAgICBzcGFjaW5nXG4gIH0gPSBjb3JlLnVzZVRoZW1lKCk7XG4gIHJldHVybiBjb3JlLmpzeChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY3NzOiB7XG4gICAgICBwYWRkaW5nOiBzcGFjaW5nLnNtYWxsXG4gICAgfVxuICB9LCBwcm9wcyksIGNoaWxkcmVuKTtcbn07XG5cbmV4cG9ydHMuQ2VsbENvbnRhaW5lciA9IENlbGxDb250YWluZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/CellLink-dc41c877.cjs.dev.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/CellLink-dc41c877.cjs.dev.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar adminUi_router_dist_keystoneNextKeystoneAdminUiRouter = __webpack_require__(/*! ../admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js\");\n\n/**\n * This is the component you should use when linking a Cell to an item (i.e when the Cell supports\n * the linkTo prop)\n */\n\nconst CellLink = props => {\n  const {\n    colors,\n    spacing\n  } = core.useTheme();\n  return core.jsx(adminUi_router_dist_keystoneNextKeystoneAdminUiRouter.Link, _extends({\n    css: {\n      color: colors.foreground,\n      display: 'block',\n      padding: spacing.small,\n      textDecoration: 'none',\n      ':hover': {\n        textDecoration: 'underline'\n      }\n    }\n  }, props));\n};\n\nexports.CellLink = CellLink;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvQ2VsbExpbmstZGM0MWM4NzcuY2pzLmRldi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsNEZBQWdDO0FBQ3ZELFdBQVcsbUJBQU8sQ0FBQyw0Q0FBbUI7QUFDdEMsNERBQTRELG1CQUFPLENBQUMsb01BQTJFOztBQUUvSTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvQ2VsbExpbmstZGM0MWM4NzcuY2pzLmRldi5qcz8zZDgwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gcmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJ0BrZXlzdG9uZS11aS9jb3JlJyk7XG52YXIgYWRtaW5VaV9yb3V0ZXJfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUFkbWluVWlSb3V0ZXIgPSByZXF1aXJlKCcuLi9hZG1pbi11aS9yb3V0ZXIvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWFkbWluLXVpLXJvdXRlci5janMuZGV2LmpzJyk7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgY29tcG9uZW50IHlvdSBzaG91bGQgdXNlIHdoZW4gbGlua2luZyBhIENlbGwgdG8gYW4gaXRlbSAoaS5lIHdoZW4gdGhlIENlbGwgc3VwcG9ydHNcbiAqIHRoZSBsaW5rVG8gcHJvcClcbiAqL1xuXG5jb25zdCBDZWxsTGluayA9IHByb3BzID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9ycyxcbiAgICBzcGFjaW5nXG4gIH0gPSBjb3JlLnVzZVRoZW1lKCk7XG4gIHJldHVybiBjb3JlLmpzeChhZG1pblVpX3JvdXRlcl9kaXN0X2tleXN0b25lTmV4dEtleXN0b25lQWRtaW5VaVJvdXRlci5MaW5rLCBfZXh0ZW5kcyh7XG4gICAgY3NzOiB7XG4gICAgICBjb2xvcjogY29sb3JzLmZvcmVncm91bmQsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcGFkZGluZzogc3BhY2luZy5zbWFsbCxcbiAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZSdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHByb3BzKSk7XG59O1xuXG5leHBvcnRzLkNlbGxMaW5rID0gQ2VsbExpbms7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/CellLink-dc41c877.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/CreateItemDrawer-abdd4766.cjs.dev.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/CreateItemDrawer-abdd4766.cjs.dev.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar React = __webpack_require__(/*! react */ \"react\");\nvar isDeepEqual = __webpack_require__(/*! fast-deep-equal */ \"fast-deep-equal\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar modals = __webpack_require__(/*! @keystone-ui/modals */ \"@keystone-ui/modals\");\nvar toast = __webpack_require__(/*! @keystone-ui/toast */ \"@keystone-ui/toast\");\nvar loading = __webpack_require__(/*! @keystone-ui/loading */ \"@keystone-ui/loading\");\nvar client = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\nvar adminUi_context_dist_keystoneNextKeystoneAdminUiContext = __webpack_require__(/*! ../admin-ui/context/dist/keystone-next-keystone-admin-ui-context.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/admin-ui/context/dist/keystone-next-keystone-admin-ui-context.cjs.dev.js\");\nvar Fields = __webpack_require__(/*! ./Fields-6e862a67.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/Fields-6e862a67.cjs.dev.js\");\nvar GraphQLErrorNotice = __webpack_require__(/*! ./GraphQLErrorNotice-6a857a3a.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/GraphQLErrorNotice-6a857a3a.cjs.dev.js\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar isDeepEqual__default = /*#__PURE__*/_interopDefault(isDeepEqual);\n\n/** @jsxRuntime classic */\nfunction CreateItemDrawer(_ref) {\n  let {\n    listKey,\n    onClose,\n    onCreate\n  } = _ref;\n  const {\n    createViewFieldModes\n  } = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useKeystone();\n  const list = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useList(listKey);\n  const toasts = toast.useToasts();\n  const [createItem, {\n    loading: loading$1,\n    error\n  }] = client.useMutation(client.gql`mutation($data: ${list.gqlNames.createInputName}!) {\n      item: ${list.gqlNames.createMutationName}(data: $data) {\n        id\n        label: ${list.labelField}\n    }\n  }`);\n  const [value, setValue] = React.useState(() => {\n    const value = {};\n    Object.keys(list.fields).forEach(fieldPath => {\n      value[fieldPath] = {\n        kind: 'value',\n        value: list.fields[fieldPath].controller.defaultValue\n      };\n    });\n    return value;\n  });\n  const invalidFields = React.useMemo(() => {\n    const invalidFields = new Set();\n    Object.keys(value).forEach(fieldPath => {\n      const val = value[fieldPath].value;\n      const validateFn = list.fields[fieldPath].controller.validate;\n\n      if (validateFn) {\n        const result = validateFn(val);\n\n        if (result === false) {\n          invalidFields.add(fieldPath);\n        }\n      }\n    });\n    return invalidFields;\n  }, [list, value]);\n  const [forceValidation, setForceValidation] = React.useState(false);\n  return core.jsx(modals.Drawer, {\n    title: `Create ${list.singular}`,\n    width: \"wide\",\n    actions: {\n      confirm: {\n        label: `Create ${list.singular}`,\n        loading: loading$1,\n        action: () => {\n          const newForceValidation = invalidFields.size !== 0;\n          setForceValidation(newForceValidation);\n          if (newForceValidation) return;\n          const data = {};\n          Object.keys(list.fields).forEach(fieldPath => {\n            const {\n              controller\n            } = list.fields[fieldPath];\n            const serialized = controller.serialize(value[fieldPath].value);\n\n            if (!isDeepEqual__default[\"default\"](serialized, controller.serialize(controller.defaultValue))) {\n              Object.assign(data, serialized);\n            }\n          });\n          createItem({\n            variables: {\n              data\n            }\n          }).then(_ref2 => {\n            let {\n              data\n            } = _ref2;\n            const label = data.item.label || data.item.id;\n            onCreate({\n              id: data.item.id,\n              label\n            });\n            toasts.addToast({\n              title: label,\n              message: 'Created Successfully',\n              tone: 'positive'\n            });\n          }).catch(() => {});\n        }\n      },\n      cancel: {\n        label: 'Cancel',\n        action: onClose\n      }\n    }\n  }, createViewFieldModes.state === 'error' && core.jsx(GraphQLErrorNotice.GraphQLErrorNotice, {\n    networkError: createViewFieldModes.error instanceof Error ? createViewFieldModes.error : undefined,\n    errors: createViewFieldModes.error instanceof Error ? undefined : createViewFieldModes.error\n  }), createViewFieldModes.state === 'loading' && core.jsx(loading.LoadingDots, {\n    label: \"Loading create form\"\n  }), error && core.jsx(GraphQLErrorNotice.GraphQLErrorNotice, {\n    networkError: error === null || error === void 0 ? void 0 : error.networkError,\n    errors: error === null || error === void 0 ? void 0 : error.graphQLErrors\n  }), core.jsx(core.Box, {\n    paddingY: \"xlarge\"\n  }, core.jsx(Fields.Fields, {\n    fields: list.fields,\n    fieldModes: createViewFieldModes.state === 'loaded' ? createViewFieldModes.lists[list.key] : null,\n    forceValidation: forceValidation,\n    invalidFields: invalidFields,\n    value: value,\n    onChange: React.useCallback(getNewValue => {\n      setValue(oldValues => getNewValue(oldValues));\n    }, [])\n  })));\n}\n\nexports.CreateItemDrawer = CreateItemDrawer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/CreateItemDrawer-abdd4766.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/Fields-6e862a67.cjs.dev.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/Fields-6e862a67.cjs.dev.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar React = __webpack_require__(/*! react */ \"react\");\n\nconst RenderField = /*#__PURE__*/React.memo(function RenderField(_ref) {\n  let {\n    field,\n    value,\n    autoFocus,\n    forceValidation,\n    onChange\n  } = _ref;\n  return core.jsx(field.views.Field, {\n    field: field.controller,\n    onChange: React.useMemo(() => {\n      if (onChange === undefined) return undefined;\n      return value => {\n        onChange(val => _objectSpread(_objectSpread({}, val), {}, {\n          [field.controller.path]: {\n            kind: 'value',\n            value\n          }\n        }));\n      };\n    }, [onChange, field.controller.path]),\n    value: value,\n    autoFocus: autoFocus,\n    forceValidation: forceValidation\n  });\n});\nfunction Fields(_ref2) {\n  let {\n    fields,\n    value,\n    fieldModes,\n    forceValidation,\n    invalidFields,\n    onChange\n  } = _ref2;\n  const renderedFields = Object.keys(fields).filter(fieldPath => fieldModes === null || fieldModes[fieldPath] !== 'hidden').map((fieldPath, index) => {\n    const field = fields[fieldPath];\n    const val = value[fieldPath];\n    const fieldMode = fieldModes === null ? 'edit' : fieldModes[fieldPath];\n\n    if (val.kind === 'error') {\n      return core.jsx(\"div\", null, field.label, \": \", core.jsx(\"span\", {\n        css: {\n          color: 'red'\n        }\n      }, val.errors[0].message));\n    }\n\n    return core.jsx(RenderField, {\n      key: fieldPath,\n      field: field,\n      value: val.value,\n      forceValidation: forceValidation && invalidFields.has(fieldPath),\n      onChange: fieldMode === 'edit' ? onChange : undefined,\n      autoFocus: index === 0\n    });\n  });\n  return core.jsx(core.Stack, {\n    gap: \"xlarge\"\n  }, renderedFields, renderedFields.length === 0 && 'There are no fields that you can read or edit');\n}\n\nexports.Fields = Fields;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvRmllbGRzLTZlODYyYTY3LmNqcy5kZXYuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsb0JBQW9CLG1CQUFPLENBQUMsd0dBQXNDO0FBQ2xFLFdBQVcsbUJBQU8sQ0FBQyw0Q0FBbUI7QUFDdEMsWUFBWSxtQkFBTyxDQUFDLG9CQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFVBQVU7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZGlzdC9GaWVsZHMtNmU4NjJhNjcuY2pzLmRldi5qcz9kN2M1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9vYmplY3RTcHJlYWQgPSByZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDInKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnQGtleXN0b25lLXVpL2NvcmUnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmNvbnN0IFJlbmRlckZpZWxkID0gLyojX19QVVJFX18qL1JlYWN0Lm1lbW8oZnVuY3Rpb24gUmVuZGVyRmllbGQoX3JlZikge1xuICBsZXQge1xuICAgIGZpZWxkLFxuICAgIHZhbHVlLFxuICAgIGF1dG9Gb2N1cyxcbiAgICBmb3JjZVZhbGlkYXRpb24sXG4gICAgb25DaGFuZ2VcbiAgfSA9IF9yZWY7XG4gIHJldHVybiBjb3JlLmpzeChmaWVsZC52aWV3cy5GaWVsZCwge1xuICAgIGZpZWxkOiBmaWVsZC5jb250cm9sbGVyLFxuICAgIG9uQ2hhbmdlOiBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICAgIGlmIChvbkNoYW5nZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHZhbHVlID0+IHtcbiAgICAgICAgb25DaGFuZ2UodmFsID0+IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdmFsKSwge30sIHtcbiAgICAgICAgICBbZmllbGQuY29udHJvbGxlci5wYXRoXToge1xuICAgICAgICAgICAga2luZDogJ3ZhbHVlJyxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9O1xuICAgIH0sIFtvbkNoYW5nZSwgZmllbGQuY29udHJvbGxlci5wYXRoXSksXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGZvcmNlVmFsaWRhdGlvbjogZm9yY2VWYWxpZGF0aW9uXG4gIH0pO1xufSk7XG5mdW5jdGlvbiBGaWVsZHMoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBmaWVsZHMsXG4gICAgdmFsdWUsXG4gICAgZmllbGRNb2RlcyxcbiAgICBmb3JjZVZhbGlkYXRpb24sXG4gICAgaW52YWxpZEZpZWxkcyxcbiAgICBvbkNoYW5nZVxuICB9ID0gX3JlZjI7XG4gIGNvbnN0IHJlbmRlcmVkRmllbGRzID0gT2JqZWN0LmtleXMoZmllbGRzKS5maWx0ZXIoZmllbGRQYXRoID0+IGZpZWxkTW9kZXMgPT09IG51bGwgfHwgZmllbGRNb2Rlc1tmaWVsZFBhdGhdICE9PSAnaGlkZGVuJykubWFwKChmaWVsZFBhdGgsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgZmllbGQgPSBmaWVsZHNbZmllbGRQYXRoXTtcbiAgICBjb25zdCB2YWwgPSB2YWx1ZVtmaWVsZFBhdGhdO1xuICAgIGNvbnN0IGZpZWxkTW9kZSA9IGZpZWxkTW9kZXMgPT09IG51bGwgPyAnZWRpdCcgOiBmaWVsZE1vZGVzW2ZpZWxkUGF0aF07XG5cbiAgICBpZiAodmFsLmtpbmQgPT09ICdlcnJvcicpIHtcbiAgICAgIHJldHVybiBjb3JlLmpzeChcImRpdlwiLCBudWxsLCBmaWVsZC5sYWJlbCwgXCI6IFwiLCBjb3JlLmpzeChcInNwYW5cIiwge1xuICAgICAgICBjc3M6IHtcbiAgICAgICAgICBjb2xvcjogJ3JlZCdcbiAgICAgICAgfVxuICAgICAgfSwgdmFsLmVycm9yc1swXS5tZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvcmUuanN4KFJlbmRlckZpZWxkLCB7XG4gICAgICBrZXk6IGZpZWxkUGF0aCxcbiAgICAgIGZpZWxkOiBmaWVsZCxcbiAgICAgIHZhbHVlOiB2YWwudmFsdWUsXG4gICAgICBmb3JjZVZhbGlkYXRpb246IGZvcmNlVmFsaWRhdGlvbiAmJiBpbnZhbGlkRmllbGRzLmhhcyhmaWVsZFBhdGgpLFxuICAgICAgb25DaGFuZ2U6IGZpZWxkTW9kZSA9PT0gJ2VkaXQnID8gb25DaGFuZ2UgOiB1bmRlZmluZWQsXG4gICAgICBhdXRvRm9jdXM6IGluZGV4ID09PSAwXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gY29yZS5qc3goY29yZS5TdGFjaywge1xuICAgIGdhcDogXCJ4bGFyZ2VcIlxuICB9LCByZW5kZXJlZEZpZWxkcywgcmVuZGVyZWRGaWVsZHMubGVuZ3RoID09PSAwICYmICdUaGVyZSBhcmUgbm8gZmllbGRzIHRoYXQgeW91IGNhbiByZWFkIG9yIGVkaXQnKTtcbn1cblxuZXhwb3J0cy5GaWVsZHMgPSBGaWVsZHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/Fields-6e862a67.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/GraphQLErrorNotice-6a857a3a.cjs.dev.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/GraphQLErrorNotice-6a857a3a.cjs.dev.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar notice = __webpack_require__(/*! @keystone-ui/notice */ \"@keystone-ui/notice\");\nvar React = __webpack_require__(/*! react */ \"react\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar React__default = /*#__PURE__*/_interopDefault(React);\n\nfunction GraphQLErrorNotice(_ref) {\n  let {\n    errors,\n    networkError\n  } = _ref;\n\n  if (networkError) {\n    return /*#__PURE__*/React__default[\"default\"].createElement(notice.Notice, {\n      tone: \"negative\",\n      marginBottom: \"large\"\n    }, networkError.message);\n  }\n\n  if (errors !== null && errors !== void 0 && errors.length) {\n    return /*#__PURE__*/React__default[\"default\"].createElement(core.Stack, {\n      gap: \"small\",\n      marginBottom: \"large\"\n    }, errors.map(err => /*#__PURE__*/React__default[\"default\"].createElement(notice.Notice, {\n      tone: \"negative\"\n    }, err.message)));\n  }\n\n  return null;\n}\n\nexports.GraphQLErrorNotice = GraphQLErrorNotice;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvR3JhcGhRTEVycm9yTm90aWNlLTZhODU3YTNhLmNqcy5kZXYuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsV0FBVyxtQkFBTyxDQUFDLDRDQUFtQjtBQUN0QyxhQUFhLG1CQUFPLENBQUMsZ0RBQXFCO0FBQzFDLFlBQVksbUJBQU8sQ0FBQyxvQkFBTzs7QUFFM0IsK0JBQStCLGlDQUFpQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUEsMEJBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9Aa2V5c3RvbmUtbmV4dC9rZXlzdG9uZS9kaXN0L0dyYXBoUUxFcnJvck5vdGljZS02YTg1N2EzYS5janMuZGV2LmpzPzM3MTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29yZSA9IHJlcXVpcmUoJ0BrZXlzdG9uZS11aS9jb3JlJyk7XG52YXIgbm90aWNlID0gcmVxdWlyZSgnQGtleXN0b25lLXVpL25vdGljZScpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7ICdkZWZhdWx0JzogZSB9OyB9XG5cbnZhciBSZWFjdF9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHQoUmVhY3QpO1xuXG5mdW5jdGlvbiBHcmFwaFFMRXJyb3JOb3RpY2UoX3JlZikge1xuICBsZXQge1xuICAgIGVycm9ycyxcbiAgICBuZXR3b3JrRXJyb3JcbiAgfSA9IF9yZWY7XG5cbiAgaWYgKG5ldHdvcmtFcnJvcikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQobm90aWNlLk5vdGljZSwge1xuICAgICAgdG9uZTogXCJuZWdhdGl2ZVwiLFxuICAgICAgbWFyZ2luQm90dG9tOiBcImxhcmdlXCJcbiAgICB9LCBuZXR3b3JrRXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICBpZiAoZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwICYmIGVycm9ycy5sZW5ndGgpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KGNvcmUuU3RhY2ssIHtcbiAgICAgIGdhcDogXCJzbWFsbFwiLFxuICAgICAgbWFyZ2luQm90dG9tOiBcImxhcmdlXCJcbiAgICB9LCBlcnJvcnMubWFwKGVyciA9PiAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHRbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQobm90aWNlLk5vdGljZSwge1xuICAgICAgdG9uZTogXCJuZWdhdGl2ZVwiXG4gICAgfSwgZXJyLm1lc3NhZ2UpKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5HcmFwaFFMRXJyb3JOb3RpY2UgPSBHcmFwaFFMRXJyb3JOb3RpY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/GraphQLErrorNotice-6a857a3a.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar button = __webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar client = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n\n/** @jsxRuntime classic */\nconst END_SESSION = client.gql`\n  mutation EndSession {\n    endSession\n  }\n`;\n\nconst SignoutButton = _ref => {\n  let {\n    children\n  } = _ref;\n  const [endSession, {\n    loading,\n    data\n  }] = client.useMutation(END_SESSION);\n  React.useEffect(() => {\n    if (data !== null && data !== void 0 && data.endSession) {\n      window.location.reload();\n    }\n  }, [data]);\n  return core.jsx(button.Button, {\n    size: \"small\",\n    isLoading: loading,\n    onClick: () => endSession()\n  }, children || 'Sign out');\n};\n\nexports.SignoutButton = SignoutButton;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvU2lnbm91dEJ1dHRvbi0wODE0MTBkNi5janMuZGV2LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyw0Q0FBbUI7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLGdEQUFxQjtBQUMxQyxZQUFZLG1CQUFPLENBQUMsb0JBQU87QUFDM0IsYUFBYSxtQkFBTyxDQUFDLHNDQUFnQjs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9Aa2V5c3RvbmUtbmV4dC9rZXlzdG9uZS9kaXN0L1NpZ25vdXRCdXR0b24tMDgxNDEwZDYuY2pzLmRldi5qcz9jNDI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNvcmUgPSByZXF1aXJlKCdAa2V5c3RvbmUtdWkvY29yZScpO1xudmFyIGJ1dHRvbiA9IHJlcXVpcmUoJ0BrZXlzdG9uZS11aS9idXR0b24nKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgY2xpZW50ID0gcmVxdWlyZSgnQGFwb2xsby9jbGllbnQnKTtcblxuLyoqIEBqc3hSdW50aW1lIGNsYXNzaWMgKi9cbmNvbnN0IEVORF9TRVNTSU9OID0gY2xpZW50LmdxbGBcbiAgbXV0YXRpb24gRW5kU2Vzc2lvbiB7XG4gICAgZW5kU2Vzc2lvblxuICB9XG5gO1xuXG5jb25zdCBTaWdub3V0QnV0dG9uID0gX3JlZiA9PiB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY7XG4gIGNvbnN0IFtlbmRTZXNzaW9uLCB7XG4gICAgbG9hZGluZyxcbiAgICBkYXRhXG4gIH1dID0gY2xpZW50LnVzZU11dGF0aW9uKEVORF9TRVNTSU9OKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGF0YSAhPT0gbnVsbCAmJiBkYXRhICE9PSB2b2lkIDAgJiYgZGF0YS5lbmRTZXNzaW9uKSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfVxuICB9LCBbZGF0YV0pO1xuICByZXR1cm4gY29yZS5qc3goYnV0dG9uLkJ1dHRvbiwge1xuICAgIHNpemU6IFwic21hbGxcIixcbiAgICBpc0xvYWRpbmc6IGxvYWRpbmcsXG4gICAgb25DbGljazogKCkgPT4gZW5kU2Vzc2lvbigpXG4gIH0sIGNoaWxkcmVuIHx8ICdTaWduIG91dCcpO1xufTtcblxuZXhwb3J0cy5TaWdub3V0QnV0dG9uID0gU2lnbm91dEJ1dHRvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar client = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n\nconst staticAdminMetaQuery = client.gql`\n  query StaticAdminMeta {\n    keystone {\n      __typename\n      adminMeta {\n        __typename\n        enableSignout\n        enableSessionItem\n        lists {\n          __typename\n          key\n          itemQueryName\n          listQueryName\n          initialSort {\n            __typename\n            field\n            direction\n          }\n          path\n          label\n          singular\n          plural\n          description\n          initialColumns\n          pageSize\n          labelField\n          fields {\n            __typename\n            path\n            label\n            fieldMeta\n            viewsIndex\n            customViewsIndex\n            search\n            itemView {\n              fieldMode\n            }\n          }\n        }\n      }\n    }\n  }\n`; // generated by https://graphql-code-generator.com with these options:\n// generates:\n//   types.ts:\n//     plugins:\n//       - typescript-operations:\n//           namingConvention: keep\n//       - typescript:\n//           enumsAsTypes: true\n//           nonOptionalTypename: true\n//           namingConvention: keep\n//           noExport: true\n//           avoidOptionals: true\n//           scalars:\n//             JSON: JSONValue\n\nexports.staticAdminMetaQuery = staticAdminMetaQuery;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvYWRtaW4tbWV0YS1ncmFwaHFsLTlmOWE5YzExLmNqcy5kZXYuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLHNDQUFnQjs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZGlzdC9hZG1pbi1tZXRhLWdyYXBocWwtOWY5YTljMTEuY2pzLmRldi5qcz9hZTg3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNsaWVudCA9IHJlcXVpcmUoJ0BhcG9sbG8vY2xpZW50Jyk7XG5cbmNvbnN0IHN0YXRpY0FkbWluTWV0YVF1ZXJ5ID0gY2xpZW50LmdxbGBcbiAgcXVlcnkgU3RhdGljQWRtaW5NZXRhIHtcbiAgICBrZXlzdG9uZSB7XG4gICAgICBfX3R5cGVuYW1lXG4gICAgICBhZG1pbk1ldGEge1xuICAgICAgICBfX3R5cGVuYW1lXG4gICAgICAgIGVuYWJsZVNpZ25vdXRcbiAgICAgICAgZW5hYmxlU2Vzc2lvbkl0ZW1cbiAgICAgICAgbGlzdHMge1xuICAgICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgICBrZXlcbiAgICAgICAgICBpdGVtUXVlcnlOYW1lXG4gICAgICAgICAgbGlzdFF1ZXJ5TmFtZVxuICAgICAgICAgIGluaXRpYWxTb3J0IHtcbiAgICAgICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgICAgIGZpZWxkXG4gICAgICAgICAgICBkaXJlY3Rpb25cbiAgICAgICAgICB9XG4gICAgICAgICAgcGF0aFxuICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgc2luZ3VsYXJcbiAgICAgICAgICBwbHVyYWxcbiAgICAgICAgICBkZXNjcmlwdGlvblxuICAgICAgICAgIGluaXRpYWxDb2x1bW5zXG4gICAgICAgICAgcGFnZVNpemVcbiAgICAgICAgICBsYWJlbEZpZWxkXG4gICAgICAgICAgZmllbGRzIHtcbiAgICAgICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgICAgIHBhdGhcbiAgICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgICBmaWVsZE1ldGFcbiAgICAgICAgICAgIHZpZXdzSW5kZXhcbiAgICAgICAgICAgIGN1c3RvbVZpZXdzSW5kZXhcbiAgICAgICAgICAgIHNlYXJjaFxuICAgICAgICAgICAgaXRlbVZpZXcge1xuICAgICAgICAgICAgICBmaWVsZE1vZGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7IC8vIGdlbmVyYXRlZCBieSBodHRwczovL2dyYXBocWwtY29kZS1nZW5lcmF0b3IuY29tIHdpdGggdGhlc2Ugb3B0aW9uczpcbi8vIGdlbmVyYXRlczpcbi8vICAgdHlwZXMudHM6XG4vLyAgICAgcGx1Z2luczpcbi8vICAgICAgIC0gdHlwZXNjcmlwdC1vcGVyYXRpb25zOlxuLy8gICAgICAgICAgIG5hbWluZ0NvbnZlbnRpb246IGtlZXBcbi8vICAgICAgIC0gdHlwZXNjcmlwdDpcbi8vICAgICAgICAgICBlbnVtc0FzVHlwZXM6IHRydWVcbi8vICAgICAgICAgICBub25PcHRpb25hbFR5cGVuYW1lOiB0cnVlXG4vLyAgICAgICAgICAgbmFtaW5nQ29udmVudGlvbjoga2VlcFxuLy8gICAgICAgICAgIG5vRXhwb3J0OiB0cnVlXG4vLyAgICAgICAgICAgYXZvaWRPcHRpb25hbHM6IHRydWVcbi8vICAgICAgICAgICBzY2FsYXJzOlxuLy8gICAgICAgICAgICAgSlNPTjogSlNPTlZhbHVlXG5cbmV4cG9ydHMuc3RhdGljQWRtaW5NZXRhUXVlcnkgPSBzdGF0aWNBZG1pbk1ldGFRdWVyeTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/core-11c9ffea.cjs.dev.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/core-11c9ffea.cjs.dev.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\n// TODO: don't duplicate this between here and packages/keystone/ListTypes/list.js\nfunction getGqlNames(_ref) {\n  let {\n    listKey,\n    pluralGraphQLName\n  } = _ref;\n  const lowerPluralName = pluralGraphQLName.slice(0, 1).toLowerCase() + pluralGraphQLName.slice(1);\n  const lowerSingularName = listKey.slice(0, 1).toLowerCase() + listKey.slice(1);\n  return {\n    outputTypeName: listKey,\n    itemQueryName: lowerSingularName,\n    listQueryName: lowerPluralName,\n    listQueryCountName: `${lowerPluralName}Count`,\n    listOrderName: `${listKey}OrderByInput`,\n    deleteMutationName: `delete${listKey}`,\n    updateMutationName: `update${listKey}`,\n    createMutationName: `create${listKey}`,\n    deleteManyMutationName: `delete${pluralGraphQLName}`,\n    updateManyMutationName: `update${pluralGraphQLName}`,\n    createManyMutationName: `create${pluralGraphQLName}`,\n    whereInputName: `${listKey}WhereInput`,\n    whereUniqueInputName: `${listKey}WhereUniqueInput`,\n    updateInputName: `${listKey}UpdateInput`,\n    createInputName: `${listKey}CreateInput`,\n    updateManyInputName: `${listKey}UpdateArgs`,\n    relateToManyForCreateInputName: `${listKey}RelateToManyForCreateInput`,\n    relateToManyForUpdateInputName: `${listKey}RelateToManyForUpdateInput`,\n    relateToOneForCreateInputName: `${listKey}RelateToOneForCreateInput`,\n    relateToOneForUpdateInputName: `${listKey}RelateToOneForUpdateInput`\n  };\n}\n\nexports.getGqlNames = getGqlNames;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvY29yZS0xMWM5ZmZlYS5janMuZGV2LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGdCQUFnQjtBQUMzQyxzQkFBc0IsUUFBUTtBQUM5QixpQ0FBaUMsUUFBUTtBQUN6QyxpQ0FBaUMsUUFBUTtBQUN6QyxpQ0FBaUMsUUFBUTtBQUN6QyxxQ0FBcUMsa0JBQWtCO0FBQ3ZELHFDQUFxQyxrQkFBa0I7QUFDdkQscUNBQXFDLGtCQUFrQjtBQUN2RCx1QkFBdUIsUUFBUTtBQUMvQiw2QkFBNkIsUUFBUTtBQUNyQyx3QkFBd0IsUUFBUTtBQUNoQyx3QkFBd0IsUUFBUTtBQUNoQyw0QkFBNEIsUUFBUTtBQUNwQyx1Q0FBdUMsUUFBUTtBQUMvQyx1Q0FBdUMsUUFBUTtBQUMvQyxzQ0FBc0MsUUFBUTtBQUM5QyxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBOztBQUVBLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZGlzdC9jb3JlLTExYzlmZmVhLmNqcy5kZXYuanM/MTZmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIFRPRE86IGRvbid0IGR1cGxpY2F0ZSB0aGlzIGJldHdlZW4gaGVyZSBhbmQgcGFja2FnZXMva2V5c3RvbmUvTGlzdFR5cGVzL2xpc3QuanNcbmZ1bmN0aW9uIGdldEdxbE5hbWVzKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBsaXN0S2V5LFxuICAgIHBsdXJhbEdyYXBoUUxOYW1lXG4gIH0gPSBfcmVmO1xuICBjb25zdCBsb3dlclBsdXJhbE5hbWUgPSBwbHVyYWxHcmFwaFFMTmFtZS5zbGljZSgwLCAxKS50b0xvd2VyQ2FzZSgpICsgcGx1cmFsR3JhcGhRTE5hbWUuc2xpY2UoMSk7XG4gIGNvbnN0IGxvd2VyU2luZ3VsYXJOYW1lID0gbGlzdEtleS5zbGljZSgwLCAxKS50b0xvd2VyQ2FzZSgpICsgbGlzdEtleS5zbGljZSgxKTtcbiAgcmV0dXJuIHtcbiAgICBvdXRwdXRUeXBlTmFtZTogbGlzdEtleSxcbiAgICBpdGVtUXVlcnlOYW1lOiBsb3dlclNpbmd1bGFyTmFtZSxcbiAgICBsaXN0UXVlcnlOYW1lOiBsb3dlclBsdXJhbE5hbWUsXG4gICAgbGlzdFF1ZXJ5Q291bnROYW1lOiBgJHtsb3dlclBsdXJhbE5hbWV9Q291bnRgLFxuICAgIGxpc3RPcmRlck5hbWU6IGAke2xpc3RLZXl9T3JkZXJCeUlucHV0YCxcbiAgICBkZWxldGVNdXRhdGlvbk5hbWU6IGBkZWxldGUke2xpc3RLZXl9YCxcbiAgICB1cGRhdGVNdXRhdGlvbk5hbWU6IGB1cGRhdGUke2xpc3RLZXl9YCxcbiAgICBjcmVhdGVNdXRhdGlvbk5hbWU6IGBjcmVhdGUke2xpc3RLZXl9YCxcbiAgICBkZWxldGVNYW55TXV0YXRpb25OYW1lOiBgZGVsZXRlJHtwbHVyYWxHcmFwaFFMTmFtZX1gLFxuICAgIHVwZGF0ZU1hbnlNdXRhdGlvbk5hbWU6IGB1cGRhdGUke3BsdXJhbEdyYXBoUUxOYW1lfWAsXG4gICAgY3JlYXRlTWFueU11dGF0aW9uTmFtZTogYGNyZWF0ZSR7cGx1cmFsR3JhcGhRTE5hbWV9YCxcbiAgICB3aGVyZUlucHV0TmFtZTogYCR7bGlzdEtleX1XaGVyZUlucHV0YCxcbiAgICB3aGVyZVVuaXF1ZUlucHV0TmFtZTogYCR7bGlzdEtleX1XaGVyZVVuaXF1ZUlucHV0YCxcbiAgICB1cGRhdGVJbnB1dE5hbWU6IGAke2xpc3RLZXl9VXBkYXRlSW5wdXRgLFxuICAgIGNyZWF0ZUlucHV0TmFtZTogYCR7bGlzdEtleX1DcmVhdGVJbnB1dGAsXG4gICAgdXBkYXRlTWFueUlucHV0TmFtZTogYCR7bGlzdEtleX1VcGRhdGVBcmdzYCxcbiAgICByZWxhdGVUb01hbnlGb3JDcmVhdGVJbnB1dE5hbWU6IGAke2xpc3RLZXl9UmVsYXRlVG9NYW55Rm9yQ3JlYXRlSW5wdXRgLFxuICAgIHJlbGF0ZVRvTWFueUZvclVwZGF0ZUlucHV0TmFtZTogYCR7bGlzdEtleX1SZWxhdGVUb01hbnlGb3JVcGRhdGVJbnB1dGAsXG4gICAgcmVsYXRlVG9PbmVGb3JDcmVhdGVJbnB1dE5hbWU6IGAke2xpc3RLZXl9UmVsYXRlVG9PbmVGb3JDcmVhdGVJbnB1dGAsXG4gICAgcmVsYXRlVG9PbmVGb3JVcGRhdGVJbnB1dE5hbWU6IGAke2xpc3RLZXl9UmVsYXRlVG9PbmVGb3JVcGRhdGVJbnB1dGBcbiAgfTtcbn1cblxuZXhwb3J0cy5nZXRHcWxOYW1lcyA9IGdldEdxbE5hbWVzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/core-11c9ffea.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/dataGetter-9fbe2f8e.cjs.dev.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/dataGetter-9fbe2f8e.cjs.dev.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nfunction dataGetterWithNoErrors(data, path) {\n  return {\n    data,\n    path,\n\n    get(field) {\n      var _data$field;\n\n      return dataGetterWithNoErrors((_data$field = data === null || data === void 0 ? void 0 : data[field]) !== null && _data$field !== void 0 ? _data$field : null, path.concat(field));\n    }\n\n  };\n}\n\nfunction dataGetterWithErrors(data, errors, path) {\n  return {\n    data,\n    errors,\n    path,\n\n    get(field) {\n      var _data$field2;\n\n      const newPath = path.concat(field);\n      const newItem = (_data$field2 = data === null || data === void 0 ? void 0 : data[field]) !== null && _data$field2 !== void 0 ? _data$field2 : null;\n      let errorsForField = errors.filter(error => {\n        if (error.path === undefined) {\n          return true;\n        }\n\n        const errorPath = error.path;\n        return newPath.every((value, index) => errorPath[index] === undefined || errorPath[index] === value);\n      });\n\n      if (errorsForField.length) {\n        return dataGetterWithErrors(newItem, errors, newPath);\n      }\n\n      return dataGetterWithNoErrors(newItem, newPath);\n    }\n\n  };\n}\n\nfunction makeDataGetter(data, errors) {\n  if (errors !== null && errors !== void 0 && errors.length) {\n    return dataGetterWithErrors(data, errors, []);\n  }\n\n  return dataGetterWithNoErrors(data, []);\n}\n\nexports.makeDataGetter = makeDataGetter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvZGF0YUdldHRlci05ZmJlMmY4ZS5janMuZGV2LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZGlzdC9kYXRhR2V0dGVyLTlmYmUyZjhlLmNqcy5kZXYuanM/N2U5YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGRhdGFHZXR0ZXJXaXRoTm9FcnJvcnMoZGF0YSwgcGF0aCkge1xuICByZXR1cm4ge1xuICAgIGRhdGEsXG4gICAgcGF0aCxcblxuICAgIGdldChmaWVsZCkge1xuICAgICAgdmFyIF9kYXRhJGZpZWxkO1xuXG4gICAgICByZXR1cm4gZGF0YUdldHRlcldpdGhOb0Vycm9ycygoX2RhdGEkZmllbGQgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGFbZmllbGRdKSAhPT0gbnVsbCAmJiBfZGF0YSRmaWVsZCAhPT0gdm9pZCAwID8gX2RhdGEkZmllbGQgOiBudWxsLCBwYXRoLmNvbmNhdChmaWVsZCkpO1xuICAgIH1cblxuICB9O1xufVxuXG5mdW5jdGlvbiBkYXRhR2V0dGVyV2l0aEVycm9ycyhkYXRhLCBlcnJvcnMsIHBhdGgpIHtcbiAgcmV0dXJuIHtcbiAgICBkYXRhLFxuICAgIGVycm9ycyxcbiAgICBwYXRoLFxuXG4gICAgZ2V0KGZpZWxkKSB7XG4gICAgICB2YXIgX2RhdGEkZmllbGQyO1xuXG4gICAgICBjb25zdCBuZXdQYXRoID0gcGF0aC5jb25jYXQoZmllbGQpO1xuICAgICAgY29uc3QgbmV3SXRlbSA9IChfZGF0YSRmaWVsZDIgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGFbZmllbGRdKSAhPT0gbnVsbCAmJiBfZGF0YSRmaWVsZDIgIT09IHZvaWQgMCA/IF9kYXRhJGZpZWxkMiA6IG51bGw7XG4gICAgICBsZXQgZXJyb3JzRm9yRmllbGQgPSBlcnJvcnMuZmlsdGVyKGVycm9yID0+IHtcbiAgICAgICAgaWYgKGVycm9yLnBhdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXJyb3JQYXRoID0gZXJyb3IucGF0aDtcbiAgICAgICAgcmV0dXJuIG5ld1BhdGguZXZlcnkoKHZhbHVlLCBpbmRleCkgPT4gZXJyb3JQYXRoW2luZGV4XSA9PT0gdW5kZWZpbmVkIHx8IGVycm9yUGF0aFtpbmRleF0gPT09IHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3JzRm9yRmllbGQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBkYXRhR2V0dGVyV2l0aEVycm9ycyhuZXdJdGVtLCBlcnJvcnMsIG5ld1BhdGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YUdldHRlcldpdGhOb0Vycm9ycyhuZXdJdGVtLCBuZXdQYXRoKTtcbiAgICB9XG5cbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFrZURhdGFHZXR0ZXIoZGF0YSwgZXJyb3JzKSB7XG4gIGlmIChlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgIHJldHVybiBkYXRhR2V0dGVyV2l0aEVycm9ycyhkYXRhLCBlcnJvcnMsIFtdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhR2V0dGVyV2l0aE5vRXJyb3JzKGRhdGEsIFtdKTtcbn1cblxuZXhwb3J0cy5tYWtlRGF0YUdldHRlciA9IG1ha2VEYXRhR2V0dGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/dataGetter-9fbe2f8e.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/getRootGraphQLFieldsFromFieldController-47699a0d.cjs.dev.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/getRootGraphQLFieldsFromFieldController-47699a0d.cjs.dev.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar weakMemoize = __webpack_require__(/*! @emotion/weak-memoize */ \"@emotion/weak-memoize\");\nvar graphql = __webpack_require__(/*! graphql */ \"graphql\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar weakMemoize__default = /*#__PURE__*/_interopDefault(weakMemoize);\n\nfunction extractRootFields(selectedFields, selectionSet) {\n  selectionSet.selections.forEach(selection => {\n    if (selection.kind === 'Field') {\n      selectedFields.add(selection.alias ? selection.alias.value : selection.name.value);\n    }\n\n    if (selection.kind === 'InlineFragment') {\n      extractRootFields(selectedFields, selection.selectionSet);\n    } // FragmentSpread will never happen for the use cases of getRootFieldsFromSelection\n\n  });\n}\n\nconst getRootGraphQLFieldsFromFieldController = weakMemoize__default[\"default\"](controller => {\n  const ast = graphql.parse(`fragment X on Y {\n  id\n  ${controller.graphqlSelection}\n  }`);\n  const selectedFields = new Set();\n  const fragmentNode = ast.definitions[0];\n  extractRootFields(selectedFields, fragmentNode.selectionSet);\n  return [...selectedFields];\n});\n\nexports.getRootGraphQLFieldsFromFieldController = getRootGraphQLFieldsFromFieldController;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvZ2V0Um9vdEdyYXBoUUxGaWVsZHNGcm9tRmllbGRDb250cm9sbGVyLTQ3Njk5YTBkLmNqcy5kZXYuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCLG1CQUFPLENBQUMsb0RBQXVCO0FBQ2pELGNBQWMsbUJBQU8sQ0FBQyx3QkFBUzs7QUFFL0IsK0JBQStCLGlDQUFpQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9Aa2V5c3RvbmUtbmV4dC9rZXlzdG9uZS9kaXN0L2dldFJvb3RHcmFwaFFMRmllbGRzRnJvbUZpZWxkQ29udHJvbGxlci00NzY5OWEwZC5janMuZGV2LmpzPzkyYzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2Vha01lbW9pemUgPSByZXF1aXJlKCdAZW1vdGlvbi93ZWFrLW1lbW9pemUnKTtcbnZhciBncmFwaHFsID0gcmVxdWlyZSgnZ3JhcGhxbCcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGUpIHsgcmV0dXJuIGUgJiYgZS5fX2VzTW9kdWxlID8gZSA6IHsgJ2RlZmF1bHQnOiBlIH07IH1cblxudmFyIHdlYWtNZW1vaXplX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdCh3ZWFrTWVtb2l6ZSk7XG5cbmZ1bmN0aW9uIGV4dHJhY3RSb290RmllbGRzKHNlbGVjdGVkRmllbGRzLCBzZWxlY3Rpb25TZXQpIHtcbiAgc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZm9yRWFjaChzZWxlY3Rpb24gPT4ge1xuICAgIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gJ0ZpZWxkJykge1xuICAgICAgc2VsZWN0ZWRGaWVsZHMuYWRkKHNlbGVjdGlvbi5hbGlhcyA/IHNlbGVjdGlvbi5hbGlhcy52YWx1ZSA6IHNlbGVjdGlvbi5uYW1lLnZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0aW9uLmtpbmQgPT09ICdJbmxpbmVGcmFnbWVudCcpIHtcbiAgICAgIGV4dHJhY3RSb290RmllbGRzKHNlbGVjdGVkRmllbGRzLCBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KTtcbiAgICB9IC8vIEZyYWdtZW50U3ByZWFkIHdpbGwgbmV2ZXIgaGFwcGVuIGZvciB0aGUgdXNlIGNhc2VzIG9mIGdldFJvb3RGaWVsZHNGcm9tU2VsZWN0aW9uXG5cbiAgfSk7XG59XG5cbmNvbnN0IGdldFJvb3RHcmFwaFFMRmllbGRzRnJvbUZpZWxkQ29udHJvbGxlciA9IHdlYWtNZW1vaXplX19kZWZhdWx0W1wiZGVmYXVsdFwiXShjb250cm9sbGVyID0+IHtcbiAgY29uc3QgYXN0ID0gZ3JhcGhxbC5wYXJzZShgZnJhZ21lbnQgWCBvbiBZIHtcbiAgaWRcbiAgJHtjb250cm9sbGVyLmdyYXBocWxTZWxlY3Rpb259XG4gIH1gKTtcbiAgY29uc3Qgc2VsZWN0ZWRGaWVsZHMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IGZyYWdtZW50Tm9kZSA9IGFzdC5kZWZpbml0aW9uc1swXTtcbiAgZXh0cmFjdFJvb3RGaWVsZHMoc2VsZWN0ZWRGaWVsZHMsIGZyYWdtZW50Tm9kZS5zZWxlY3Rpb25TZXQpO1xuICByZXR1cm4gWy4uLnNlbGVjdGVkRmllbGRzXTtcbn0pO1xuXG5leHBvcnRzLmdldFJvb3RHcmFwaFFMRmllbGRzRnJvbUZpZWxkQ29udHJvbGxlciA9IGdldFJvb3RHcmFwaFFMRmllbGRzRnJvbUZpZWxkQ29udHJvbGxlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/getRootGraphQLFieldsFromFieldController-47699a0d.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar graphqlTsSchema = __webpack_require__(/*! @graphql-ts/schema */ \"@graphql-ts/schema\");\nvar graphqlTypeJson = __webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\nvar GraphQLUpload = __webpack_require__(/*! graphql-upload/public/GraphQLUpload.js */ \"graphql-upload/public/GraphQLUpload.js\");\nvar graphql = __webpack_require__(/*! graphql */ \"graphql\");\nvar Decimal$1 = __webpack_require__(/*! decimal.js */ \"decimal.js\");\nvar apiWithoutContext = __webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\nvar extend = __webpack_require__(/*! @graphql-ts/extend */ \"@graphql-ts/extend\");\nvar apiWithContext = __webpack_require__(/*! @graphql-ts/schema/api-with-context */ \"@graphql-ts/schema/api-with-context\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar graphqlTsSchema__namespace = /*#__PURE__*/_interopNamespace(graphqlTsSchema);\nvar GraphQLUpload__default = /*#__PURE__*/_interopDefault(GraphQLUpload);\n\nconst JSON = graphqlTsSchema__namespace.graphql.scalar(graphqlTypeJson.GraphQLJSON);\nconst Upload = graphqlTsSchema__namespace.graphql.scalar(GraphQLUpload__default[\"default\"]); // - Decimal.js throws on invalid inputs\n// - Decimal.js can represent +Infinity and -Infinity, these aren't values in Postgres' decimal,\n//   NaN is but Prisma doesn't support it\n//   .isFinite refers to +Infinity, -Infinity and NaN\n\nconst Decimal = graphqlTsSchema__namespace.graphql.scalar(new graphql.GraphQLScalarType({\n  name: 'Decimal',\n\n  serialize(value) {\n    if (!Decimal$1.Decimal.isDecimal(value)) {\n      throw new graphql.GraphQLError(`unexpected value provided to Decimal scalar: ${value}`);\n    }\n\n    if (value.scaleToPrint !== undefined) {\n      return value.toFixed(value.scaleToPrint);\n    }\n\n    return value.toString();\n  },\n\n  parseLiteral(value) {\n    if (value.kind !== 'StringValue') {\n      throw new graphql.GraphQLError('Decimal only accepts values as strings');\n    }\n\n    let decimal = new Decimal$1.Decimal(value.value);\n\n    if (!decimal.isFinite()) {\n      throw new graphql.GraphQLError('Decimal values must be finite');\n    }\n\n    return decimal;\n  },\n\n  parseValue(value) {\n    if (Decimal$1.Decimal.isDecimal(value)) {\n      if (!value.isFinite()) {\n        throw new graphql.GraphQLError('Decimal values must be finite');\n      }\n\n      return value;\n    }\n\n    if (typeof value !== 'string') {\n      throw new graphql.GraphQLError('Decimal only accepts values as strings');\n    }\n\n    let decimal = new Decimal$1.Decimal(value);\n\n    if (!decimal.isFinite()) {\n      throw new graphql.GraphQLError('Decimal values must be finite');\n    }\n\n    return decimal;\n  }\n\n})); // from https://github.com/excitement-engineer/graphql-iso-date/blob/master/src/utils/validator.js#L121\n// this is also what prisma uses https://github.com/prisma/prisma/blob/20b58fe65d581bcb43c0d5c28d4b89cabc2d99b2/packages/client/src/runtime/utils/common.ts#L126-L128\n\nconst RFC_3339_REGEX = /^(\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60))(\\.\\d{1,})?(([Z])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;\n\nfunction parseDate(input) {\n  if (!RFC_3339_REGEX.test(input)) {\n    throw new graphql.GraphQLError('DateTime scalars must be in the form of a full ISO 8601 date-time string');\n  }\n\n  const parsed = new Date(input);\n\n  if (isNaN(parsed.valueOf())) {\n    throw new graphql.GraphQLError('DateTime scalars must be in the form of a full ISO 8601 date-time string');\n  }\n\n  return parsed;\n}\n\nconst DateTime = graphqlTsSchema__namespace.graphql.scalar(new graphql.GraphQLScalarType({\n  name: 'DateTime',\n  specifiedByUrl: 'https://datatracker.ietf.org/doc/html/rfc3339#section-5.6',\n\n  serialize(value) {\n    if (!(value instanceof Date) || isNaN(value.valueOf())) {\n      throw new graphql.GraphQLError(`unexpected value provided to DateTime scalar: ${value}`);\n    }\n\n    return value.toISOString();\n  },\n\n  parseLiteral(value) {\n    if (value.kind !== 'StringValue') {\n      throw new graphql.GraphQLError('DateTime only accepts values as strings');\n    }\n\n    return parseDate(value.value);\n  },\n\n  parseValue(value) {\n    if (value instanceof Date) {\n      return value;\n    }\n\n    if (typeof value !== 'string') {\n      throw new graphql.GraphQLError('DateTime only accepts values as strings');\n    }\n\n    return parseDate(value);\n  }\n\n}));\n\nvar graphqlBoundToKeystoneContext = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  JSON: JSON,\n  Upload: Upload,\n  Decimal: Decimal,\n  DateTime: DateTime,\n  Boolean: apiWithoutContext.Boolean,\n  Float: apiWithoutContext.Float,\n  ID: apiWithoutContext.ID,\n  Int: apiWithoutContext.Int,\n  String: apiWithoutContext.String,\n  'enum': apiWithoutContext[\"enum\"],\n  enumValues: apiWithoutContext.enumValues,\n  arg: apiWithoutContext.arg,\n  inputObject: apiWithoutContext.inputObject,\n  list: apiWithoutContext.list,\n  nonNull: apiWithoutContext.nonNull,\n  scalar: apiWithoutContext.scalar,\n  bindGraphQLSchemaAPIToContext: graphqlTsSchema.bindGraphQLSchemaAPIToContext,\n  extend: extend.extend,\n  wrap: extend.wrap,\n  field: apiWithContext.field,\n  fields: apiWithContext.fields,\n  'interface': apiWithContext[\"interface\"],\n  interfaceField: apiWithContext.interfaceField,\n  object: apiWithContext.object,\n  union: apiWithContext.union\n});\n\nexports.DateTime = DateTime;\nexports.Decimal = Decimal;\nexports.JSON = JSON;\nexports.Upload = Upload;\nexports.graphqlBoundToKeystoneContext = graphqlBoundToKeystoneContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvZ3JhcGhxbC10cy1zY2hlbWEtMmEyMjAxMjAuY2pzLmRldi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyw4Q0FBb0I7QUFDbEQsc0JBQXNCLG1CQUFPLENBQUMsNENBQW1CO0FBQ2pELG9CQUFvQixtQkFBTyxDQUFDLHNGQUF3QztBQUNwRSxjQUFjLG1CQUFPLENBQUMsd0JBQVM7QUFDL0IsZ0JBQWdCLG1CQUFPLENBQUMsOEJBQVk7QUFDcEMsd0JBQXdCLG1CQUFPLENBQUMsc0ZBQXdDO0FBQ3hFLGFBQWEsbUJBQU8sQ0FBQyw4Q0FBb0I7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsZ0ZBQXFDOztBQUVsRSwrQkFBK0IsaUNBQWlDOztBQUVoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw2RkFBNkY7QUFDN0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFGQUFxRixNQUFNO0FBQzNGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLENBQUMsSUFBSTtBQUNMOztBQUVBLDZCQUE2QixFQUFFLGdHQUFnRyxHQUFHOztBQUVsSTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNGQUFzRixNQUFNO0FBQzVGOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELGdCQUFnQjtBQUNoQixlQUFlO0FBQ2YsWUFBWTtBQUNaLGNBQWM7QUFDZCxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvZ3JhcGhxbC10cy1zY2hlbWEtMmEyMjAxMjAuY2pzLmRldi5qcz9jMTdiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdyYXBocWxUc1NjaGVtYSA9IHJlcXVpcmUoJ0BncmFwaHFsLXRzL3NjaGVtYScpO1xudmFyIGdyYXBocWxUeXBlSnNvbiA9IHJlcXVpcmUoJ2dyYXBocWwtdHlwZS1qc29uJyk7XG52YXIgR3JhcGhRTFVwbG9hZCA9IHJlcXVpcmUoJ2dyYXBocWwtdXBsb2FkL3B1YmxpYy9HcmFwaFFMVXBsb2FkLmpzJyk7XG52YXIgZ3JhcGhxbCA9IHJlcXVpcmUoJ2dyYXBocWwnKTtcbnZhciBEZWNpbWFsJDEgPSByZXF1aXJlKCdkZWNpbWFsLmpzJyk7XG52YXIgYXBpV2l0aG91dENvbnRleHQgPSByZXF1aXJlKCdAZ3JhcGhxbC10cy9zY2hlbWEvYXBpLXdpdGhvdXQtY29udGV4dCcpO1xudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ0BncmFwaHFsLXRzL2V4dGVuZCcpO1xudmFyIGFwaVdpdGhDb250ZXh0ID0gcmVxdWlyZSgnQGdyYXBocWwtdHMvc2NoZW1hL2FwaS13aXRoLWNvbnRleHQnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChlKSB7IHJldHVybiBlICYmIGUuX19lc01vZHVsZSA/IGUgOiB7ICdkZWZhdWx0JzogZSB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wTmFtZXNwYWNlKGUpIHtcbiAgaWYgKGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTtcbiAgdmFyIG4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoZSkge1xuICAgIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGlmIChrICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgdmFyIGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIGspO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgaywgZC5nZXQgPyBkIDoge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlW2tdOyB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIG5bXCJkZWZhdWx0XCJdID0gZTtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobik7XG59XG5cbnZhciBncmFwaHFsVHNTY2hlbWFfX25hbWVzcGFjZSA9IC8qI19fUFVSRV9fKi9faW50ZXJvcE5hbWVzcGFjZShncmFwaHFsVHNTY2hlbWEpO1xudmFyIEdyYXBoUUxVcGxvYWRfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0KEdyYXBoUUxVcGxvYWQpO1xuXG5jb25zdCBKU09OID0gZ3JhcGhxbFRzU2NoZW1hX19uYW1lc3BhY2UuZ3JhcGhxbC5zY2FsYXIoZ3JhcGhxbFR5cGVKc29uLkdyYXBoUUxKU09OKTtcbmNvbnN0IFVwbG9hZCA9IGdyYXBocWxUc1NjaGVtYV9fbmFtZXNwYWNlLmdyYXBocWwuc2NhbGFyKEdyYXBoUUxVcGxvYWRfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKTsgLy8gLSBEZWNpbWFsLmpzIHRocm93cyBvbiBpbnZhbGlkIGlucHV0c1xuLy8gLSBEZWNpbWFsLmpzIGNhbiByZXByZXNlbnQgK0luZmluaXR5IGFuZCAtSW5maW5pdHksIHRoZXNlIGFyZW4ndCB2YWx1ZXMgaW4gUG9zdGdyZXMnIGRlY2ltYWwsXG4vLyAgIE5hTiBpcyBidXQgUHJpc21hIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuLy8gICAuaXNGaW5pdGUgcmVmZXJzIHRvICtJbmZpbml0eSwgLUluZmluaXR5IGFuZCBOYU5cblxuY29uc3QgRGVjaW1hbCA9IGdyYXBocWxUc1NjaGVtYV9fbmFtZXNwYWNlLmdyYXBocWwuc2NhbGFyKG5ldyBncmFwaHFsLkdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ0RlY2ltYWwnLFxuXG4gIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICAgIGlmICghRGVjaW1hbCQxLkRlY2ltYWwuaXNEZWNpbWFsKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IGdyYXBocWwuR3JhcGhRTEVycm9yKGB1bmV4cGVjdGVkIHZhbHVlIHByb3ZpZGVkIHRvIERlY2ltYWwgc2NhbGFyOiAke3ZhbHVlfWApO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5zY2FsZVRvUHJpbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvRml4ZWQodmFsdWUuc2NhbGVUb1ByaW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfSxcblxuICBwYXJzZUxpdGVyYWwodmFsdWUpIHtcbiAgICBpZiAodmFsdWUua2luZCAhPT0gJ1N0cmluZ1ZhbHVlJykge1xuICAgICAgdGhyb3cgbmV3IGdyYXBocWwuR3JhcGhRTEVycm9yKCdEZWNpbWFsIG9ubHkgYWNjZXB0cyB2YWx1ZXMgYXMgc3RyaW5ncycpO1xuICAgIH1cblxuICAgIGxldCBkZWNpbWFsID0gbmV3IERlY2ltYWwkMS5EZWNpbWFsKHZhbHVlLnZhbHVlKTtcblxuICAgIGlmICghZGVjaW1hbC5pc0Zpbml0ZSgpKSB7XG4gICAgICB0aHJvdyBuZXcgZ3JhcGhxbC5HcmFwaFFMRXJyb3IoJ0RlY2ltYWwgdmFsdWVzIG11c3QgYmUgZmluaXRlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlY2ltYWw7XG4gIH0sXG5cbiAgcGFyc2VWYWx1ZSh2YWx1ZSkge1xuICAgIGlmIChEZWNpbWFsJDEuRGVjaW1hbC5pc0RlY2ltYWwodmFsdWUpKSB7XG4gICAgICBpZiAoIXZhbHVlLmlzRmluaXRlKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdyYXBocWwuR3JhcGhRTEVycm9yKCdEZWNpbWFsIHZhbHVlcyBtdXN0IGJlIGZpbml0ZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBncmFwaHFsLkdyYXBoUUxFcnJvcignRGVjaW1hbCBvbmx5IGFjY2VwdHMgdmFsdWVzIGFzIHN0cmluZ3MnKTtcbiAgICB9XG5cbiAgICBsZXQgZGVjaW1hbCA9IG5ldyBEZWNpbWFsJDEuRGVjaW1hbCh2YWx1ZSk7XG5cbiAgICBpZiAoIWRlY2ltYWwuaXNGaW5pdGUoKSkge1xuICAgICAgdGhyb3cgbmV3IGdyYXBocWwuR3JhcGhRTEVycm9yKCdEZWNpbWFsIHZhbHVlcyBtdXN0IGJlIGZpbml0ZScpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWNpbWFsO1xuICB9XG5cbn0pKTsgLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXhjaXRlbWVudC1lbmdpbmVlci9ncmFwaHFsLWlzby1kYXRlL2Jsb2IvbWFzdGVyL3NyYy91dGlscy92YWxpZGF0b3IuanMjTDEyMVxuLy8gdGhpcyBpcyBhbHNvIHdoYXQgcHJpc21hIHVzZXMgaHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvYmxvYi8yMGI1OGZlNjVkNTgxYmNiNDNjMGQ1YzI4ZDRiODljYWJjMmQ5OWIyL3BhY2thZ2VzL2NsaWVudC9zcmMvcnVudGltZS91dGlscy9jb21tb24udHMjTDEyNi1MMTI4XG5cbmNvbnN0IFJGQ18zMzM5X1JFR0VYID0gL14oXFxkezR9LSgwWzEtOV18MVswMTJdKS0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlUKFswMV1bMC05XXwyWzAtM10pOihbMC01XVswLTldKTooWzAtNV1bMC05XXw2MCkpKFxcLlxcZHsxLH0pPygoW1pdKXwoWyt8LV0oWzAxXVswLTldfDJbMC0zXSk6WzAtNV1bMC05XSkpJC87XG5cbmZ1bmN0aW9uIHBhcnNlRGF0ZShpbnB1dCkge1xuICBpZiAoIVJGQ18zMzM5X1JFR0VYLnRlc3QoaW5wdXQpKSB7XG4gICAgdGhyb3cgbmV3IGdyYXBocWwuR3JhcGhRTEVycm9yKCdEYXRlVGltZSBzY2FsYXJzIG11c3QgYmUgaW4gdGhlIGZvcm0gb2YgYSBmdWxsIElTTyA4NjAxIGRhdGUtdGltZSBzdHJpbmcnKTtcbiAgfVxuXG4gIGNvbnN0IHBhcnNlZCA9IG5ldyBEYXRlKGlucHV0KTtcblxuICBpZiAoaXNOYU4ocGFyc2VkLnZhbHVlT2YoKSkpIHtcbiAgICB0aHJvdyBuZXcgZ3JhcGhxbC5HcmFwaFFMRXJyb3IoJ0RhdGVUaW1lIHNjYWxhcnMgbXVzdCBiZSBpbiB0aGUgZm9ybSBvZiBhIGZ1bGwgSVNPIDg2MDEgZGF0ZS10aW1lIHN0cmluZycpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuY29uc3QgRGF0ZVRpbWUgPSBncmFwaHFsVHNTY2hlbWFfX25hbWVzcGFjZS5ncmFwaHFsLnNjYWxhcihuZXcgZ3JhcGhxbC5HcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdEYXRlVGltZScsXG4gIHNwZWNpZmllZEJ5VXJsOiAnaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmMzMzM5I3NlY3Rpb24tNS42JyxcblxuICBzZXJpYWxpemUodmFsdWUpIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHx8IGlzTmFOKHZhbHVlLnZhbHVlT2YoKSkpIHtcbiAgICAgIHRocm93IG5ldyBncmFwaHFsLkdyYXBoUUxFcnJvcihgdW5leHBlY3RlZCB2YWx1ZSBwcm92aWRlZCB0byBEYXRlVGltZSBzY2FsYXI6ICR7dmFsdWV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gIH0sXG5cbiAgcGFyc2VMaXRlcmFsKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmtpbmQgIT09ICdTdHJpbmdWYWx1ZScpIHtcbiAgICAgIHRocm93IG5ldyBncmFwaHFsLkdyYXBoUUxFcnJvcignRGF0ZVRpbWUgb25seSBhY2NlcHRzIHZhbHVlcyBhcyBzdHJpbmdzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlRGF0ZSh2YWx1ZS52YWx1ZSk7XG4gIH0sXG5cbiAgcGFyc2VWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IGdyYXBocWwuR3JhcGhRTEVycm9yKCdEYXRlVGltZSBvbmx5IGFjY2VwdHMgdmFsdWVzIGFzIHN0cmluZ3MnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VEYXRlKHZhbHVlKTtcbiAgfVxuXG59KSk7XG5cbnZhciBncmFwaHFsQm91bmRUb0tleXN0b25lQ29udGV4dCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBKU09OOiBKU09OLFxuICBVcGxvYWQ6IFVwbG9hZCxcbiAgRGVjaW1hbDogRGVjaW1hbCxcbiAgRGF0ZVRpbWU6IERhdGVUaW1lLFxuICBCb29sZWFuOiBhcGlXaXRob3V0Q29udGV4dC5Cb29sZWFuLFxuICBGbG9hdDogYXBpV2l0aG91dENvbnRleHQuRmxvYXQsXG4gIElEOiBhcGlXaXRob3V0Q29udGV4dC5JRCxcbiAgSW50OiBhcGlXaXRob3V0Q29udGV4dC5JbnQsXG4gIFN0cmluZzogYXBpV2l0aG91dENvbnRleHQuU3RyaW5nLFxuICAnZW51bSc6IGFwaVdpdGhvdXRDb250ZXh0W1wiZW51bVwiXSxcbiAgZW51bVZhbHVlczogYXBpV2l0aG91dENvbnRleHQuZW51bVZhbHVlcyxcbiAgYXJnOiBhcGlXaXRob3V0Q29udGV4dC5hcmcsXG4gIGlucHV0T2JqZWN0OiBhcGlXaXRob3V0Q29udGV4dC5pbnB1dE9iamVjdCxcbiAgbGlzdDogYXBpV2l0aG91dENvbnRleHQubGlzdCxcbiAgbm9uTnVsbDogYXBpV2l0aG91dENvbnRleHQubm9uTnVsbCxcbiAgc2NhbGFyOiBhcGlXaXRob3V0Q29udGV4dC5zY2FsYXIsXG4gIGJpbmRHcmFwaFFMU2NoZW1hQVBJVG9Db250ZXh0OiBncmFwaHFsVHNTY2hlbWEuYmluZEdyYXBoUUxTY2hlbWFBUElUb0NvbnRleHQsXG4gIGV4dGVuZDogZXh0ZW5kLmV4dGVuZCxcbiAgd3JhcDogZXh0ZW5kLndyYXAsXG4gIGZpZWxkOiBhcGlXaXRoQ29udGV4dC5maWVsZCxcbiAgZmllbGRzOiBhcGlXaXRoQ29udGV4dC5maWVsZHMsXG4gICdpbnRlcmZhY2UnOiBhcGlXaXRoQ29udGV4dFtcImludGVyZmFjZVwiXSxcbiAgaW50ZXJmYWNlRmllbGQ6IGFwaVdpdGhDb250ZXh0LmludGVyZmFjZUZpZWxkLFxuICBvYmplY3Q6IGFwaVdpdGhDb250ZXh0Lm9iamVjdCxcbiAgdW5pb246IGFwaVdpdGhDb250ZXh0LnVuaW9uXG59KTtcblxuZXhwb3J0cy5EYXRlVGltZSA9IERhdGVUaW1lO1xuZXhwb3J0cy5EZWNpbWFsID0gRGVjaW1hbDtcbmV4cG9ydHMuSlNPTiA9IEpTT047XG5leHBvcnRzLlVwbG9hZCA9IFVwbG9hZDtcbmV4cG9ydHMuZ3JhcGhxbEJvdW5kVG9LZXlzdG9uZUNvbnRleHQgPSBncmFwaHFsQm91bmRUb0tleXN0b25lQ29udGV4dDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar graphqlTsSchema = __webpack_require__(/*! ./graphql-ts-schema-2a220120.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\");\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\n__webpack_require__(/*! decimal.js */ \"decimal.js\");\n__webpack_require__(/*! @graphql-tools/schema */ \"@graphql-tools/schema\");\nvar apiWithoutContext = __webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\n\nconst orderDirectionEnum = apiWithoutContext[\"enum\"]({\n  name: 'OrderDirection',\n  values: apiWithoutContext.enumValues(['asc', 'desc'])\n});\nconst QueryMode = apiWithoutContext[\"enum\"]({\n  name: 'QueryMode',\n  values: apiWithoutContext.enumValues(['default', 'insensitive'])\n});\n// fieldType(dbField)(fieldInfo) => { ...fieldInfo, dbField };\nfunction fieldType(dbField) {\n  return function (graphQLInfo) {\n    return _objectSpread(_objectSpread({}, graphQLInfo), {}, {\n      dbField\n    });\n  };\n}\n\n// (even though, yes, having EnumFilter by defined as EnumNullableFilter<Enum>, would be the same type but names would show up differently in editors for example)\n\nfunction enumFilters(enumType) {\n  const optional = apiWithoutContext.inputObject({\n    name: `${enumType.graphQLType.name}NullableFilter`,\n    fields: () => ({\n      equals: apiWithoutContext.arg({\n        type: enumType\n      }),\n      in: apiWithoutContext.arg({\n        type: apiWithoutContext.list(apiWithoutContext.nonNull(enumType))\n      }),\n      notIn: apiWithoutContext.arg({\n        type: apiWithoutContext.list(apiWithoutContext.nonNull(enumType))\n      }),\n      not: apiWithoutContext.arg({\n        type: optional\n      })\n    })\n  });\n  const required = apiWithoutContext.inputObject({\n    name: `${enumType.graphQLType.name}Filter`,\n    fields: () => ({\n      equals: apiWithoutContext.arg({\n        type: enumType\n      }),\n      in: apiWithoutContext.arg({\n        type: apiWithoutContext.list(apiWithoutContext.nonNull(enumType))\n      }),\n      notIn: apiWithoutContext.arg({\n        type: apiWithoutContext.list(apiWithoutContext.nonNull(enumType))\n      }),\n      not: apiWithoutContext.arg({\n        type: optional\n      })\n    })\n  });\n  const many = apiWithoutContext.inputObject({\n    name: `${enumType.graphQLType.name}NullableListFilter`,\n    fields: () => ({\n      // can be null\n      equals: apiWithoutContext.arg({\n        type: apiWithoutContext.list(apiWithoutContext.nonNull(enumType))\n      }),\n      // can be null\n      has: apiWithoutContext.arg({\n        type: enumType\n      }),\n      hasEvery: apiWithoutContext.arg({\n        type: apiWithoutContext.list(apiWithoutContext.nonNull(enumType))\n      }),\n      hasSome: apiWithoutContext.arg({\n        type: apiWithoutContext.list(apiWithoutContext.nonNull(enumType))\n      }),\n      isEmpty: apiWithoutContext.arg({\n        type: enumType\n      })\n    })\n  });\n  return {\n    optional,\n    required,\n    many\n  };\n}\n\n// Do not manually modify this file, it is automatically generated by the package at /prisma-utils in this repo.\nconst StringNullableFilter$1 = apiWithoutContext.inputObject({\n  name: 'StringNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    contains: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    startsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    endsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    mode: apiWithoutContext.arg({\n      type: QueryMode\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: NestedStringNullableFilter$1\n    })\n  })\n});\nconst NestedStringNullableFilter$1 = apiWithoutContext.inputObject({\n  name: 'NestedStringNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    contains: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    startsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    endsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: NestedStringNullableFilter$1\n    })\n  })\n});\nconst StringFilter$1 = apiWithoutContext.inputObject({\n  name: 'StringFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    contains: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    startsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    endsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    mode: apiWithoutContext.arg({\n      type: QueryMode\n    }),\n    not: apiWithoutContext.arg({\n      type: NestedStringFilter$1\n    })\n  })\n});\nconst NestedStringFilter$1 = apiWithoutContext.inputObject({\n  name: 'NestedStringFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    contains: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    startsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    endsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    not: apiWithoutContext.arg({\n      type: NestedStringFilter$1\n    })\n  })\n});\nconst StringNullableListFilter = apiWithoutContext.inputObject({\n  name: 'StringNullableListFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    // can be null\n    has: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    hasEvery: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    hasSome: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    isEmpty: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    })\n  })\n});\nconst BoolNullableFilter$1 = apiWithoutContext.inputObject({\n  name: 'BooleanNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: BoolNullableFilter$1\n    })\n  })\n});\nconst BoolFilter$1 = apiWithoutContext.inputObject({\n  name: 'BooleanFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    }),\n    not: apiWithoutContext.arg({\n      type: BoolFilter$1\n    })\n  })\n});\nconst BoolNullableListFilter = apiWithoutContext.inputObject({\n  name: 'BooleanNullableListFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Boolean))\n    }),\n    // can be null\n    has: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    }),\n    hasEvery: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Boolean))\n    }),\n    hasSome: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Boolean))\n    }),\n    isEmpty: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    })\n  })\n});\nconst IntNullableFilter$1 = apiWithoutContext.inputObject({\n  name: 'IntNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: IntNullableFilter$1\n    })\n  })\n});\nconst IntFilter$1 = apiWithoutContext.inputObject({\n  name: 'IntFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    not: apiWithoutContext.arg({\n      type: IntFilter$1\n    })\n  })\n});\nconst IntNullableListFilter = apiWithoutContext.inputObject({\n  name: 'IntNullableListFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    // can be null\n    has: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    hasEvery: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    hasSome: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    isEmpty: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    })\n  })\n});\nconst FloatNullableFilter$1 = apiWithoutContext.inputObject({\n  name: 'FloatNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: FloatNullableFilter$1\n    })\n  })\n});\nconst FloatFilter$1 = apiWithoutContext.inputObject({\n  name: 'FloatFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    not: apiWithoutContext.arg({\n      type: FloatFilter$1\n    })\n  })\n});\nconst FloatNullableListFilter = apiWithoutContext.inputObject({\n  name: 'FloatNullableListFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    // can be null\n    has: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    hasEvery: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    hasSome: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    isEmpty: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    })\n  })\n});\nconst DateTimeNullableFilter$1 = apiWithoutContext.inputObject({\n  name: 'DateTimeNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    lt: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    lte: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    gt: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    gte: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: DateTimeNullableFilter$1\n    })\n  })\n});\nconst DateTimeFilter$1 = apiWithoutContext.inputObject({\n  name: 'DateTimeFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    lt: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    lte: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    gt: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    gte: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    not: apiWithoutContext.arg({\n      type: DateTimeFilter$1\n    })\n  })\n});\nconst DateTimeNullableListFilter = apiWithoutContext.inputObject({\n  name: 'DateTimeNullableListFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    // can be null\n    has: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    hasEvery: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    hasSome: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    isEmpty: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    })\n  })\n});\nconst DecimalNullableFilter$1 = apiWithoutContext.inputObject({\n  name: 'DecimalNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    lt: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    lte: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    gt: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    gte: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: DecimalNullableFilter$1\n    })\n  })\n});\nconst DecimalFilter$1 = apiWithoutContext.inputObject({\n  name: 'DecimalFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    lt: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    lte: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    gt: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    gte: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    not: apiWithoutContext.arg({\n      type: DecimalFilter$1\n    })\n  })\n});\nconst DecimalNullableListFilter = apiWithoutContext.inputObject({\n  name: 'DecimalNullableListFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    // can be null\n    has: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    hasEvery: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    hasSome: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    isEmpty: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    })\n  })\n});\nconst String$1 = {\n  optional: StringNullableFilter$1,\n  required: StringFilter$1,\n  many: StringNullableListFilter\n};\nconst Boolean$1 = {\n  optional: BoolNullableFilter$1,\n  required: BoolFilter$1,\n  many: BoolNullableListFilter\n};\nconst Int$1 = {\n  optional: IntNullableFilter$1,\n  required: IntFilter$1,\n  many: IntNullableListFilter\n};\nconst Float$1 = {\n  optional: FloatNullableFilter$1,\n  required: FloatFilter$1,\n  many: FloatNullableListFilter\n};\nconst DateTime$1 = {\n  optional: DateTimeNullableFilter$1,\n  required: DateTimeFilter$1,\n  many: DateTimeNullableListFilter\n};\nconst Decimal$1 = {\n  optional: DecimalNullableFilter$1,\n  required: DecimalFilter$1,\n  many: DecimalNullableListFilter\n};\n\nvar postgresql = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  String: String$1,\n  Boolean: Boolean$1,\n  Int: Int$1,\n  Float: Float$1,\n  DateTime: DateTime$1,\n  Decimal: Decimal$1,\n  'enum': enumFilters\n});\n\n// Do not manually modify this file, it is automatically generated by the package at /prisma-utils in this repo.\nconst StringNullableFilter = apiWithoutContext.inputObject({\n  name: 'StringNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    contains: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    startsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    endsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: NestedStringNullableFilter\n    })\n  })\n});\nconst NestedStringNullableFilter = apiWithoutContext.inputObject({\n  name: 'NestedStringNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    contains: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    startsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    endsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: NestedStringNullableFilter\n    })\n  })\n});\nconst StringFilter = apiWithoutContext.inputObject({\n  name: 'StringFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    contains: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    startsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    endsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    not: apiWithoutContext.arg({\n      type: NestedStringFilter\n    })\n  })\n});\nconst NestedStringFilter = apiWithoutContext.inputObject({\n  name: 'NestedStringFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.String))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    contains: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    startsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    endsWith: apiWithoutContext.arg({\n      type: apiWithoutContext.String\n    }),\n    not: apiWithoutContext.arg({\n      type: NestedStringFilter\n    })\n  })\n});\nconst BoolNullableFilter = apiWithoutContext.inputObject({\n  name: 'BooleanNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: BoolNullableFilter\n    })\n  })\n});\nconst BoolFilter = apiWithoutContext.inputObject({\n  name: 'BooleanFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Boolean\n    }),\n    not: apiWithoutContext.arg({\n      type: BoolFilter\n    })\n  })\n});\nconst IntNullableFilter = apiWithoutContext.inputObject({\n  name: 'IntNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: IntNullableFilter\n    })\n  })\n});\nconst IntFilter = apiWithoutContext.inputObject({\n  name: 'IntFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Int))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.Int\n    }),\n    not: apiWithoutContext.arg({\n      type: IntFilter\n    })\n  })\n});\nconst FloatNullableFilter = apiWithoutContext.inputObject({\n  name: 'FloatNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: FloatNullableFilter\n    })\n  })\n});\nconst FloatFilter = apiWithoutContext.inputObject({\n  name: 'FloatFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(apiWithoutContext.Float))\n    }),\n    lt: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    lte: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    gt: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    gte: apiWithoutContext.arg({\n      type: apiWithoutContext.Float\n    }),\n    not: apiWithoutContext.arg({\n      type: FloatFilter\n    })\n  })\n});\nconst DateTimeNullableFilter = apiWithoutContext.inputObject({\n  name: 'DateTimeNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    lt: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    lte: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    gt: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    gte: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: DateTimeNullableFilter\n    })\n  })\n});\nconst DateTimeFilter = apiWithoutContext.inputObject({\n  name: 'DateTimeFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.DateTime))\n    }),\n    lt: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    lte: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    gt: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    gte: apiWithoutContext.arg({\n      type: graphqlTsSchema.DateTime\n    }),\n    not: apiWithoutContext.arg({\n      type: DateTimeFilter\n    })\n  })\n});\nconst DecimalNullableFilter = apiWithoutContext.inputObject({\n  name: 'DecimalNullableFilter',\n  fields: () => ({\n    // can be null\n    equals: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    // can be null\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    // can be null\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    lt: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    lte: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    gt: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    gte: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    // can be null\n    not: apiWithoutContext.arg({\n      type: DecimalNullableFilter\n    })\n  })\n});\nconst DecimalFilter = apiWithoutContext.inputObject({\n  name: 'DecimalFilter',\n  fields: () => ({\n    equals: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    in: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    notIn: apiWithoutContext.arg({\n      type: apiWithoutContext.list(apiWithoutContext.nonNull(graphqlTsSchema.Decimal))\n    }),\n    lt: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    lte: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    gt: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    gte: apiWithoutContext.arg({\n      type: graphqlTsSchema.Decimal\n    }),\n    not: apiWithoutContext.arg({\n      type: DecimalFilter\n    })\n  })\n});\nconst String = {\n  optional: StringNullableFilter,\n  required: StringFilter\n};\nconst Boolean = {\n  optional: BoolNullableFilter,\n  required: BoolFilter\n};\nconst Int = {\n  optional: IntNullableFilter,\n  required: IntFilter\n};\nconst Float = {\n  optional: FloatNullableFilter,\n  required: FloatFilter\n};\nconst DateTime = {\n  optional: DateTimeNullableFilter,\n  required: DateTimeFilter\n};\nconst Decimal = {\n  optional: DecimalNullableFilter,\n  required: DecimalFilter\n};\n\nvar sqlite = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  String: String,\n  Boolean: Boolean,\n  Int: Int,\n  Float: Float,\n  DateTime: DateTime,\n  Decimal: Decimal,\n  'enum': enumFilters\n});\n\nexports.QueryMode = QueryMode;\nexports.fieldType = fieldType;\nexports.orderDirectionEnum = orderDirectionEnum;\nexports.postgresql = postgresql;\nexports.sqlite = sqlite;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/useInvalidFields-162d1b9c.cjs.dev.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/useInvalidFields-162d1b9c.cjs.dev.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar React = __webpack_require__(/*! react */ \"react\");\nvar isDeepEqual = __webpack_require__(/*! fast-deep-equal */ \"fast-deep-equal\");\nvar getRootGraphQLFieldsFromFieldController = __webpack_require__(/*! ./getRootGraphQLFieldsFromFieldController-47699a0d.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/getRootGraphQLFieldsFromFieldController-47699a0d.cjs.dev.js\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar isDeepEqual__default = /*#__PURE__*/_interopDefault(isDeepEqual);\n\nfunction deserializeValue(fields, itemGetter) {\n  const value = {};\n  Object.keys(fields).forEach(fieldKey => {\n    const field = fields[fieldKey];\n    const itemForField = {};\n    const errors = new Set();\n\n    for (const graphqlField of getRootGraphQLFieldsFromFieldController.getRootGraphQLFieldsFromFieldController(field.controller)) {\n      const fieldGetter = itemGetter.get(graphqlField);\n\n      if (fieldGetter.errors) {\n        fieldGetter.errors.forEach(error => {\n          errors.add(error);\n        });\n      }\n\n      itemForField[graphqlField] = fieldGetter.data;\n    }\n\n    if (errors.size) {\n      value[fieldKey] = {\n        kind: 'error',\n        errors: [...errors]\n      };\n    } else {\n      value[fieldKey] = {\n        kind: 'value',\n        value: field.controller.deserialize(itemForField)\n      };\n    }\n  });\n  return value;\n}\nfunction serializeValueToObjByFieldKey(fields, value) {\n  const obj = {};\n  Object.keys(fields).map(fieldKey => {\n    const val = value[fieldKey];\n\n    if (val.kind === 'value') {\n      obj[fieldKey] = fields[fieldKey].controller.serialize(val.value);\n    }\n  });\n  return obj;\n}\n\nfunction useChangedFieldsAndDataForUpdate(fields, itemGetter, value) {\n  const serializedValuesFromItem = React.useMemo(() => {\n    const value = deserializeValue(fields, itemGetter);\n    return serializeValueToObjByFieldKey(fields, value);\n  }, [fields, itemGetter]);\n  const serializedFieldValues = React.useMemo(() => {\n    return serializeValueToObjByFieldKey(fields, value);\n  }, [value, fields]);\n  return React.useMemo(() => {\n    let changedFields = new Set();\n    Object.keys(serializedFieldValues).forEach(fieldKey => {\n      let isEqual = isDeepEqual__default[\"default\"](serializedFieldValues[fieldKey], serializedValuesFromItem[fieldKey]);\n\n      if (!isEqual) {\n        changedFields.add(fieldKey);\n      }\n    });\n    const dataForUpdate = {};\n    changedFields.forEach(fieldKey => {\n      Object.assign(dataForUpdate, serializedFieldValues[fieldKey]);\n    });\n    return {\n      changedFields: changedFields,\n      dataForUpdate\n    };\n  }, [serializedFieldValues, serializedValuesFromItem]);\n}\n\nfunction useInvalidFields(fields, value) {\n  return React.useMemo(() => {\n    const invalidFields = new Set();\n    Object.keys(value).forEach(fieldPath => {\n      const val = value[fieldPath];\n\n      if (val.kind === 'value') {\n        const validateFn = fields[fieldPath].controller.validate;\n\n        if (validateFn) {\n          const result = validateFn(val.value);\n\n          if (result === false) {\n            invalidFields.add(fieldPath);\n          }\n        }\n      }\n    });\n    return invalidFields;\n  }, [fields, value]);\n}\n\nexports.deserializeValue = deserializeValue;\nexports.serializeValueToObjByFieldKey = serializeValueToObjByFieldKey;\nexports.useChangedFieldsAndDataForUpdate = useChangedFieldsAndDataForUpdate;\nexports.useInvalidFields = useInvalidFields;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvdXNlSW52YWxpZEZpZWxkcy0xNjJkMWI5Yy5janMuZGV2LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxvQkFBTztBQUMzQixrQkFBa0IsbUJBQU8sQ0FBQyx3Q0FBaUI7QUFDM0MsOENBQThDLG1CQUFPLENBQUMsa0xBQStEOztBQUVySCwrQkFBK0IsaUNBQWlDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIOztBQUVBLHdCQUF3QjtBQUN4QixxQ0FBcUM7QUFDckMsd0NBQXdDO0FBQ3hDLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZGlzdC91c2VJbnZhbGlkRmllbGRzLTE2MmQxYjljLmNqcy5kZXYuanM/NTY4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgaXNEZWVwRXF1YWwgPSByZXF1aXJlKCdmYXN0LWRlZXAtZXF1YWwnKTtcbnZhciBnZXRSb290R3JhcGhRTEZpZWxkc0Zyb21GaWVsZENvbnRyb2xsZXIgPSByZXF1aXJlKCcuL2dldFJvb3RHcmFwaFFMRmllbGRzRnJvbUZpZWxkQ29udHJvbGxlci00NzY5OWEwZC5janMuZGV2LmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG52YXIgaXNEZWVwRXF1YWxfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0KGlzRGVlcEVxdWFsKTtcblxuZnVuY3Rpb24gZGVzZXJpYWxpemVWYWx1ZShmaWVsZHMsIGl0ZW1HZXR0ZXIpIHtcbiAgY29uc3QgdmFsdWUgPSB7fTtcbiAgT2JqZWN0LmtleXMoZmllbGRzKS5mb3JFYWNoKGZpZWxkS2V5ID0+IHtcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tmaWVsZEtleV07XG4gICAgY29uc3QgaXRlbUZvckZpZWxkID0ge307XG4gICAgY29uc3QgZXJyb3JzID0gbmV3IFNldCgpO1xuXG4gICAgZm9yIChjb25zdCBncmFwaHFsRmllbGQgb2YgZ2V0Um9vdEdyYXBoUUxGaWVsZHNGcm9tRmllbGRDb250cm9sbGVyLmdldFJvb3RHcmFwaFFMRmllbGRzRnJvbUZpZWxkQ29udHJvbGxlcihmaWVsZC5jb250cm9sbGVyKSkge1xuICAgICAgY29uc3QgZmllbGRHZXR0ZXIgPSBpdGVtR2V0dGVyLmdldChncmFwaHFsRmllbGQpO1xuXG4gICAgICBpZiAoZmllbGRHZXR0ZXIuZXJyb3JzKSB7XG4gICAgICAgIGZpZWxkR2V0dGVyLmVycm9ycy5mb3JFYWNoKGVycm9yID0+IHtcbiAgICAgICAgICBlcnJvcnMuYWRkKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGl0ZW1Gb3JGaWVsZFtncmFwaHFsRmllbGRdID0gZmllbGRHZXR0ZXIuZGF0YTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JzLnNpemUpIHtcbiAgICAgIHZhbHVlW2ZpZWxkS2V5XSA9IHtcbiAgICAgICAga2luZDogJ2Vycm9yJyxcbiAgICAgICAgZXJyb3JzOiBbLi4uZXJyb3JzXVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWVbZmllbGRLZXldID0ge1xuICAgICAgICBraW5kOiAndmFsdWUnLFxuICAgICAgICB2YWx1ZTogZmllbGQuY29udHJvbGxlci5kZXNlcmlhbGl6ZShpdGVtRm9yRmllbGQpXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZVZhbHVlVG9PYmpCeUZpZWxkS2V5KGZpZWxkcywgdmFsdWUpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIE9iamVjdC5rZXlzKGZpZWxkcykubWFwKGZpZWxkS2V5ID0+IHtcbiAgICBjb25zdCB2YWwgPSB2YWx1ZVtmaWVsZEtleV07XG5cbiAgICBpZiAodmFsLmtpbmQgPT09ICd2YWx1ZScpIHtcbiAgICAgIG9ialtmaWVsZEtleV0gPSBmaWVsZHNbZmllbGRLZXldLmNvbnRyb2xsZXIuc2VyaWFsaXplKHZhbC52YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gdXNlQ2hhbmdlZEZpZWxkc0FuZERhdGFGb3JVcGRhdGUoZmllbGRzLCBpdGVtR2V0dGVyLCB2YWx1ZSkge1xuICBjb25zdCBzZXJpYWxpemVkVmFsdWVzRnJvbUl0ZW0gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGRlc2VyaWFsaXplVmFsdWUoZmllbGRzLCBpdGVtR2V0dGVyKTtcbiAgICByZXR1cm4gc2VyaWFsaXplVmFsdWVUb09iakJ5RmllbGRLZXkoZmllbGRzLCB2YWx1ZSk7XG4gIH0sIFtmaWVsZHMsIGl0ZW1HZXR0ZXJdKTtcbiAgY29uc3Qgc2VyaWFsaXplZEZpZWxkVmFsdWVzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZVZhbHVlVG9PYmpCeUZpZWxkS2V5KGZpZWxkcywgdmFsdWUpO1xuICB9LCBbdmFsdWUsIGZpZWxkc10pO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IGNoYW5nZWRGaWVsZHMgPSBuZXcgU2V0KCk7XG4gICAgT2JqZWN0LmtleXMoc2VyaWFsaXplZEZpZWxkVmFsdWVzKS5mb3JFYWNoKGZpZWxkS2V5ID0+IHtcbiAgICAgIGxldCBpc0VxdWFsID0gaXNEZWVwRXF1YWxfX2RlZmF1bHRbXCJkZWZhdWx0XCJdKHNlcmlhbGl6ZWRGaWVsZFZhbHVlc1tmaWVsZEtleV0sIHNlcmlhbGl6ZWRWYWx1ZXNGcm9tSXRlbVtmaWVsZEtleV0pO1xuXG4gICAgICBpZiAoIWlzRXF1YWwpIHtcbiAgICAgICAgY2hhbmdlZEZpZWxkcy5hZGQoZmllbGRLZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGFGb3JVcGRhdGUgPSB7fTtcbiAgICBjaGFuZ2VkRmllbGRzLmZvckVhY2goZmllbGRLZXkgPT4ge1xuICAgICAgT2JqZWN0LmFzc2lnbihkYXRhRm9yVXBkYXRlLCBzZXJpYWxpemVkRmllbGRWYWx1ZXNbZmllbGRLZXldKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhbmdlZEZpZWxkczogY2hhbmdlZEZpZWxkcyxcbiAgICAgIGRhdGFGb3JVcGRhdGVcbiAgICB9O1xuICB9LCBbc2VyaWFsaXplZEZpZWxkVmFsdWVzLCBzZXJpYWxpemVkVmFsdWVzRnJvbUl0ZW1dKTtcbn1cblxuZnVuY3Rpb24gdXNlSW52YWxpZEZpZWxkcyhmaWVsZHMsIHZhbHVlKSB7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBpbnZhbGlkRmllbGRzID0gbmV3IFNldCgpO1xuICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGZpZWxkUGF0aCA9PiB7XG4gICAgICBjb25zdCB2YWwgPSB2YWx1ZVtmaWVsZFBhdGhdO1xuXG4gICAgICBpZiAodmFsLmtpbmQgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGVGbiA9IGZpZWxkc1tmaWVsZFBhdGhdLmNvbnRyb2xsZXIudmFsaWRhdGU7XG5cbiAgICAgICAgaWYgKHZhbGlkYXRlRm4pIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZUZuKHZhbC52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaW52YWxpZEZpZWxkcy5hZGQoZmllbGRQYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaW52YWxpZEZpZWxkcztcbiAgfSwgW2ZpZWxkcywgdmFsdWVdKTtcbn1cblxuZXhwb3J0cy5kZXNlcmlhbGl6ZVZhbHVlID0gZGVzZXJpYWxpemVWYWx1ZTtcbmV4cG9ydHMuc2VyaWFsaXplVmFsdWVUb09iakJ5RmllbGRLZXkgPSBzZXJpYWxpemVWYWx1ZVRvT2JqQnlGaWVsZEtleTtcbmV4cG9ydHMudXNlQ2hhbmdlZEZpZWxkc0FuZERhdGFGb3JVcGRhdGUgPSB1c2VDaGFuZ2VkRmllbGRzQW5kRGF0YUZvclVwZGF0ZTtcbmV4cG9ydHMudXNlSW52YWxpZEZpZWxkcyA9IHVzZUludmFsaWRGaWVsZHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/useInvalidFields-162d1b9c.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/dist/utils-1eb8e360.cjs.dev.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/dist/utils-1eb8e360.cjs.dev.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar React = __webpack_require__(/*! react */ \"react\");\n\nfunction useFormattedInput(config, _ref) {\n  let {\n    value,\n    onChange,\n    onBlur,\n    onFocus\n  } = _ref;\n\n  // typeof value === 'string' implies the unparsed form\n  // typeof value !== 'string' implies the parsed form\n  if (typeof value === 'string' && typeof config.parse(value) !== 'string') {\n    throw new Error(`Valid values must be passed in as a parsed value, not a raw value. The value you passed was \\`${JSON.stringify(value)}\\`, you should pass \\`${JSON.stringify(config.parse(value))}\\` instead`);\n  }\n\n  let [internalValueState, setInternalValueState] = React.useState(() => typeof value === 'string' ? value : config.format(value));\n  const [isFocused, setIsFocused] = React.useState(false);\n\n  if (typeof value === 'string' && value !== internalValueState) {\n    setInternalValueState(value);\n  } // If the value is not a string, we know it's in the parsed form\n\n\n  if (typeof value !== 'string') {\n    const formatted = config.format(value); // When the input is blurred, we want to show always show the formatted\n    // version so if we're not focussed and the formatted version is different\n    // to the current version, we need to update it.\n\n    if (!isFocused && formatted !== internalValueState) {\n      setInternalValueState(formatted);\n    }\n\n    const parsedInternal = config.parse(internalValueState); // We updating the internal value here because the\n    // external value has changed.\n\n    if (typeof parsedInternal !== 'string' && config.format(parsedInternal) !== formatted) {\n      setInternalValueState(formatted);\n    }\n  }\n\n  return {\n    value: internalValueState,\n\n    onChange(event) {\n      const value = event.target.value;\n      const parsed = config.parse(value);\n      onChange(parsed);\n      setInternalValueState(value);\n    },\n\n    onFocus(event) {\n      onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n      setIsFocused(true);\n    },\n\n    onBlur(event) {\n      onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n      setIsFocused(false); // this isn't strictly necessary since we already do this in render\n      // this just saves another rerender after setIsFocused(false)\n\n      if (typeof value !== 'string') {\n        setInternalValueState(config.format(value));\n      }\n    }\n\n  };\n}\n\nexports.useFormattedInput = useFormattedInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2Rpc3QvdXRpbHMtMWViOGUzNjAuY2pzLmRldi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsb0JBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0EscUhBQXFILHNCQUFzQix3QkFBd0Isb0NBQW9DO0FBQ3ZNOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDZEQUE2RDtBQUM3RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZGlzdC91dGlscy0xZWI4ZTM2MC5janMuZGV2LmpzPzY5ZmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5mdW5jdGlvbiB1c2VGb3JtYXR0ZWRJbnB1dChjb25maWcsIF9yZWYpIHtcbiAgbGV0IHtcbiAgICB2YWx1ZSxcbiAgICBvbkNoYW5nZSxcbiAgICBvbkJsdXIsXG4gICAgb25Gb2N1c1xuICB9ID0gX3JlZjtcblxuICAvLyB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIGltcGxpZXMgdGhlIHVucGFyc2VkIGZvcm1cbiAgLy8gdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyBpbXBsaWVzIHRoZSBwYXJzZWQgZm9ybVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgY29uZmlnLnBhcnNlKHZhbHVlKSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFZhbGlkIHZhbHVlcyBtdXN0IGJlIHBhc3NlZCBpbiBhcyBhIHBhcnNlZCB2YWx1ZSwgbm90IGEgcmF3IHZhbHVlLiBUaGUgdmFsdWUgeW91IHBhc3NlZCB3YXMgXFxgJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9XFxgLCB5b3Ugc2hvdWxkIHBhc3MgXFxgJHtKU09OLnN0cmluZ2lmeShjb25maWcucGFyc2UodmFsdWUpKX1cXGAgaW5zdGVhZGApO1xuICB9XG5cbiAgbGV0IFtpbnRlcm5hbFZhbHVlU3RhdGUsIHNldEludGVybmFsVmFsdWVTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBjb25maWcuZm9ybWF0KHZhbHVlKSk7XG4gIGNvbnN0IFtpc0ZvY3VzZWQsIHNldElzRm9jdXNlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09IGludGVybmFsVmFsdWVTdGF0ZSkge1xuICAgIHNldEludGVybmFsVmFsdWVTdGF0ZSh2YWx1ZSk7XG4gIH0gLy8gSWYgdGhlIHZhbHVlIGlzIG5vdCBhIHN0cmluZywgd2Uga25vdyBpdCdzIGluIHRoZSBwYXJzZWQgZm9ybVxuXG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBmb3JtYXR0ZWQgPSBjb25maWcuZm9ybWF0KHZhbHVlKTsgLy8gV2hlbiB0aGUgaW5wdXQgaXMgYmx1cnJlZCwgd2Ugd2FudCB0byBzaG93IGFsd2F5cyBzaG93IHRoZSBmb3JtYXR0ZWRcbiAgICAvLyB2ZXJzaW9uIHNvIGlmIHdlJ3JlIG5vdCBmb2N1c3NlZCBhbmQgdGhlIGZvcm1hdHRlZCB2ZXJzaW9uIGlzIGRpZmZlcmVudFxuICAgIC8vIHRvIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIG5lZWQgdG8gdXBkYXRlIGl0LlxuXG4gICAgaWYgKCFpc0ZvY3VzZWQgJiYgZm9ybWF0dGVkICE9PSBpbnRlcm5hbFZhbHVlU3RhdGUpIHtcbiAgICAgIHNldEludGVybmFsVmFsdWVTdGF0ZShmb3JtYXR0ZWQpO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcnNlZEludGVybmFsID0gY29uZmlnLnBhcnNlKGludGVybmFsVmFsdWVTdGF0ZSk7IC8vIFdlIHVwZGF0aW5nIHRoZSBpbnRlcm5hbCB2YWx1ZSBoZXJlIGJlY2F1c2UgdGhlXG4gICAgLy8gZXh0ZXJuYWwgdmFsdWUgaGFzIGNoYW5nZWQuXG5cbiAgICBpZiAodHlwZW9mIHBhcnNlZEludGVybmFsICE9PSAnc3RyaW5nJyAmJiBjb25maWcuZm9ybWF0KHBhcnNlZEludGVybmFsKSAhPT0gZm9ybWF0dGVkKSB7XG4gICAgICBzZXRJbnRlcm5hbFZhbHVlU3RhdGUoZm9ybWF0dGVkKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbHVlOiBpbnRlcm5hbFZhbHVlU3RhdGUsXG5cbiAgICBvbkNoYW5nZShldmVudCkge1xuICAgICAgY29uc3QgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICBjb25zdCBwYXJzZWQgPSBjb25maWcucGFyc2UodmFsdWUpO1xuICAgICAgb25DaGFuZ2UocGFyc2VkKTtcbiAgICAgIHNldEludGVybmFsVmFsdWVTdGF0ZSh2YWx1ZSk7XG4gICAgfSxcblxuICAgIG9uRm9jdXMoZXZlbnQpIHtcbiAgICAgIG9uRm9jdXMgPT09IG51bGwgfHwgb25Gb2N1cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25Gb2N1cyhldmVudCk7XG4gICAgICBzZXRJc0ZvY3VzZWQodHJ1ZSk7XG4gICAgfSxcblxuICAgIG9uQmx1cihldmVudCkge1xuICAgICAgb25CbHVyID09PSBudWxsIHx8IG9uQmx1ciA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CbHVyKGV2ZW50KTtcbiAgICAgIHNldElzRm9jdXNlZChmYWxzZSk7IC8vIHRoaXMgaXNuJ3Qgc3RyaWN0bHkgbmVjZXNzYXJ5IHNpbmNlIHdlIGFscmVhZHkgZG8gdGhpcyBpbiByZW5kZXJcbiAgICAgIC8vIHRoaXMganVzdCBzYXZlcyBhbm90aGVyIHJlcmVuZGVyIGFmdGVyIHNldElzRm9jdXNlZChmYWxzZSlcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2V0SW50ZXJuYWxWYWx1ZVN0YXRlKGNvbmZpZy5mb3JtYXQodmFsdWUpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfTtcbn1cblxuZXhwb3J0cy51c2VGb3JtYXR0ZWRJbnB1dCA9IHVzZUZvcm1hdHRlZElucHV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/dist/utils-1eb8e360.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/password/views/dist/keystone-next-keystone-fields-types-password-views.cjs.dev.js":
/*!*************************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/password/views/dist/keystone-next-keystone-fields-types-password-views.cjs.dev.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar button = __webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar EyeIcon = __webpack_require__(/*! @keystone-ui/icons/icons/EyeIcon */ \"@keystone-ui/icons/icons/EyeIcon\");\nvar EyeOffIcon = __webpack_require__(/*! @keystone-ui/icons/icons/EyeOffIcon */ \"@keystone-ui/icons/icons/EyeOffIcon\");\nvar XIcon = __webpack_require__(/*! @keystone-ui/icons/icons/XIcon */ \"@keystone-ui/icons/icons/XIcon\");\nvar segmentedControl = __webpack_require__(/*! @keystone-ui/segmented-control */ \"@keystone-ui/segmented-control\");\nvar dumbPasswords = __webpack_require__(/*! dumb-passwords */ \"dumb-passwords\");\nvar CellContainer = __webpack_require__(/*! ../../../../../dist/CellContainer-453254b5.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\n__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n__webpack_require__(/*! next/router */ \"next/router\");\n__webpack_require__(/*! next/link */ \"../../node_modules/next/link.js\");\n__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"../../node_modules/@babel/runtime/helpers/defineProperty.js\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlertTriangleIcon */ \"@keystone-ui/icons/icons/AlertTriangleIcon\");\n__webpack_require__(/*! @keystone-ui/toast */ \"@keystone-ui/toast\");\n__webpack_require__(/*! @keystone-ui/loading */ \"@keystone-ui/loading\");\n__webpack_require__(/*! @keystone-ui/modals */ \"@keystone-ui/modals\");\n__webpack_require__(/*! apollo-upload-client */ \"apollo-upload-client\");\n__webpack_require__(/*! @emotion/hash */ \"@emotion/hash\");\n__webpack_require__(/*! ../../../../../dist/sqlite-a2385a81.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js\");\n__webpack_require__(/*! ../../../../../dist/graphql-ts-schema-2a220120.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\");\n__webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n__webpack_require__(/*! ../../../../../dist/admin-meta-graphql-9f9a9c11.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js\");\n__webpack_require__(/*! @keystone-ui/popover */ \"@keystone-ui/popover\");\n__webpack_require__(/*! @keystone-ui/icons/icons/MoreHorizontalIcon */ \"@keystone-ui/icons/icons/MoreHorizontalIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ChevronRightIcon */ \"@keystone-ui/icons/icons/ChevronRightIcon\");\n__webpack_require__(/*! ../../../../../dist/SignoutButton-081410d6.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js\");\n__webpack_require__(/*! fast-deep-equal */ \"fast-deep-equal\");\n__webpack_require__(/*! @keystone-ui/notice */ \"@keystone-ui/notice\");\n__webpack_require__(/*! decimal.js */ \"decimal.js\");\n__webpack_require__(/*! @graphql-tools/schema */ \"@graphql-tools/schema\");\n__webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\n__webpack_require__(/*! @graphql-ts/schema */ \"@graphql-ts/schema\");\n__webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\n__webpack_require__(/*! graphql-upload/public/GraphQLUpload.js */ \"graphql-upload/public/GraphQLUpload.js\");\n__webpack_require__(/*! graphql */ \"graphql\");\n__webpack_require__(/*! @graphql-ts/extend */ \"@graphql-ts/extend\");\n__webpack_require__(/*! @graphql-ts/schema/api-with-context */ \"@graphql-ts/schema/api-with-context\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar dumbPasswords__default = /*#__PURE__*/_interopDefault(dumbPasswords);\n\nfunction validate(value, validation, fieldLabel) {\n  if (value.kind === 'initial' && (value.isSet === null || value.isSet === true)) {\n    return undefined;\n  }\n\n  if (value.kind === 'initial' && validation !== null && validation !== void 0 && validation.isRequired) {\n    return `${fieldLabel} is required`;\n  }\n\n  if (value.kind === 'editing' && value.confirm !== value.value) {\n    return `The passwords do not match`;\n  }\n\n  if (value.kind === 'editing') {\n    const val = value.value;\n\n    if (val.length < validation.length.min) {\n      if (validation.length.min === 1) {\n        return `${fieldLabel} must not be empty`;\n      }\n\n      return `${fieldLabel} must be at least ${validation.length.min} characters long`;\n    }\n\n    if (validation.length.max !== null && val.length > validation.length.max) {\n      return `${fieldLabel} must be no longer than ${validation.length.min} characters`;\n    }\n\n    if (validation.match && !validation.match.regex.test(val)) {\n      return validation.match.explanation;\n    }\n\n    if (validation.rejectCommon && dumbPasswords__default[\"default\"].check(val)) {\n      return `${fieldLabel} is too common and is not allowed`;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isSetText(isSet) {\n  return isSet == null ? 'Access Denied' : isSet ? 'Is set' : 'Is not set';\n}\n\nconst Field = _ref => {\n  let {\n    field,\n    value,\n    onChange,\n    forceValidation,\n    autoFocus\n  } = _ref;\n  const [showInputValue, setShowInputValue] = React.useState(false);\n  const [touchedFirstInput, setTouchedFirstInput] = React.useState(false);\n  const [touchedSecondInput, setTouchedSecondInput] = React.useState(false);\n  const shouldShowValidation = forceValidation || touchedFirstInput && touchedSecondInput;\n  const validationMessage = shouldShowValidation ? validate(value, field.validation, field.label) : undefined;\n  const validation = validationMessage && core.jsx(core.Text, {\n    color: \"red600\",\n    size: \"small\"\n  }, validationMessage);\n  const inputType = showInputValue ? 'text' : 'password';\n  return core.jsx(fields.FieldContainer, {\n    as: \"fieldset\"\n  }, core.jsx(fields.FieldLabel, {\n    as: \"legend\"\n  }, field.label), onChange === undefined ? isSetText(value.isSet) : value.kind === 'initial' ? core.jsx(React.Fragment, null, core.jsx(button.Button, {\n    autoFocus: autoFocus,\n    onClick: () => {\n      onChange({\n        kind: 'editing',\n        confirm: '',\n        value: '',\n        isSet: value.isSet\n      });\n    }\n  }, value.isSet ? 'Change Password' : 'Set Password'), validation) : core.jsx(core.Stack, {\n    gap: \"small\"\n  }, core.jsx(\"div\", {\n    css: {\n      display: 'flex'\n    }\n  }, core.jsx(core.VisuallyHidden, {\n    as: \"label\",\n    htmlFor: `${field.path}-new-password`\n  }, \"New Password\"), core.jsx(fields.TextInput, {\n    id: `${field.path}-new-password`,\n    autoFocus: true,\n    invalid: validationMessage !== undefined,\n    type: inputType,\n    value: value.value,\n    placeholder: \"New Password\",\n    onChange: event => {\n      onChange(_objectSpread(_objectSpread({}, value), {}, {\n        value: event.target.value\n      }));\n    },\n    onBlur: () => {\n      setTouchedFirstInput(true);\n    }\n  }), core.jsx(Spacer, null), core.jsx(core.VisuallyHidden, {\n    as: \"label\",\n    htmlFor: `${field.path}-confirm-password`\n  }, \"Confirm Password\"), core.jsx(fields.TextInput, {\n    id: `${field.path}-confirm-password`,\n    invalid: validationMessage !== undefined,\n    type: inputType,\n    value: value.confirm,\n    placeholder: \"Confirm Password\",\n    onChange: event => {\n      onChange(_objectSpread(_objectSpread({}, value), {}, {\n        confirm: event.target.value\n      }));\n    },\n    onBlur: () => {\n      setTouchedSecondInput(true);\n    }\n  }), core.jsx(Spacer, null), core.jsx(button.Button, {\n    onClick: () => {\n      setShowInputValue(!showInputValue);\n    }\n  }, core.jsx(core.VisuallyHidden, null, showInputValue ? 'Hide Text' : 'Show Text'), showInputValue ? core.jsx(EyeOffIcon.EyeOffIcon, null) : core.jsx(EyeIcon.EyeIcon, null)), core.jsx(Spacer, null), core.jsx(button.Button, {\n    onClick: () => {\n      onChange({\n        kind: 'initial',\n        isSet: value.isSet\n      });\n    }\n  }, core.jsx(core.VisuallyHidden, null, \"Cancel\"), core.jsx(XIcon.XIcon, null))), validation));\n};\nconst Cell = _ref2 => {\n  var _item$field$path;\n\n  let {\n    item,\n    field\n  } = _ref2;\n  return core.jsx(CellContainer.CellContainer, null, isSetText((_item$field$path = item[field.path]) === null || _item$field$path === void 0 ? void 0 : _item$field$path.isSet));\n};\nconst CardValue = _ref3 => {\n  var _item$field$path2;\n\n  let {\n    item,\n    field\n  } = _ref3;\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), isSetText((_item$field$path2 = item[field.path]) === null || _item$field$path2 === void 0 ? void 0 : _item$field$path2.isSet));\n};\nconst controller = config => {\n  const validation = _objectSpread(_objectSpread({}, config.fieldMeta.validation), {}, {\n    match: config.fieldMeta.validation.match === null ? null : {\n      regex: new RegExp(config.fieldMeta.validation.match.regex.source, config.fieldMeta.validation.match.regex.flags),\n      explanation: config.fieldMeta.validation.match.explanation\n    }\n  });\n\n  return {\n    path: config.path,\n    label: config.label,\n    graphqlSelection: `${config.path} {isSet}`,\n    validation,\n    defaultValue: {\n      kind: 'initial',\n      isSet: false\n    },\n    validate: state => validate(state, validation, config.label) === undefined,\n    deserialize: data => {\n      var _data$config$path$isS, _data$config$path;\n\n      return {\n        kind: 'initial',\n        isSet: (_data$config$path$isS = (_data$config$path = data[config.path]) === null || _data$config$path === void 0 ? void 0 : _data$config$path.isSet) !== null && _data$config$path$isS !== void 0 ? _data$config$path$isS : null\n      };\n    },\n    serialize: value => {\n      if (value.kind === 'initial') return {};\n      return {\n        [config.path]: value.value\n      };\n    },\n    filter: config.fieldMeta.isNullable === false ? undefined : {\n      Filter(props) {\n        return core.jsx(segmentedControl.SegmentedControl, {\n          selectedIndex: Number(props.value),\n          onChange: value => {\n            props.onChange(!!value);\n          },\n          segments: ['Is Not Set', 'Is Set']\n        });\n      },\n\n      graphql: _ref4 => {\n        let {\n          value\n        } = _ref4;\n        return {\n          [config.path]: {\n            isSet: value\n          }\n        };\n      },\n\n      Label(_ref5) {\n        let {\n          value\n        } = _ref5;\n        return value ? 'is set' : 'is not set';\n      },\n\n      types: {\n        is_set: {\n          label: 'Is Set',\n          initialValue: true\n        }\n      }\n    }\n  };\n};\n\nconst Spacer = () => {\n  const {\n    spacing\n  } = core.useTheme();\n  return core.jsx(\"div\", {\n    css: {\n      width: spacing.small,\n      flexShrink: 0\n    }\n  });\n};\n\nexports.CardValue = CardValue;\nexports.Cell = Cell;\nexports.Field = Field;\nexports.controller = controller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/password/views/dist/keystone-next-keystone-fields-types-password-views.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/password/views/dist/keystone-next-keystone-fields-types-password-views.cjs.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/password/views/dist/keystone-next-keystone-fields-types-password-views.cjs.js ***!
  \*********************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./keystone-next-keystone-fields-types-password-views.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/fields/types/password/views/dist/keystone-next-keystone-fields-types-password-views.cjs.dev.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy9wYXNzd29yZC92aWV3cy9kaXN0L2tleXN0b25lLW5leHQta2V5c3RvbmUtZmllbGRzLXR5cGVzLXBhc3N3b3JkLXZpZXdzLmNqcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsd1BBQTJGO0FBQzdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9Aa2V5c3RvbmUtbmV4dC9rZXlzdG9uZS9maWVsZHMvdHlwZXMvcGFzc3dvcmQvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1wYXNzd29yZC12aWV3cy5janMuanM/NTU5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1wYXNzd29yZC12aWV3cy5janMucHJvZC5qc1wiKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4va2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1maWVsZHMtdHlwZXMtcGFzc3dvcmQtdmlld3MuY2pzLmRldi5qc1wiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/password/views/dist/keystone-next-keystone-fields-types-password-views.cjs.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect/dist/keystone-next-keystone-fields-types-relationship-views-RelationshipSelect.cjs.dev.js":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect/dist/keystone-next-keystone-fields-types-relationship-views-RelationshipSelect.cjs.dev.js ***!
  \***********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar _objectWithoutProperties = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\nvar _toPropertyKey = __webpack_require__(/*! @babel/runtime/helpers/toPropertyKey */ \"../../node_modules/@babel/runtime/helpers/toPropertyKey.js\");\n__webpack_require__(/*! intersection-observer */ \"intersection-observer\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar uuid = __webpack_require__(/*! uuid */ \"uuid\");\nvar client = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n\nconst _excluded = [\"children\"];\n\nfunction useIntersectionObserver(cb, ref) {\n  const cbRef = React.useRef(cb);\n  React.useEffect(() => {\n    cbRef.current = cb;\n  });\n  React.useEffect(() => {\n    let observer = new IntersectionObserver(function () {\n      return cbRef.current(...arguments);\n    }, {});\n    let node = ref.current;\n\n    if (node !== null) {\n      observer.observe(node);\n      return () => observer.unobserve(node);\n    }\n  }, [ref]);\n}\n\nconst idValidators = {\n  uuid: uuid.validate,\n\n  cuid(value) {\n    return value.startsWith('c');\n  },\n\n  autoincrement(value) {\n    return /^\\d+$/.test(value);\n  }\n\n};\n\nfunction useDebouncedValue(value, limitMs) {\n  const [debouncedValue, setDebouncedValue] = React.useState(() => value);\n  React.useEffect(() => {\n    let id = setTimeout(() => {\n      setDebouncedValue(() => value);\n    }, limitMs);\n    return () => {\n      clearTimeout(id);\n    };\n  }, [value, limitMs]);\n  return debouncedValue;\n}\n\nfunction useFilter(search, list) {\n  return React.useMemo(() => {\n    let conditions = [];\n\n    if (search.length) {\n      const idFieldKind = list.fields.id.controller.idFieldKind;\n      const trimmedSearch = search.trim();\n      const isValidId = idValidators[idFieldKind](trimmedSearch);\n\n      if (isValidId) {\n        conditions.push({\n          id: {\n            equals: trimmedSearch\n          }\n        });\n      }\n\n      for (const field of Object.values(list.fields)) {\n        if (field.search !== null) {\n          conditions.push({\n            [field.path]: {\n              contains: trimmedSearch,\n              mode: field.search === 'insensitive' ? 'insensitive' : undefined\n            }\n          });\n        }\n      }\n    }\n\n    return {\n      OR: conditions\n    };\n  }, [search, list]);\n}\n\nconst initialItemsToLoad = 10;\nconst subsequentItemsToLoad = 50;\nconst idField = '____id____';\nconst labelField = '____label____';\nconst LoadingIndicatorContext = /*#__PURE__*/React.createContext({\n  count: 0,\n  ref: () => {}\n});\nconst RelationshipSelect = _ref => {\n  var _data$items;\n\n  let {\n    autoFocus,\n    controlShouldRenderValue,\n    isDisabled,\n    isLoading,\n    list,\n    placeholder,\n    portalMenu,\n    state,\n    extraSelection = ''\n  } = _ref;\n  const [search, setSearch] = React.useState(''); // note it's important that this is in state rather than a ref\n  // because we want a re-render if the element changes\n  // so that we can register the intersection observer\n  // on the right element\n\n  const [loadingIndicatorElement, setLoadingIndicatorElement] = React.useState(null);\n  const QUERY = client.gql`\n    query RelationshipSelect($where: ${list.gqlNames.whereInputName}!, $take: Int!, $skip: Int!) {\n      items: ${list.gqlNames.listQueryName}(where: $where, take: $take, skip: $skip) {\n        ${idField}: id\n        ${labelField}: ${list.labelField}\n        ${extraSelection}\n      }\n      count: ${list.gqlNames.listQueryCountName}(where: $where)\n    }\n  `;\n  const debouncedSearch = useDebouncedValue(search, 200);\n  const where = useFilter(debouncedSearch, list);\n  const link = client.useApolloClient().link; // we're using a local apollo client here because writing a global implementation of the typePolicies\n  // would require making assumptions about how pagination should work which won't always be right\n\n  const apolloClient = React.useMemo(() => new client.ApolloClient({\n    link,\n    cache: new client.InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            [list.gqlNames.listQueryName]: {\n              keyArgs: ['where'],\n              merge: (existing, incoming, _ref2) => {\n                let {\n                  args\n                } = _ref2;\n                const merged = existing ? existing.slice() : [];\n                const {\n                  skip\n                } = args;\n\n                for (let i = 0; i < incoming.length; ++i) {\n                  merged[skip + i] = incoming[i];\n                }\n\n                return merged;\n              }\n            }\n          }\n        }\n      }\n    })\n  }), [link, list.gqlNames.listQueryName]);\n  const {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = client.useQuery(QUERY, {\n    fetchPolicy: 'network-only',\n    variables: {\n      where,\n      take: initialItemsToLoad,\n      skip: 0\n    },\n    client: apolloClient\n  });\n  const count = (data === null || data === void 0 ? void 0 : data.count) || 0;\n  const options = (data === null || data === void 0 ? void 0 : (_data$items = data.items) === null || _data$items === void 0 ? void 0 : _data$items.map(_ref3 => {\n    let {\n      [idField]: value,\n      [labelField]: label\n    } = _ref3,\n        data = _objectWithoutProperties(_ref3, [idField, labelField].map(_toPropertyKey));\n\n    return {\n      value,\n      label: label || value,\n      data\n    };\n  })) || [];\n  const loadingIndicatorContextVal = React.useMemo(() => ({\n    count,\n    ref: setLoadingIndicatorElement\n  }), [count]); // we want to avoid fetching more again and `loading` from Apollo\n  // doesn't seem to become true when fetching more\n\n  const [lastFetchMore, setLastFetchMore] = React.useState(null);\n  useIntersectionObserver(_ref4 => {\n    let [{\n      isIntersecting\n    }] = _ref4;\n    const skip = data === null || data === void 0 ? void 0 : data.items.length;\n\n    if (!loading && skip && isIntersecting && options.length < count && ((lastFetchMore === null || lastFetchMore === void 0 ? void 0 : lastFetchMore.extraSelection) !== extraSelection || (lastFetchMore === null || lastFetchMore === void 0 ? void 0 : lastFetchMore.where) !== where || (lastFetchMore === null || lastFetchMore === void 0 ? void 0 : lastFetchMore.list) !== list || (lastFetchMore === null || lastFetchMore === void 0 ? void 0 : lastFetchMore.skip) !== skip)) {\n      const QUERY = client.gql`\n              query RelationshipSelectMore($where: ${list.gqlNames.whereInputName}!, $take: Int!, $skip: Int!) {\n                items: ${list.gqlNames.listQueryName}(where: $where, take: $take, skip: $skip) {\n                  ${labelField}: ${list.labelField}\n                  ${idField}: id\n                  ${extraSelection}\n                }\n              }\n            `;\n      setLastFetchMore({\n        extraSelection,\n        list,\n        skip,\n        where\n      });\n      fetchMore({\n        query: QUERY,\n        variables: {\n          where,\n          take: subsequentItemsToLoad,\n          skip\n        }\n      }).then(() => {\n        setLastFetchMore(null);\n      }).catch(() => {\n        setLastFetchMore(null);\n      });\n    }\n  }, {\n    current: loadingIndicatorElement\n  }); // TODO: better error UI\n  // TODO: Handle permission errors\n  // (ie; user has permission to read this relationship field, but\n  // not the related list, or some items on the list)\n\n  if (error) {\n    return core.jsx(\"span\", null, \"Error\");\n  }\n\n  if (state.kind === 'one') {\n    return core.jsx(LoadingIndicatorContext.Provider, {\n      value: loadingIndicatorContextVal\n    }, core.jsx(fields.Select // this is necessary because react-select passes a second argument to onInputChange\n    // and useState setters log a warning if a second argument is passed\n    , {\n      onInputChange: val => setSearch(val),\n      isLoading: loading || isLoading,\n      autoFocus: autoFocus,\n      components: relationshipSelectComponents,\n      portalMenu: portalMenu,\n      value: state.value ? {\n        value: state.value.id,\n        label: state.value.label,\n        // @ts-ignore\n        data: state.value.data\n      } : null,\n      options: options,\n      onChange: value => {\n        state.onChange(value ? {\n          id: value.value,\n          label: value.label,\n          data: value.data\n        } : null);\n      },\n      placeholder: placeholder,\n      controlShouldRenderValue: controlShouldRenderValue,\n      isClearable: controlShouldRenderValue,\n      isDisabled: isDisabled\n    }));\n  }\n\n  return core.jsx(LoadingIndicatorContext.Provider, {\n    value: loadingIndicatorContextVal\n  }, core.jsx(fields.MultiSelect // this is necessary because react-select passes a second argument to onInputChange\n  // and useState setters log a warning if a second argument is passed\n  , {\n    onInputChange: val => setSearch(val),\n    isLoading: loading || isLoading,\n    autoFocus: autoFocus,\n    components: relationshipSelectComponents,\n    portalMenu: portalMenu,\n    value: state.value.map(value => ({\n      value: value.id,\n      label: value.label,\n      data: value.data\n    })),\n    options: options,\n    onChange: value => {\n      state.onChange(value.map(x => ({\n        id: x.value,\n        label: x.label,\n        data: x.data\n      })));\n    },\n    placeholder: placeholder,\n    controlShouldRenderValue: controlShouldRenderValue,\n    isClearable: controlShouldRenderValue,\n    isDisabled: isDisabled\n  }));\n};\nconst relationshipSelectComponents = {\n  MenuList: _ref5 => {\n    let {\n      children\n    } = _ref5,\n        props = _objectWithoutProperties(_ref5, _excluded);\n\n    const {\n      count,\n      ref\n    } = React.useContext(LoadingIndicatorContext);\n    return core.jsx(fields.selectComponents.MenuList, props, children, core.jsx(\"div\", {\n      css: {\n        textAlign: 'center'\n      },\n      ref: ref\n    }, props.options.length < count && core.jsx(\"span\", {\n      css: {\n        padding: 8\n      }\n    }, \"Loading...\")));\n  }\n};\n\nexports.RelationshipSelect = RelationshipSelect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect/dist/keystone-next-keystone-fields-types-relationship-views-RelationshipSelect.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/relationship/views/dist/keystone-next-keystone-fields-types-relationship-views.cjs.dev.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/relationship/views/dist/keystone-next-keystone-fields-types-relationship-views.cjs.dev.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar button = __webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar modals = __webpack_require__(/*! @keystone-ui/modals */ \"@keystone-ui/modals\");\nvar adminUi_router_dist_keystoneNextKeystoneAdminUiRouter = __webpack_require__(/*! ../../../../../admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js\");\nvar adminUi_context_dist_keystoneNextKeystoneAdminUiContext = __webpack_require__(/*! ../../../../../admin-ui/context/dist/keystone-next-keystone-admin-ui-context.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/admin-ui/context/dist/keystone-next-keystone-admin-ui-context.cjs.dev.js\");\nvar client = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\nvar CellContainer = __webpack_require__(/*! ../../../../../dist/CellContainer-453254b5.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"../../node_modules/@babel/runtime/helpers/defineProperty.js\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlertTriangleIcon */ \"@keystone-ui/icons/icons/AlertTriangleIcon\");\n__webpack_require__(/*! next/link */ \"../../node_modules/next/link.js\");\nvar _objectWithoutProperties = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n__webpack_require__(/*! next/router */ \"next/router\");\n__webpack_require__(/*! @keystone-ui/popover */ \"@keystone-ui/popover\");\n__webpack_require__(/*! @keystone-ui/icons/icons/MoreHorizontalIcon */ \"@keystone-ui/icons/icons/MoreHorizontalIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ChevronRightIcon */ \"@keystone-ui/icons/icons/ChevronRightIcon\");\n__webpack_require__(/*! ../../../../../dist/SignoutButton-081410d6.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js\");\nvar CreateItemDrawer = __webpack_require__(/*! ../../../../../dist/CreateItemDrawer-abdd4766.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CreateItemDrawer-abdd4766.cjs.dev.js\");\n__webpack_require__(/*! @keystone-ui/notice */ \"@keystone-ui/notice\");\nvar tooltip = __webpack_require__(/*! @keystone-ui/tooltip */ \"@keystone-ui/tooltip\");\nvar loading = __webpack_require__(/*! @keystone-ui/loading */ \"@keystone-ui/loading\");\nvar dataGetter = __webpack_require__(/*! ../../../../../dist/dataGetter-9fbe2f8e.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/dataGetter-9fbe2f8e.cjs.dev.js\");\nvar getRootGraphQLFieldsFromFieldController = __webpack_require__(/*! ../../../../../dist/getRootGraphQLFieldsFromFieldController-47699a0d.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/getRootGraphQLFieldsFromFieldController-47699a0d.cjs.dev.js\");\nvar isDeepEqual = __webpack_require__(/*! fast-deep-equal */ \"fast-deep-equal\");\nvar fields_types_relationship_views_RelationshipSelect_dist_keystoneNextKeystoneFieldsTypesRelationshipViewsRelationshipSelect = __webpack_require__(/*! ../RelationshipSelect/dist/keystone-next-keystone-fields-types-relationship-views-RelationshipSelect.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect/dist/keystone-next-keystone-fields-types-relationship-views-RelationshipSelect.cjs.dev.js\");\nvar toast = __webpack_require__(/*! @keystone-ui/toast */ \"@keystone-ui/toast\");\nvar Fields = __webpack_require__(/*! ../../../../../dist/Fields-6e862a67.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/Fields-6e862a67.cjs.dev.js\");\nvar useInvalidFields = __webpack_require__(/*! ../../../../../dist/useInvalidFields-162d1b9c.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/useInvalidFields-162d1b9c.cjs.dev.js\");\n__webpack_require__(/*! apollo-upload-client */ \"apollo-upload-client\");\n__webpack_require__(/*! @emotion/hash */ \"@emotion/hash\");\n__webpack_require__(/*! ../../../../../dist/sqlite-a2385a81.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js\");\n__webpack_require__(/*! ../../../../../dist/graphql-ts-schema-2a220120.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\");\n__webpack_require__(/*! ../../../../../dist/admin-meta-graphql-9f9a9c11.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js\");\nvar GraphQLErrorNotice = __webpack_require__(/*! ../../../../../dist/GraphQLErrorNotice-6a857a3a.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/GraphQLErrorNotice-6a857a3a.cjs.dev.js\");\n__webpack_require__(/*! ../../../../../dist/core-11c9ffea.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/core-11c9ffea.cjs.dev.js\");\n__webpack_require__(/*! decimal.js */ \"decimal.js\");\n__webpack_require__(/*! @graphql-tools/schema */ \"@graphql-tools/schema\");\n__webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\n__webpack_require__(/*! @graphql-ts/schema */ \"@graphql-ts/schema\");\n__webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\n__webpack_require__(/*! graphql-upload/public/GraphQLUpload.js */ \"graphql-upload/public/GraphQLUpload.js\");\n__webpack_require__(/*! graphql */ \"graphql\");\n__webpack_require__(/*! @graphql-ts/extend */ \"@graphql-ts/extend\");\n__webpack_require__(/*! @graphql-ts/schema/api-with-context */ \"@graphql-ts/schema/api-with-context\");\n__webpack_require__(/*! @emotion/weak-memoize */ \"@emotion/weak-memoize\");\n__webpack_require__(/*! @babel/runtime/helpers/toPropertyKey */ \"../../node_modules/@babel/runtime/helpers/toPropertyKey.js\");\n__webpack_require__(/*! intersection-observer */ \"intersection-observer\");\n__webpack_require__(/*! uuid */ \"uuid\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }\n\nvar isDeepEqual__default = /*#__PURE__*/_interopDefault(isDeepEqual);\n\nfunction useItemState(_ref) {\n  let {\n    selectedFields,\n    localList,\n    id,\n    field\n  } = _ref;\n  const {\n    data,\n    error,\n    loading\n  } = client.useQuery(client.gql`query($id: ID!) {\n  item: ${localList.gqlNames.itemQueryName}(where: {id: $id}) {\n    id\n    relationship: ${field.path} {\n      ${selectedFields}\n    }\n  }\n}`, {\n    variables: {\n      id\n    },\n    errorPolicy: 'all'\n  });\n  const {\n    itemsArrFromData,\n    relationshipGetter\n  } = React.useMemo(() => {\n    const dataGetter$1 = dataGetter.makeDataGetter(data, error === null || error === void 0 ? void 0 : error.graphQLErrors);\n    const relationshipGetter = dataGetter$1.get('item').get('relationship');\n    const isMany = Array.isArray(relationshipGetter.data);\n    const itemsArrFromData = (isMany ? relationshipGetter.data.map((_, i) => relationshipGetter.get(i)) : [relationshipGetter]).filter(x => {\n      var _x$data;\n\n      return ((_x$data = x.data) === null || _x$data === void 0 ? void 0 : _x$data.id) != null;\n    });\n    return {\n      relationshipGetter,\n      itemsArrFromData\n    };\n  }, [data, error]);\n  let [{\n    items,\n    itemsArrFromData: itemsArrFromDataState\n  }, setItemsState] = React.useState({\n    itemsArrFromData: [],\n    items: {}\n  });\n\n  if (itemsArrFromDataState !== itemsArrFromData) {\n    let newItems = {};\n    itemsArrFromData.forEach(item => {\n      var _items$item$data$id, _item$errors, _initialItemInState$e;\n\n      const initialItemInState = (_items$item$data$id = items[item.data.id]) === null || _items$item$data$id === void 0 ? void 0 : _items$item$data$id.fromInitialQuery;\n\n      if ((items[item.data.id] && initialItemInState || !items[item.data.id]) && (!initialItemInState || item.data !== initialItemInState.data || ((_item$errors = item.errors) === null || _item$errors === void 0 ? void 0 : _item$errors.length) !== ((_initialItemInState$e = initialItemInState.errors) === null || _initialItemInState$e === void 0 ? void 0 : _initialItemInState$e.length) || (item.errors || []).some((err, i) => {\n        var _initialItemInState$e2;\n\n        return err !== ((_initialItemInState$e2 = initialItemInState.errors) === null || _initialItemInState$e2 === void 0 ? void 0 : _initialItemInState$e2[i]);\n      }))) {\n        newItems[item.data.id] = {\n          current: item,\n          fromInitialQuery: item\n        };\n      } else {\n        newItems[item.data.id] = items[item.data.id];\n      }\n    });\n    items = newItems;\n    setItemsState({\n      items: newItems,\n      itemsArrFromData\n    });\n  }\n\n  return {\n    items: React.useMemo(() => {\n      const itemsToReturn = {};\n      Object.keys(items).forEach(id => {\n        itemsToReturn[id] = items[id].current;\n      });\n      return itemsToReturn;\n    }, [items]),\n    setItems: React.useCallback(items => {\n      setItemsState(state => {\n        let itemsForState = {};\n        Object.keys(items).forEach(id => {\n          var _state$items$id;\n\n          if (items[id] === ((_state$items$id = state.items[id]) === null || _state$items$id === void 0 ? void 0 : _state$items$id.current)) {\n            itemsForState[id] = state.items[id];\n          } else {\n            var _state$items$id2;\n\n            itemsForState[id] = {\n              current: items[id],\n              fromInitialQuery: (_state$items$id2 = state.items[id]) === null || _state$items$id2 === void 0 ? void 0 : _state$items$id2.fromInitialQuery\n            };\n          }\n        });\n        return {\n          itemsArrFromData: state.itemsArrFromData,\n          items: itemsForState\n        };\n      });\n    }, [setItemsState]),\n    state: (() => {\n      if (loading) {\n        return {\n          kind: 'loading'\n        };\n      }\n\n      if (error !== null && error !== void 0 && error.networkError) {\n        return {\n          kind: 'error',\n          message: error.networkError.message\n        };\n      }\n\n      if (field.many && !relationshipGetter.data) {\n        var _relationshipGetter$e;\n\n        return {\n          kind: 'error',\n          message: ((_relationshipGetter$e = relationshipGetter.errors) === null || _relationshipGetter$e === void 0 ? void 0 : _relationshipGetter$e[0].message) || ''\n        };\n      }\n\n      return {\n        kind: 'loaded'\n      };\n    })()\n  };\n}\nfunction useFieldsObj(list, fields) {\n  return React.useMemo(() => {\n    const editFields = {};\n    fields === null || fields === void 0 ? void 0 : fields.forEach(fieldPath => {\n      editFields[fieldPath] = list.fields[fieldPath];\n    });\n    return editFields;\n  }, [fields, list.fields]);\n}\n\nfunction InlineEdit(_ref) {\n  var _itemGetter$errors;\n\n  let {\n    fields,\n    list,\n    selectedFields,\n    itemGetter,\n    onCancel,\n    onSave\n  } = _ref;\n  const fieldsObj = useFieldsObj(list, fields);\n  const [update, {\n    loading,\n    error\n  }] = client.useMutation(client.gql`mutation ($data: ${list.gqlNames.updateInputName}!, $id: ID!) {\n          item: ${list.gqlNames.updateMutationName}(where: { id: $id }, data: $data) {\n            ${selectedFields}\n          }\n        }`, {\n    errorPolicy: 'all'\n  });\n  const [state, setValue] = React.useState(() => {\n    const value = useInvalidFields.deserializeValue(fieldsObj, itemGetter);\n    return {\n      value,\n      item: itemGetter.data\n    };\n  });\n\n  if (state.item !== itemGetter.data && (_itemGetter$errors = itemGetter.errors) !== null && _itemGetter$errors !== void 0 && _itemGetter$errors.every(x => {\n    var _x$path;\n\n    return ((_x$path = x.path) === null || _x$path === void 0 ? void 0 : _x$path.length) !== 1;\n  })) {\n    const value = useInvalidFields.deserializeValue(fieldsObj, itemGetter);\n    setValue({\n      value,\n      item: itemGetter.data\n    });\n  }\n\n  const {\n    changedFields,\n    dataForUpdate\n  } = useInvalidFields.useChangedFieldsAndDataForUpdate(fieldsObj, itemGetter, state.value);\n  const invalidFields = useInvalidFields.useInvalidFields(fieldsObj, state.value);\n  const [forceValidation, setForceValidation] = React.useState(false);\n  const toasts = toast.useToasts();\n  const saveButtonProps = {\n    isLoading: loading,\n    weight: 'bold',\n    size: 'small',\n    tone: 'active',\n    onClick: () => {\n      const newForceValidation = invalidFields.size !== 0;\n      setForceValidation(newForceValidation);\n      if (newForceValidation) return;\n      update({\n        variables: {\n          data: dataForUpdate,\n          id: itemGetter.get('id').data\n        }\n      }).then(_ref2 => {\n        let {\n          data,\n          errors\n        } = _ref2;\n        // we're checking for path.length === 1 because errors with a path larger than 1 will be field level errors\n        // which are handled seperately and do not indicate a failure to update the item\n        const error = errors === null || errors === void 0 ? void 0 : errors.find(x => {\n          var _x$path2;\n\n          return ((_x$path2 = x.path) === null || _x$path2 === void 0 ? void 0 : _x$path2.length) === 1;\n        });\n\n        if (error) {\n          toasts.addToast({\n            title: 'Failed to update item',\n            tone: 'negative',\n            message: error.message\n          });\n        } else {\n          toasts.addToast({\n            title: data.item[list.labelField] || data.item.id,\n            tone: 'positive',\n            message: 'Saved successfully'\n          });\n          onSave(dataGetter.makeDataGetter(data, errors).get('item'));\n        }\n      }).catch(err => {\n        toasts.addToast({\n          title: 'Failed to update item',\n          tone: 'negative',\n          message: err.message\n        });\n      });\n    },\n    children: 'Save'\n  };\n  return core.jsx(core.Stack, {\n    gap: \"xlarge\"\n  }, error && core.jsx(GraphQLErrorNotice.GraphQLErrorNotice, {\n    networkError: error === null || error === void 0 ? void 0 : error.networkError // we're checking for path.length === 1 because errors with a path larger than 1 will be field level errors\n    // which are handled seperately and do not indicate a failure to update the item\n    ,\n    errors: error === null || error === void 0 ? void 0 : error.graphQLErrors.filter(x => {\n      var _x$path3;\n\n      return ((_x$path3 = x.path) === null || _x$path3 === void 0 ? void 0 : _x$path3.length) === 1;\n    })\n  }), core.jsx(Fields.Fields, {\n    fieldModes: null,\n    fields: fieldsObj,\n    forceValidation: forceValidation,\n    invalidFields: invalidFields,\n    onChange: React.useCallback(value => {\n      setValue(state => ({\n        item: state.item,\n        value: value(state.value)\n      }));\n    }, [setValue]),\n    value: state.value\n  }), core.jsx(core.Stack, {\n    across: true,\n    gap: \"small\"\n  }, changedFields.size ? core.jsx(button.Button, saveButtonProps) : core.jsx(tooltip.Tooltip, {\n    content: \"No fields have been modified so you cannot save changes\"\n  }, props => core.jsx(button.Button, _extends({}, props, saveButtonProps, {\n    // making onClick undefined instead of making the button disabled so the button can be focussed so keyboard users can see the tooltip\n    onClick: undefined\n  }))), core.jsx(button.Button, {\n    size: \"small\",\n    weight: \"none\",\n    onClick: onCancel\n  }, \"Cancel\")));\n}\n\n/** @jsxRuntime classic */\nfunction InlineCreate(_ref) {\n  let {\n    list,\n    onCancel,\n    onCreate,\n    fields: fieldPaths,\n    selectedFields\n  } = _ref;\n  const toasts = toast.useToasts();\n  const fields = useFieldsObj(list, fieldPaths);\n  const [createItem, {\n    loading,\n    error\n  }] = client.useMutation(client.gql`mutation($data: ${list.gqlNames.createInputName}!) {\n      item: ${list.gqlNames.createMutationName}(data: $data) {\n        ${selectedFields}\n    }\n  }`);\n  const [value, setValue] = React.useState(() => {\n    const value = {};\n    Object.keys(fields).forEach(fieldPath => {\n      value[fieldPath] = {\n        kind: 'value',\n        value: fields[fieldPath].controller.defaultValue\n      };\n    });\n    return value;\n  });\n  const invalidFields = useInvalidFields.useInvalidFields(fields, value);\n  const [forceValidation, setForceValidation] = React.useState(false);\n\n  const onCreateClick = () => {\n    const newForceValidation = invalidFields.size !== 0;\n    setForceValidation(newForceValidation);\n    if (newForceValidation) return;\n    const data = {};\n    const allSerializedValues = useInvalidFields.serializeValueToObjByFieldKey(fields, value);\n    Object.keys(allSerializedValues).forEach(fieldPath => {\n      const {\n        controller\n      } = fields[fieldPath];\n      const serialized = allSerializedValues[fieldPath];\n\n      if (!isDeepEqual__default[\"default\"](serialized, controller.serialize(controller.defaultValue))) {\n        Object.assign(data, serialized);\n      }\n    });\n    createItem({\n      variables: {\n        data\n      }\n    }).then(_ref2 => {\n      let {\n        data,\n        errors\n      } = _ref2;\n      // we're checking for path.length === 1 because errors with a path larger than 1 will be field level errors\n      // which are handled seperately and do not indicate a failure to update the item\n      const error = errors === null || errors === void 0 ? void 0 : errors.find(x => {\n        var _x$path;\n\n        return ((_x$path = x.path) === null || _x$path === void 0 ? void 0 : _x$path.length) === 1;\n      });\n\n      if (error) {\n        toasts.addToast({\n          title: 'Failed to create item',\n          tone: 'negative',\n          message: error.message\n        });\n      } else {\n        toasts.addToast({\n          title: data.item[list.labelField] || data.item.id,\n          tone: 'positive',\n          message: 'Saved successfully'\n        });\n        onCreate(dataGetter.makeDataGetter(data, errors).get('item'));\n      }\n    }).catch(err => {\n      toasts.addToast({\n        title: 'Failed to update item',\n        tone: 'negative',\n        message: err.message\n      });\n    });\n  };\n\n  return core.jsx(core.Stack, {\n    gap: \"xlarge\"\n  }, error && core.jsx(GraphQLErrorNotice.GraphQLErrorNotice, {\n    networkError: error === null || error === void 0 ? void 0 : error.networkError,\n    errors: error === null || error === void 0 ? void 0 : error.graphQLErrors\n  }), core.jsx(Fields.Fields, {\n    fieldModes: null,\n    fields: fields,\n    forceValidation: forceValidation,\n    invalidFields: invalidFields,\n    onChange: setValue,\n    value: value\n  }), core.jsx(core.Stack, {\n    gap: \"small\",\n    across: true\n  }, core.jsx(button.Button, {\n    isLoading: loading,\n    size: \"small\",\n    tone: \"positive\",\n    weight: \"bold\",\n    onClick: onCreateClick\n  }, \"Create \", list.singular), core.jsx(button.Button, {\n    size: \"small\",\n    weight: \"none\",\n    onClick: onCancel\n  }, \"Cancel\")));\n}\n\nconst _excluded = [\"mode\"];\nconst CardContainer = core.forwardRefWithAs((_ref, ref) => {\n  let {\n    mode = 'view'\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const {\n    tones\n  } = core.useTheme();\n  const tone = tones[mode === 'edit' ? 'active' : mode === 'create' ? 'positive' : 'passive'];\n  return core.jsx(core.Box, _extends({\n    ref: ref,\n    paddingLeft: \"xlarge\",\n    css: {\n      position: 'relative',\n      ':before': {\n        content: '\" \"',\n        backgroundColor: tone.border,\n        borderRadius: 4,\n        width: 4,\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        bottom: 0,\n        zIndex: 1\n      }\n    }\n  }, props));\n});\nfunction Cards(_ref2) {\n  var _field$display$inline;\n\n  let {\n    localList,\n    field,\n    foreignList,\n    id,\n    value,\n    onChange,\n    forceValidation\n  } = _ref2;\n  let selectedFields = [...new Set([...field.display.cardFields, ...(((_field$display$inline = field.display.inlineEdit) === null || _field$display$inline === void 0 ? void 0 : _field$display$inline.fields) || [])])].map(fieldPath => {\n    return foreignList.fields[fieldPath].controller.graphqlSelection;\n  }).join('\\n');\n\n  if (!field.display.cardFields.includes('id')) {\n    selectedFields += '\\nid';\n  }\n\n  if (!field.display.cardFields.includes(foreignList.labelField) && foreignList.labelField !== 'id') {\n    selectedFields += `\\n${foreignList.labelField}`;\n  }\n\n  const {\n    items,\n    setItems,\n    state: itemsState\n  } = useItemState({\n    selectedFields,\n    localList,\n    id,\n    field\n  });\n  const client$1 = client.useApolloClient();\n  const [isLoadingLazyItems, setIsLoadingLazyItems] = React.useState(false);\n  const [showConnectItems, setShowConnectItems] = React.useState(false);\n  const [hideConnectItemsLabel, setHideConnectItemsLabel] = React.useState('Cancel');\n  const editRef = React.useRef(null);\n  const isMountedRef = React.useRef(false);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  });\n  React.useEffect(() => {\n    if (value.itemsBeingEdited) {\n      var _editRef$current;\n\n      editRef === null || editRef === void 0 ? void 0 : (_editRef$current = editRef.current) === null || _editRef$current === void 0 ? void 0 : _editRef$current.focus();\n    }\n  }, [value]);\n\n  if (itemsState.kind === 'loading') {\n    return core.jsx(\"div\", null, core.jsx(loading.LoadingDots, {\n      label: `Loading items for ${field.label} field`\n    }));\n  }\n\n  if (itemsState.kind === 'error') {\n    return core.jsx(\"span\", {\n      css: {\n        color: 'red'\n      }\n    }, itemsState.message);\n  }\n\n  return core.jsx(core.Stack, {\n    gap: \"xlarge\"\n  }, core.jsx(core.Stack, {\n    as: \"ul\",\n    gap: \"xlarge\",\n    css: {\n      padding: 0,\n      marginBottom: 0,\n      li: {\n        listStyle: 'none'\n      }\n    }\n  }, [...value.currentIds].map((id, index) => {\n    const itemGetter = items[id];\n    const isEditMode = !!(onChange !== undefined) && value.itemsBeingEdited.has(id);\n    return core.jsx(CardContainer, {\n      role: \"status\",\n      mode: isEditMode ? 'edit' : 'view'\n    }, core.jsx(core.VisuallyHidden, {\n      as: \"h2\"\n    }, `${field.label} ${index + 1} ${isEditMode ? 'edit' : 'view'} mode`), isEditMode ? core.jsx(InlineEdit, {\n      list: foreignList,\n      fields: field.display.inlineEdit.fields,\n      onSave: newItemGetter => {\n        setItems(_objectSpread(_objectSpread({}, items), {}, {\n          [id]: newItemGetter\n        }));\n        const itemsBeingEdited = new Set(value.itemsBeingEdited);\n        itemsBeingEdited.delete(id);\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          itemsBeingEdited\n        }));\n      },\n      selectedFields: selectedFields,\n      itemGetter: itemGetter,\n      onCancel: () => {\n        const itemsBeingEdited = new Set(value.itemsBeingEdited);\n        itemsBeingEdited.delete(id);\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          itemsBeingEdited\n        }));\n      }\n    }) : core.jsx(React.Fragment, null, core.jsx(core.Stack, {\n      gap: \"xlarge\"\n    }, field.display.cardFields.map(fieldPath => {\n      const field = foreignList.fields[fieldPath];\n      const itemForField = {};\n\n      for (const graphqlField of getRootGraphQLFieldsFromFieldController.getRootGraphQLFieldsFromFieldController(field.controller)) {\n        const fieldGetter = itemGetter.get(graphqlField);\n\n        if (fieldGetter.errors) {\n          const errorMessage = fieldGetter.errors[0].message;\n          return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), errorMessage);\n        }\n\n        itemForField[graphqlField] = fieldGetter.data;\n      }\n\n      return core.jsx(field.views.CardValue, {\n        key: fieldPath,\n        field: field.controller,\n        item: itemForField\n      });\n    })), core.jsx(core.Stack, {\n      across: true,\n      gap: \"small\",\n      marginTop: \"xlarge\"\n    }, field.display.inlineEdit && onChange !== undefined && core.jsx(button.Button, {\n      size: \"small\",\n      disabled: onChange === undefined,\n      onClick: () => {\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          itemsBeingEdited: new Set([...value.itemsBeingEdited, id])\n        }));\n      },\n      tone: \"active\"\n    }, \"Edit\"), field.display.removeMode === 'disconnect' && onChange !== undefined && core.jsx(tooltip.Tooltip, {\n      content: \"This item will not be deleted. It will only be removed from this field.\"\n    }, props => core.jsx(button.Button, _extends({\n      size: \"small\",\n      disabled: onChange === undefined,\n      onClick: () => {\n        const currentIds = new Set(value.currentIds);\n        currentIds.delete(id);\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          currentIds\n        }));\n      }\n    }, props, {\n      tone: \"negative\"\n    }), \"Remove\")), field.display.linkToItem && core.jsx(button.Button, {\n      size: \"small\",\n      weight: \"link\",\n      tone: \"active\",\n      css: {\n        textDecoration: 'none'\n      },\n      as: adminUi_router_dist_keystoneNextKeystoneAdminUiRouter.Link,\n      href: `/${foreignList.path}/${id}`\n    }, \"View \", foreignList.singular, \" details\"))));\n  })), onChange === undefined ? null : field.display.inlineConnect && showConnectItems ? core.jsx(CardContainer, {\n    mode: \"edit\"\n  }, core.jsx(core.Stack, {\n    gap: \"small\",\n    marginY: \"medium\",\n    across: true,\n    css: {\n      width: '100%',\n      justifyContent: 'space-between',\n      'div:first-of-type': {\n        flex: '2'\n      }\n    }\n  }, core.jsx(fields_types_relationship_views_RelationshipSelect_dist_keystoneNextKeystoneFieldsTypesRelationshipViewsRelationshipSelect.RelationshipSelect, {\n    autoFocus: true,\n    controlShouldRenderValue: isLoadingLazyItems,\n    isDisabled: onChange === undefined,\n    list: foreignList,\n    isLoading: isLoadingLazyItems,\n    placeholder: `Select a ${foreignList.singular}`,\n    portalMenu: true,\n    state: {\n      kind: 'many',\n\n      async onChange(options) {\n        // TODO: maybe use the extraSelection prop on RelationshipSelect here\n        const itemsToFetchAndConnect = [];\n        options.forEach(item => {\n          if (!value.currentIds.has(item.id)) {\n            itemsToFetchAndConnect.push(item.id);\n          }\n        });\n\n        if (itemsToFetchAndConnect.length) {\n          try {\n            const {\n              data,\n              errors\n            } = await client$1.query({\n              query: client.gql`query ($ids: [ID!]!) {\n                      items: ${foreignList.gqlNames.listQueryName}(where: { id: { in: $ids }}) {\n                        ${selectedFields}\n                      }\n                    }`,\n              variables: {\n                ids: itemsToFetchAndConnect\n              }\n            });\n\n            if (isMountedRef.current) {\n              const dataGetters = dataGetter.makeDataGetter(data, errors);\n              const itemsDataGetter = dataGetters.get('items');\n\n              let newItems = _objectSpread({}, items);\n\n              let newCurrentIds = field.many ? new Set(value.currentIds) : new Set();\n\n              if (Array.isArray(itemsDataGetter.data)) {\n                itemsDataGetter.data.forEach((item, i) => {\n                  if ((item === null || item === void 0 ? void 0 : item.id) != null) {\n                    newCurrentIds.add(item.id);\n                    newItems[item.id] = itemsDataGetter.get(i);\n                  }\n                });\n              }\n\n              if (newCurrentIds.size) {\n                setItems(newItems);\n                onChange(_objectSpread(_objectSpread({}, value), {}, {\n                  currentIds: newCurrentIds\n                }));\n                setHideConnectItemsLabel('Done');\n              }\n            }\n          } finally {\n            if (isMountedRef.current) {\n              setIsLoadingLazyItems(false);\n            }\n          }\n        }\n      },\n\n      value: (() => {\n        let options = [];\n        Object.keys(items).forEach(id => {\n          if (value.currentIds.has(id)) {\n            options.push({\n              id,\n              label: id\n            });\n          }\n        });\n        return options;\n      })()\n    }\n  }), core.jsx(button.Button, {\n    onClick: () => setShowConnectItems(false)\n  }, hideConnectItemsLabel))) : value.itemBeingCreated ? core.jsx(CardContainer, {\n    mode: \"create\"\n  }, core.jsx(InlineCreate, {\n    selectedFields: selectedFields,\n    fields: field.display.inlineCreate.fields,\n    list: foreignList,\n    onCancel: () => {\n      onChange(_objectSpread(_objectSpread({}, value), {}, {\n        itemBeingCreated: false\n      }));\n    },\n    onCreate: itemGetter => {\n      const id = itemGetter.data.id;\n      setItems(_objectSpread(_objectSpread({}, items), {}, {\n        [id]: itemGetter\n      }));\n      onChange(_objectSpread(_objectSpread({}, value), {}, {\n        itemBeingCreated: false,\n        currentIds: field.many ? new Set([...value.currentIds, id]) : new Set([id])\n      }));\n    }\n  })) : field.display.inlineCreate || field.display.inlineConnect ? core.jsx(CardContainer, {\n    mode: \"create\"\n  }, core.jsx(core.Stack, {\n    gap: \"small\",\n    marginTop: \"medium\",\n    across: true\n  }, field.display.inlineCreate && core.jsx(button.Button, {\n    size: \"small\",\n    disabled: onChange === undefined,\n    tone: \"positive\",\n    onClick: () => {\n      onChange(_objectSpread(_objectSpread({}, value), {}, {\n        itemBeingCreated: true\n      }));\n    }\n  }, \"Create \", foreignList.singular), field.display.inlineConnect && core.jsx(button.Button, {\n    size: \"small\",\n    weight: \"none\",\n    tone: \"passive\",\n    onClick: () => {\n      setShowConnectItems(true);\n      setHideConnectItemsLabel('Cancel');\n    }\n  }, \"Link existing \", foreignList.singular))) : null, forceValidation && core.jsx(core.Text, {\n    color: \"red600\",\n    size: \"small\"\n  }, \"You must finish creating and editing any related \", foreignList.label.toLowerCase(), \" before saving the \", localList.singular.toLowerCase()));\n}\n\nfunction LinkToRelatedItems(_ref) {\n  var _value$value;\n\n  let {\n    itemId,\n    value,\n    list,\n    refFieldKey\n  } = _ref;\n\n  function constructQuery(_ref2) {\n    let {\n      refFieldKey,\n      itemId,\n      value\n    } = _ref2;\n\n    if (!!refFieldKey && itemId) {\n      return `!${refFieldKey}_matches=\"${itemId}\"`;\n    }\n\n    return `!id_in=\"${(value === null || value === void 0 ? void 0 : value.value).slice(0, 100).map(_ref3 => {\n      let {\n        id\n      } = _ref3;\n      return id;\n    }).join(',')}\"`;\n  }\n\n  const commonProps = {\n    size: 'small',\n    tone: 'active',\n    weight: 'link'\n  };\n\n  if (value.kind === 'many') {\n    const query = constructQuery({\n      refFieldKey,\n      value,\n      itemId\n    });\n    return core.jsx(button.Button, _extends({}, commonProps, {\n      as: adminUi_router_dist_keystoneNextKeystoneAdminUiRouter.Link,\n      href: `/${list.path}?${query}`\n    }), \"View related \", list.plural);\n  }\n\n  return core.jsx(button.Button, _extends({}, commonProps, {\n    as: adminUi_router_dist_keystoneNextKeystoneAdminUiRouter.Link,\n    href: `/${list.path}/${(_value$value = value.value) === null || _value$value === void 0 ? void 0 : _value$value.id}`\n  }), \"View \", list.singular, \" details\");\n}\n\nconst RelationshipLinkButton = _ref4 => {\n  let {\n    href,\n    children\n  } = _ref4;\n  return core.jsx(button.Button, {\n    css: {\n      padding: 0,\n      height: 'auto'\n    },\n    weight: \"link\",\n    tone: \"active\",\n    as: adminUi_router_dist_keystoneNextKeystoneAdminUiRouter.Link,\n    href: href\n  }, children);\n};\n\nconst RelationshipDisplay = _ref5 => {\n  let {\n    list,\n    value\n  } = _ref5;\n\n  if (value.kind === 'many') {\n    if (value.value.length) {\n      return core.jsx(core.Inline, {\n        gap: \"small\"\n      }, value.value.map(i => core.jsx(RelationshipLinkButton, {\n        href: `/${list.path}/${i.id}`\n      }, i.label)));\n    } else {\n      return core.jsx(\"div\", null, \"(No \", list.plural, \")\");\n    }\n  } else {\n    if (value.value) {\n      return core.jsx(RelationshipLinkButton, {\n        href: `/${list.path}/${value.value.id}`\n      }, value.value.label);\n    } else {\n      return core.jsx(\"div\", null, \"(No \", list.singular, \")\");\n    }\n  }\n};\n\nconst Field = _ref6 => {\n  let {\n    field,\n    autoFocus,\n    value,\n    onChange,\n    forceValidation\n  } = _ref6;\n  const keystone = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useKeystone();\n  const foreignList = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useList(field.refListKey);\n  const localList = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useList(field.listKey);\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n\n  if (value.kind === 'cards-view') {\n    return core.jsx(fields.FieldContainer, {\n      as: \"fieldset\"\n    }, core.jsx(fields.FieldLegend, null, field.label), core.jsx(Cards, {\n      forceValidation: forceValidation,\n      field: field,\n      id: value.id,\n      value: value,\n      onChange: onChange,\n      foreignList: foreignList,\n      localList: localList\n    }));\n  }\n\n  if (value.kind === 'count') {\n    return core.jsx(core.Stack, {\n      as: \"fieldset\",\n      gap: \"medium\"\n    }, core.jsx(fields.FieldLegend, null, field.label), core.jsx(\"div\", null, value.count === 1 ? `There is 1 ${foreignList.singular} ` : `There are ${value.count} ${foreignList.plural} `, \"linked to this \", localList.singular));\n  }\n\n  return core.jsx(fields.FieldContainer, {\n    as: \"fieldset\"\n  }, core.jsx(fields.FieldLabel, {\n    as: \"legend\"\n  }, field.label), onChange ? core.jsx(React.Fragment, null, core.jsx(core.Stack, {\n    gap: \"medium\"\n  }, core.jsx(fields_types_relationship_views_RelationshipSelect_dist_keystoneNextKeystoneFieldsTypesRelationshipViewsRelationshipSelect.RelationshipSelect, {\n    controlShouldRenderValue: true,\n    autoFocus: autoFocus,\n    isDisabled: onChange === undefined,\n    list: foreignList,\n    portalMenu: true,\n    state: value.kind === 'many' ? {\n      kind: 'many',\n      value: value.value,\n\n      onChange(newItems) {\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          value: newItems\n        }));\n      }\n\n    } : {\n      kind: 'one',\n      value: value.value,\n\n      onChange(newVal) {\n        if (value.kind === 'one') {\n          onChange(_objectSpread(_objectSpread({}, value), {}, {\n            value: newVal\n          }));\n        }\n      }\n\n    }\n  }), core.jsx(core.Stack, {\n    across: true,\n    gap: \"small\"\n  }, !field.hideCreate && core.jsx(button.Button, {\n    size: \"small\",\n    disabled: isDrawerOpen,\n    onClick: () => {\n      setIsDrawerOpen(true);\n    }\n  }, \"Create related \", foreignList.singular), keystone.authenticatedItem.state === 'authenticated' && keystone.authenticatedItem.listKey === field.refListKey && core.jsx(button.Button, {\n    size: \"small\",\n    isDisabled: onChange === undefined,\n    onClick: () => {\n      if (keystone.authenticatedItem.state === 'authenticated') {\n        const val = {\n          label: keystone.authenticatedItem.label,\n          id: keystone.authenticatedItem.id\n        };\n\n        if (value.kind === 'many') {\n          onChange(_objectSpread(_objectSpread({}, value), {}, {\n            value: [...value.value, val]\n          }));\n        } else {\n          onChange(_objectSpread(_objectSpread({}, value), {}, {\n            value: val\n          }));\n        }\n      }\n    }\n  }, value.kind === 'many' ? 'Add ' : 'Set as ', keystone.authenticatedItem.label), !!(value.kind === 'many' ? value.value.length : value.kind === 'one' && value.value) && core.jsx(LinkToRelatedItems, {\n    itemId: value.id,\n    refFieldKey: field.refFieldKey,\n    list: foreignList,\n    value: value\n  }))), core.jsx(modals.DrawerController, {\n    isOpen: isDrawerOpen\n  }, core.jsx(CreateItemDrawer.CreateItemDrawer, {\n    listKey: foreignList.key,\n    onClose: () => {\n      setIsDrawerOpen(false);\n    },\n    onCreate: val => {\n      setIsDrawerOpen(false);\n\n      if (value.kind === 'many') {\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          value: [...value.value, val]\n        }));\n      } else if (value.kind === 'one') {\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          value: val\n        }));\n      }\n    }\n  }))) : core.jsx(RelationshipDisplay, {\n    value: value,\n    list: foreignList\n  }));\n};\nconst Cell = _ref7 => {\n  let {\n    field,\n    item\n  } = _ref7;\n  const list = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useList(field.refListKey);\n  const {\n    colors\n  } = core.useTheme();\n\n  if (field.display.mode === 'count') {\n    var _item$;\n\n    const count = (_item$ = item[`${field.path}Count`]) !== null && _item$ !== void 0 ? _item$ : 0;\n    return core.jsx(CellContainer.CellContainer, null, count, \" \", count === 1 ? list.singular : list.plural);\n  }\n\n  const data = item[field.path];\n  const items = (Array.isArray(data) ? data : [data]).filter(item => item);\n  const displayItems = items.length < 5 ? items : items.slice(0, 3);\n  const overflow = items.length < 5 ? 0 : items.length - 3;\n  const styles = {\n    color: colors.foreground,\n    textDecoration: 'none',\n    ':hover': {\n      textDecoration: 'underline'\n    }\n  };\n  return core.jsx(CellContainer.CellContainer, null, displayItems.map((item, index) => core.jsx(React.Fragment, {\n    key: item.id\n  }, !!index ? ', ' : '', core.jsx(adminUi_router_dist_keystoneNextKeystoneAdminUiRouter.Link, {\n    href: `/${list.path}/[id]`,\n    as: `/${list.path}/${item.id}`,\n    css: styles\n  }, item.label || item.id))), overflow ? `, and ${overflow} more` : null);\n};\nconst CardValue = _ref8 => {\n  let {\n    field,\n    item\n  } = _ref8;\n  const list = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useList(field.refListKey);\n  const data = item[field.path];\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), (Array.isArray(data) ? data : [data]).filter(item => item).map((item, index) => core.jsx(React.Fragment, {\n    key: item.id\n  }, !!index ? ', ' : '', core.jsx(adminUi_router_dist_keystoneNextKeystoneAdminUiRouter.Link, {\n    href: `/${list.path}/[id]`,\n    as: `/${list.path}/${item.id}`\n  }, item.label || item.id))));\n};\nconst controller = config => {\n  return {\n    refFieldKey: config.fieldMeta.refFieldKey,\n    many: config.fieldMeta.many,\n    listKey: config.listKey,\n    path: config.path,\n    label: config.label,\n    display: config.fieldMeta.displayMode === 'cards' ? {\n      mode: 'cards',\n      cardFields: config.fieldMeta.cardFields,\n      inlineCreate: config.fieldMeta.inlineCreate,\n      inlineEdit: config.fieldMeta.inlineEdit,\n      linkToItem: config.fieldMeta.linkToItem,\n      removeMode: config.fieldMeta.removeMode,\n      inlineConnect: config.fieldMeta.inlineConnect\n    } : config.fieldMeta.displayMode === 'count' ? {\n      mode: 'count'\n    } : {\n      mode: 'select',\n      refLabelField: config.fieldMeta.refLabelField\n    },\n    refListKey: config.fieldMeta.refListKey,\n    graphqlSelection: config.fieldMeta.displayMode === 'cards' ? `${config.path} {\n            id\n            label: ${config.fieldMeta.refLabelField}\n          }` : config.fieldMeta.displayMode === 'count' ? `${config.path}Count` : `${config.path} {\n              id\n              label: ${config.fieldMeta.refLabelField}\n            }`,\n    hideCreate: config.fieldMeta.hideCreate,\n    defaultValue: config.fieldMeta.many ? {\n      id: null,\n      kind: 'many',\n      initialValue: [],\n      value: []\n    } : {\n      id: null,\n      kind: 'one',\n      value: null,\n      initialValue: null\n    },\n    deserialize: data => {\n      if (config.fieldMeta.displayMode === 'count') {\n        var _data$;\n\n        return {\n          id: data.id,\n          kind: 'count',\n          count: (_data$ = data[`${config.path}Count`]) !== null && _data$ !== void 0 ? _data$ : 0\n        };\n      }\n\n      if (config.fieldMeta.displayMode === 'cards') {\n        const initialIds = new Set((Array.isArray(data[config.path]) ? data[config.path] : data[config.path] ? [data[config.path]] : []).map(x => x.id));\n        return {\n          kind: 'cards-view',\n          id: data.id,\n          itemsBeingEdited: new Set(),\n          itemBeingCreated: false,\n          initialIds,\n          currentIds: initialIds\n        };\n      }\n\n      if (config.fieldMeta.many) {\n        let value = (data[config.path] || []).map(x => ({\n          id: x.id,\n          label: x.label || x.id\n        }));\n        return {\n          kind: 'many',\n          id: data.id,\n          initialValue: value,\n          value\n        };\n      }\n\n      let value = data[config.path];\n\n      if (value) {\n        value = {\n          id: value.id,\n          label: value.label || value.id\n        };\n      }\n\n      return {\n        kind: 'one',\n        id: data.id,\n        value,\n        initialValue: value\n      };\n    },\n    filter: {\n      Filter: _ref9 => {\n        let {\n          onChange,\n          value\n        } = _ref9;\n        const foreignList = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useList(config.fieldMeta.refListKey);\n        const {\n          filterValues,\n          loading\n        } = useRelationshipFilterValues({\n          value,\n          list: foreignList\n        });\n        const state = {\n          kind: 'many',\n          value: filterValues,\n\n          onChange(newItems) {\n            onChange(newItems.map(item => item.id).join(','));\n          }\n\n        };\n        return core.jsx(fields_types_relationship_views_RelationshipSelect_dist_keystoneNextKeystoneFieldsTypesRelationshipViewsRelationshipSelect.RelationshipSelect, {\n          controlShouldRenderValue: true,\n          list: foreignList,\n          isLoading: loading,\n          isDisabled: onChange === undefined,\n          state: state\n        });\n      },\n      graphql: _ref10 => {\n        let {\n          value\n        } = _ref10;\n        const foreignIds = getForeignIds(value);\n\n        if (config.fieldMeta.many) {\n          return {\n            [config.path]: {\n              some: {\n                id: {\n                  in: foreignIds\n                }\n              }\n            }\n          };\n        }\n\n        return {\n          [config.path]: {\n            id: {\n              in: foreignIds\n            }\n          }\n        };\n      },\n\n      Label(_ref11) {\n        let {\n          value\n        } = _ref11;\n        const foreignList = adminUi_context_dist_keystoneNextKeystoneAdminUiContext.useList(config.fieldMeta.refListKey);\n        const {\n          filterValues\n        } = useRelationshipFilterValues({\n          value,\n          list: foreignList\n        });\n\n        if (!filterValues.length) {\n          return `has no value`;\n        }\n\n        if (filterValues.length > 1) {\n          const values = filterValues.map(i => i.label).join(', ');\n          return `is in [${values}]`;\n        }\n\n        const optionLabel = filterValues[0].label;\n        return `is ${optionLabel}`;\n      },\n\n      types: {\n        matches: {\n          label: 'Matches',\n          initialValue: ''\n        }\n      }\n    },\n\n    validate(value) {\n      return value.kind !== 'cards-view' || value.itemsBeingEdited.size === 0 && !value.itemBeingCreated;\n    },\n\n    serialize: state => {\n      if (state.kind === 'many') {\n        const newAllIds = new Set(state.value.map(x => x.id));\n        const initialIds = new Set(state.initialValue.map(x => x.id));\n        let disconnect = state.initialValue.filter(x => !newAllIds.has(x.id)).map(x => ({\n          id: x.id\n        }));\n        let connect = state.value.filter(x => !initialIds.has(x.id)).map(x => ({\n          id: x.id\n        }));\n\n        if (disconnect.length || connect.length) {\n          let output = {};\n\n          if (disconnect.length) {\n            output.disconnect = disconnect;\n          }\n\n          if (connect.length) {\n            output.connect = connect;\n          }\n\n          return {\n            [config.path]: output\n          };\n        }\n      } else if (state.kind === 'one') {\n        var _state$initialValue;\n\n        if (state.initialValue && !state.value) {\n          return {\n            [config.path]: {\n              disconnect: true\n            }\n          };\n        } else if (state.value && state.value.id !== ((_state$initialValue = state.initialValue) === null || _state$initialValue === void 0 ? void 0 : _state$initialValue.id)) {\n          return {\n            [config.path]: {\n              connect: {\n                id: state.value.id\n              }\n            }\n          };\n        }\n      } else if (state.kind === 'cards-view') {\n        let disconnect = [...state.initialIds].filter(id => !state.currentIds.has(id)).map(id => ({\n          id\n        }));\n        let connect = [...state.currentIds].filter(id => !state.initialIds.has(id)).map(id => ({\n          id\n        }));\n\n        if (config.fieldMeta.many) {\n          if (disconnect.length || connect.length) {\n            return {\n              [config.path]: {\n                connect: connect.length ? connect : undefined,\n                disconnect: disconnect.length ? disconnect : undefined\n              }\n            };\n          }\n        } else if (connect.length) {\n          return {\n            [config.path]: {\n              connect: connect[0]\n            }\n          };\n        } else if (disconnect.length) {\n          return {\n            [config.path]: {\n              disconnect: true\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n  };\n};\n\nfunction useRelationshipFilterValues(_ref12) {\n  var _data$items;\n\n  let {\n    value,\n    list\n  } = _ref12;\n  const foreignIds = getForeignIds(value);\n  const where = {\n    id: {\n      in: foreignIds\n    }\n  };\n  const query = client.gql`\n    query FOREIGNLIST_QUERY($where: ${list.gqlNames.whereInputName}!) {\n      items: ${list.gqlNames.listQueryName}(where: $where) {\n        id \n        ${list.labelField}\n      }\n    }\n  `;\n  const {\n    data,\n    loading\n  } = client.useQuery(query, {\n    variables: {\n      where\n    }\n  });\n  return {\n    filterValues: (data === null || data === void 0 ? void 0 : (_data$items = data.items) === null || _data$items === void 0 ? void 0 : _data$items.map(item => {\n      return {\n        id: item.id,\n        label: item[list.labelField] || item.id\n      };\n    })) || foreignIds.map(f => ({\n      label: f,\n      id: f\n    })),\n    loading: loading\n  };\n}\n\nfunction getForeignIds(value) {\n  if (typeof value === 'string' && value.length > 0) {\n    return value.split(',');\n  }\n\n  return [];\n}\n\nexports.CardValue = CardValue;\nexports.Cell = Cell;\nexports.Field = Field;\nexports.controller = controller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy9yZWxhdGlvbnNoaXAvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1yZWxhdGlvbnNoaXAtdmlld3MuY2pzLmRldi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELG9CQUFvQixtQkFBTyxDQUFDLHdHQUFzQztBQUNsRSxlQUFlLG1CQUFPLENBQUMsNEZBQWdDO0FBQ3ZELFlBQVksbUJBQU8sQ0FBQyxvQkFBTztBQUMzQixhQUFhLG1CQUFPLENBQUMsZ0RBQXFCO0FBQzFDLFdBQVcsbUJBQU8sQ0FBQyw0Q0FBbUI7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLGdEQUFxQjtBQUMxQyxhQUFhLG1CQUFPLENBQUMsZ0RBQXFCO0FBQzFDLDREQUE0RCxtQkFBTyxDQUFDLGdOQUF1RjtBQUMzSiw4REFBOEQsbUJBQU8sQ0FBQyxvTkFBeUY7QUFDL0osYUFBYSxtQkFBTyxDQUFDLHNDQUFnQjtBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnSkFBdUQ7QUFDbkYsbUJBQU8sQ0FBQywwR0FBdUM7QUFDL0MsbUJBQU8sQ0FBQyw4RkFBNEM7QUFDcEQsbUJBQU8sQ0FBQyxrREFBVztBQUNuQiwrQkFBK0IsbUJBQU8sQ0FBQyw0SEFBZ0Q7QUFDdkYsbUJBQU8sQ0FBQyxnQ0FBYTtBQUNyQixtQkFBTyxDQUFDLGtEQUFzQjtBQUM5QixtQkFBTyxDQUFDLGdHQUE2QztBQUNyRCxtQkFBTyxDQUFDLDRGQUEyQztBQUNuRCxtQkFBTyxDQUFDLGdKQUF1RDtBQUMvRCx1QkFBdUIsbUJBQU8sQ0FBQyxzSkFBMEQ7QUFDekYsbUJBQU8sQ0FBQyxnREFBcUI7QUFDN0IsY0FBYyxtQkFBTyxDQUFDLGtEQUFzQjtBQUM1QyxjQUFjLG1CQUFPLENBQUMsa0RBQXNCO0FBQzVDLGlCQUFpQixtQkFBTyxDQUFDLDBJQUFvRDtBQUM3RSw4Q0FBOEMsbUJBQU8sQ0FBQyxvTUFBaUY7QUFDdkksa0JBQWtCLG1CQUFPLENBQUMsd0NBQWlCO0FBQzNDLGlJQUFpSSxtQkFBTyxDQUFDLGdUQUFpSDtBQUMxUCxZQUFZLG1CQUFPLENBQUMsOENBQW9CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyxrSUFBZ0Q7QUFDckUsdUJBQXVCLG1CQUFPLENBQUMsc0pBQTBEO0FBQ3pGLG1CQUFPLENBQUMsa0RBQXNCO0FBQzlCLG1CQUFPLENBQUMsb0NBQWU7QUFDdkIsbUJBQU8sQ0FBQyxrSUFBZ0Q7QUFDeEQsbUJBQU8sQ0FBQyx3SkFBMkQ7QUFDbkUsbUJBQU8sQ0FBQywwSkFBNEQ7QUFDcEUseUJBQXlCLG1CQUFPLENBQUMsMEpBQTREO0FBQzdGLG1CQUFPLENBQUMsOEhBQThDO0FBQ3RELG1CQUFPLENBQUMsOEJBQVk7QUFDcEIsbUJBQU8sQ0FBQyxvREFBdUI7QUFDL0IsbUJBQU8sQ0FBQyxzRkFBd0M7QUFDaEQsbUJBQU8sQ0FBQyw4Q0FBb0I7QUFDNUIsbUJBQU8sQ0FBQyw0Q0FBbUI7QUFDM0IsbUJBQU8sQ0FBQyxzRkFBd0M7QUFDaEQsbUJBQU8sQ0FBQyx3QkFBUztBQUNqQixtQkFBTyxDQUFDLDhDQUFvQjtBQUM1QixtQkFBTyxDQUFDLGdGQUFxQztBQUM3QyxtQkFBTyxDQUFDLG9EQUF1QjtBQUMvQixtQkFBTyxDQUFDLHdHQUFzQztBQUM5QyxtQkFBTyxDQUFDLG9EQUF1QjtBQUMvQixtQkFBTyxDQUFDLGtCQUFNOztBQUVkLCtCQUErQixpQ0FBaUM7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixVQUFVLGlDQUFpQyxTQUFTLFFBQVE7QUFDNUQ7QUFDQSxvQkFBb0I7QUFDcEIsUUFBUTtBQUNSO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxxREFBcUQsOEJBQThCO0FBQ3RGLGtCQUFrQixpQ0FBaUMsVUFBVSxTQUFTO0FBQ3RFLGNBQWM7QUFDZDtBQUNBLFNBQVM7QUFDVDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUcsOENBQThDO0FBQ2pEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsb0RBQW9ELDhCQUE4QjtBQUNyRixjQUFjLGlDQUFpQztBQUMvQyxVQUFVO0FBQ1Y7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLHVCQUF1QjtBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0Esa0NBQWtDLGFBQWE7QUFDL0MsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUssS0FBSyxhQUFhLEVBQUUsV0FBVyxFQUFFLDhCQUE4QjtBQUNwRTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsWUFBWTtBQUMzRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsK0NBQStDLFlBQVk7QUFDM0Q7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsWUFBWTtBQUMzRDtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxZQUFZO0FBQzNEO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFlBQVk7QUFDM0Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLGdCQUFnQixpQkFBaUIsR0FBRyxHQUFHO0FBQ3ZDLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixxQkFBcUI7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsK0JBQStCLG1DQUFtQyxVQUFVLE1BQU0sV0FBVztBQUM3RiwwQkFBMEI7QUFDMUI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUEsNkNBQTZDOztBQUU3Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCxZQUFZO0FBQ25FO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNkNBQTZDLFlBQVk7QUFDekQ7QUFDQSxPQUFPO0FBQ1AsNkNBQTZDLFlBQVk7QUFDekQ7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsWUFBWTtBQUN6RDtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQSxpQkFBaUIsWUFBWSxZQUFZLE9BQU87QUFDaEQ7O0FBRUEsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxLQUFLLFlBQVk7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDhDQUE4QztBQUM5QztBQUNBLGdCQUFnQixVQUFVLEdBQUcsTUFBTTtBQUNuQyxLQUFLO0FBQ0w7O0FBRUEsNENBQTRDO0FBQzVDO0FBQ0EsY0FBYyxVQUFVLEdBQUcsNEZBQTRGO0FBQ3ZILEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asa0JBQWtCLFVBQVUsR0FBRyxLQUFLO0FBQ3BDLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0Esa0JBQWtCLFVBQVUsR0FBRyxlQUFlO0FBQzlDLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSywyR0FBMkcsc0JBQXNCLGlCQUFpQixhQUFhLEVBQUUsb0JBQW9CO0FBQzFMOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyxZQUFZO0FBQzNEO0FBQ0EsU0FBUztBQUNUOztBQUVBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQsWUFBWTtBQUM3RDtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlELFlBQVk7QUFDN0Q7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWLGlEQUFpRCxZQUFZO0FBQzdEO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyxZQUFZO0FBQzNEO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUiwrQ0FBK0MsWUFBWTtBQUMzRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUEsb0NBQW9DLFdBQVc7QUFDL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjLFVBQVU7QUFDeEIsWUFBWSxVQUFVLEdBQUcsUUFBUTtBQUNqQztBQUNBLEdBQUcsZ0RBQWdELFVBQVU7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjLFVBQVU7QUFDeEIsWUFBWSxVQUFVLEdBQUcsUUFBUTtBQUNqQyxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBLHFCQUFxQjtBQUNyQixXQUFXLGtEQUFrRCxZQUFZLFlBQVk7QUFDckY7QUFDQSx1QkFBdUI7QUFDdkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFlBQVk7QUFDL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCLE9BQU87QUFDbEM7O0FBRUE7QUFDQSxxQkFBcUIsWUFBWTtBQUNqQyxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDZCQUE2QjtBQUNuRSxlQUFlLDRCQUE0QjtBQUMzQztBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQjtBQUNqQixZQUFZO0FBQ1osYUFBYTtBQUNiLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZmllbGRzL3R5cGVzL3JlbGF0aW9uc2hpcC92aWV3cy9kaXN0L2tleXN0b25lLW5leHQta2V5c3RvbmUtZmllbGRzLXR5cGVzLXJlbGF0aW9uc2hpcC12aWV3cy5janMuZGV2LmpzPzllMjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgX29iamVjdFNwcmVhZCA9IHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMicpO1xudmFyIF9leHRlbmRzID0gcmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGJ1dHRvbiA9IHJlcXVpcmUoJ0BrZXlzdG9uZS11aS9idXR0b24nKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnQGtleXN0b25lLXVpL2NvcmUnKTtcbnZhciBmaWVsZHMgPSByZXF1aXJlKCdAa2V5c3RvbmUtdWkvZmllbGRzJyk7XG52YXIgbW9kYWxzID0gcmVxdWlyZSgnQGtleXN0b25lLXVpL21vZGFscycpO1xudmFyIGFkbWluVWlfcm91dGVyX2Rpc3Rfa2V5c3RvbmVOZXh0S2V5c3RvbmVBZG1pblVpUm91dGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vYWRtaW4tdWkvcm91dGVyL2Rpc3Qva2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1hZG1pbi11aS1yb3V0ZXIuY2pzLmRldi5qcycpO1xudmFyIGFkbWluVWlfY29udGV4dF9kaXN0X2tleXN0b25lTmV4dEtleXN0b25lQWRtaW5VaUNvbnRleHQgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9hZG1pbi11aS9jb250ZXh0L2Rpc3Qva2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1hZG1pbi11aS1jb250ZXh0LmNqcy5kZXYuanMnKTtcbnZhciBjbGllbnQgPSByZXF1aXJlKCdAYXBvbGxvL2NsaWVudCcpO1xudmFyIENlbGxDb250YWluZXIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9kaXN0L0NlbGxDb250YWluZXItNDUzMjU0YjUuY2pzLmRldi5qcycpO1xucmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eScpO1xucmVxdWlyZSgnQGtleXN0b25lLXVpL2ljb25zL2ljb25zL0FsZXJ0VHJpYW5nbGVJY29uJyk7XG5yZXF1aXJlKCduZXh0L2xpbmsnKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgPSByZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCduZXh0L3JvdXRlcicpO1xucmVxdWlyZSgnQGtleXN0b25lLXVpL3BvcG92ZXInKTtcbnJlcXVpcmUoJ0BrZXlzdG9uZS11aS9pY29ucy9pY29ucy9Nb3JlSG9yaXpvbnRhbEljb24nKTtcbnJlcXVpcmUoJ0BrZXlzdG9uZS11aS9pY29ucy9pY29ucy9DaGV2cm9uUmlnaHRJY29uJyk7XG5yZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9kaXN0L1NpZ25vdXRCdXR0b24tMDgxNDEwZDYuY2pzLmRldi5qcycpO1xudmFyIENyZWF0ZUl0ZW1EcmF3ZXIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9kaXN0L0NyZWF0ZUl0ZW1EcmF3ZXItYWJkZDQ3NjYuY2pzLmRldi5qcycpO1xucmVxdWlyZSgnQGtleXN0b25lLXVpL25vdGljZScpO1xudmFyIHRvb2x0aXAgPSByZXF1aXJlKCdAa2V5c3RvbmUtdWkvdG9vbHRpcCcpO1xudmFyIGxvYWRpbmcgPSByZXF1aXJlKCdAa2V5c3RvbmUtdWkvbG9hZGluZycpO1xudmFyIGRhdGFHZXR0ZXIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9kaXN0L2RhdGFHZXR0ZXItOWZiZTJmOGUuY2pzLmRldi5qcycpO1xudmFyIGdldFJvb3RHcmFwaFFMRmllbGRzRnJvbUZpZWxkQ29udHJvbGxlciA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uL2Rpc3QvZ2V0Um9vdEdyYXBoUUxGaWVsZHNGcm9tRmllbGRDb250cm9sbGVyLTQ3Njk5YTBkLmNqcy5kZXYuanMnKTtcbnZhciBpc0RlZXBFcXVhbCA9IHJlcXVpcmUoJ2Zhc3QtZGVlcC1lcXVhbCcpO1xudmFyIGZpZWxkc190eXBlc19yZWxhdGlvbnNoaXBfdmlld3NfUmVsYXRpb25zaGlwU2VsZWN0X2Rpc3Rfa2V5c3RvbmVOZXh0S2V5c3RvbmVGaWVsZHNUeXBlc1JlbGF0aW9uc2hpcFZpZXdzUmVsYXRpb25zaGlwU2VsZWN0ID0gcmVxdWlyZSgnLi4vUmVsYXRpb25zaGlwU2VsZWN0L2Rpc3Qva2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1maWVsZHMtdHlwZXMtcmVsYXRpb25zaGlwLXZpZXdzLVJlbGF0aW9uc2hpcFNlbGVjdC5janMuZGV2LmpzJyk7XG52YXIgdG9hc3QgPSByZXF1aXJlKCdAa2V5c3RvbmUtdWkvdG9hc3QnKTtcbnZhciBGaWVsZHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9kaXN0L0ZpZWxkcy02ZTg2MmE2Ny5janMuZGV2LmpzJyk7XG52YXIgdXNlSW52YWxpZEZpZWxkcyA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uL2Rpc3QvdXNlSW52YWxpZEZpZWxkcy0xNjJkMWI5Yy5janMuZGV2LmpzJyk7XG5yZXF1aXJlKCdhcG9sbG8tdXBsb2FkLWNsaWVudCcpO1xucmVxdWlyZSgnQGVtb3Rpb24vaGFzaCcpO1xucmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vZGlzdC9zcWxpdGUtYTIzODVhODEuY2pzLmRldi5qcycpO1xucmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vZGlzdC9ncmFwaHFsLXRzLXNjaGVtYS0yYTIyMDEyMC5janMuZGV2LmpzJyk7XG5yZXF1aXJlKCcuLi8uLi8uLi8uLi8uLi9kaXN0L2FkbWluLW1ldGEtZ3JhcGhxbC05ZjlhOWMxMS5janMuZGV2LmpzJyk7XG52YXIgR3JhcGhRTEVycm9yTm90aWNlID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vZGlzdC9HcmFwaFFMRXJyb3JOb3RpY2UtNmE4NTdhM2EuY2pzLmRldi5qcycpO1xucmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vZGlzdC9jb3JlLTExYzlmZmVhLmNqcy5kZXYuanMnKTtcbnJlcXVpcmUoJ2RlY2ltYWwuanMnKTtcbnJlcXVpcmUoJ0BncmFwaHFsLXRvb2xzL3NjaGVtYScpO1xucmVxdWlyZSgnQGdyYXBocWwtdHMvc2NoZW1hL2FwaS13aXRob3V0LWNvbnRleHQnKTtcbnJlcXVpcmUoJ0BncmFwaHFsLXRzL3NjaGVtYScpO1xucmVxdWlyZSgnZ3JhcGhxbC10eXBlLWpzb24nKTtcbnJlcXVpcmUoJ2dyYXBocWwtdXBsb2FkL3B1YmxpYy9HcmFwaFFMVXBsb2FkLmpzJyk7XG5yZXF1aXJlKCdncmFwaHFsJyk7XG5yZXF1aXJlKCdAZ3JhcGhxbC10cy9leHRlbmQnKTtcbnJlcXVpcmUoJ0BncmFwaHFsLXRzL3NjaGVtYS9hcGktd2l0aC1jb250ZXh0Jyk7XG5yZXF1aXJlKCdAZW1vdGlvbi93ZWFrLW1lbW9pemUnKTtcbnJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Qcm9wZXJ0eUtleScpO1xucmVxdWlyZSgnaW50ZXJzZWN0aW9uLW9ic2VydmVyJyk7XG5yZXF1aXJlKCd1dWlkJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZSkgeyByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG52YXIgaXNEZWVwRXF1YWxfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0KGlzRGVlcEVxdWFsKTtcblxuZnVuY3Rpb24gdXNlSXRlbVN0YXRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzZWxlY3RlZEZpZWxkcyxcbiAgICBsb2NhbExpc3QsXG4gICAgaWQsXG4gICAgZmllbGRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHtcbiAgICBkYXRhLFxuICAgIGVycm9yLFxuICAgIGxvYWRpbmdcbiAgfSA9IGNsaWVudC51c2VRdWVyeShjbGllbnQuZ3FsYHF1ZXJ5KCRpZDogSUQhKSB7XG4gIGl0ZW06ICR7bG9jYWxMaXN0LmdxbE5hbWVzLml0ZW1RdWVyeU5hbWV9KHdoZXJlOiB7aWQ6ICRpZH0pIHtcbiAgICBpZFxuICAgIHJlbGF0aW9uc2hpcDogJHtmaWVsZC5wYXRofSB7XG4gICAgICAke3NlbGVjdGVkRmllbGRzfVxuICAgIH1cbiAgfVxufWAsIHtcbiAgICB2YXJpYWJsZXM6IHtcbiAgICAgIGlkXG4gICAgfSxcbiAgICBlcnJvclBvbGljeTogJ2FsbCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBpdGVtc0FyckZyb21EYXRhLFxuICAgIHJlbGF0aW9uc2hpcEdldHRlclxuICB9ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgZGF0YUdldHRlciQxID0gZGF0YUdldHRlci5tYWtlRGF0YUdldHRlcihkYXRhLCBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IuZ3JhcGhRTEVycm9ycyk7XG4gICAgY29uc3QgcmVsYXRpb25zaGlwR2V0dGVyID0gZGF0YUdldHRlciQxLmdldCgnaXRlbScpLmdldCgncmVsYXRpb25zaGlwJyk7XG4gICAgY29uc3QgaXNNYW55ID0gQXJyYXkuaXNBcnJheShyZWxhdGlvbnNoaXBHZXR0ZXIuZGF0YSk7XG4gICAgY29uc3QgaXRlbXNBcnJGcm9tRGF0YSA9IChpc01hbnkgPyByZWxhdGlvbnNoaXBHZXR0ZXIuZGF0YS5tYXAoKF8sIGkpID0+IHJlbGF0aW9uc2hpcEdldHRlci5nZXQoaSkpIDogW3JlbGF0aW9uc2hpcEdldHRlcl0pLmZpbHRlcih4ID0+IHtcbiAgICAgIHZhciBfeCRkYXRhO1xuXG4gICAgICByZXR1cm4gKChfeCRkYXRhID0geC5kYXRhKSA9PT0gbnVsbCB8fCBfeCRkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfeCRkYXRhLmlkKSAhPSBudWxsO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICByZWxhdGlvbnNoaXBHZXR0ZXIsXG4gICAgICBpdGVtc0FyckZyb21EYXRhXG4gICAgfTtcbiAgfSwgW2RhdGEsIGVycm9yXSk7XG4gIGxldCBbe1xuICAgIGl0ZW1zLFxuICAgIGl0ZW1zQXJyRnJvbURhdGE6IGl0ZW1zQXJyRnJvbURhdGFTdGF0ZVxuICB9LCBzZXRJdGVtc1N0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBpdGVtc0FyckZyb21EYXRhOiBbXSxcbiAgICBpdGVtczoge31cbiAgfSk7XG5cbiAgaWYgKGl0ZW1zQXJyRnJvbURhdGFTdGF0ZSAhPT0gaXRlbXNBcnJGcm9tRGF0YSkge1xuICAgIGxldCBuZXdJdGVtcyA9IHt9O1xuICAgIGl0ZW1zQXJyRnJvbURhdGEuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIHZhciBfaXRlbXMkaXRlbSRkYXRhJGlkLCBfaXRlbSRlcnJvcnMsIF9pbml0aWFsSXRlbUluU3RhdGUkZTtcblxuICAgICAgY29uc3QgaW5pdGlhbEl0ZW1JblN0YXRlID0gKF9pdGVtcyRpdGVtJGRhdGEkaWQgPSBpdGVtc1tpdGVtLmRhdGEuaWRdKSA9PT0gbnVsbCB8fCBfaXRlbXMkaXRlbSRkYXRhJGlkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaXRlbXMkaXRlbSRkYXRhJGlkLmZyb21Jbml0aWFsUXVlcnk7XG5cbiAgICAgIGlmICgoaXRlbXNbaXRlbS5kYXRhLmlkXSAmJiBpbml0aWFsSXRlbUluU3RhdGUgfHwgIWl0ZW1zW2l0ZW0uZGF0YS5pZF0pICYmICghaW5pdGlhbEl0ZW1JblN0YXRlIHx8IGl0ZW0uZGF0YSAhPT0gaW5pdGlhbEl0ZW1JblN0YXRlLmRhdGEgfHwgKChfaXRlbSRlcnJvcnMgPSBpdGVtLmVycm9ycykgPT09IG51bGwgfHwgX2l0ZW0kZXJyb3JzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaXRlbSRlcnJvcnMubGVuZ3RoKSAhPT0gKChfaW5pdGlhbEl0ZW1JblN0YXRlJGUgPSBpbml0aWFsSXRlbUluU3RhdGUuZXJyb3JzKSA9PT0gbnVsbCB8fCBfaW5pdGlhbEl0ZW1JblN0YXRlJGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pbml0aWFsSXRlbUluU3RhdGUkZS5sZW5ndGgpIHx8IChpdGVtLmVycm9ycyB8fCBbXSkuc29tZSgoZXJyLCBpKSA9PiB7XG4gICAgICAgIHZhciBfaW5pdGlhbEl0ZW1JblN0YXRlJGUyO1xuXG4gICAgICAgIHJldHVybiBlcnIgIT09ICgoX2luaXRpYWxJdGVtSW5TdGF0ZSRlMiA9IGluaXRpYWxJdGVtSW5TdGF0ZS5lcnJvcnMpID09PSBudWxsIHx8IF9pbml0aWFsSXRlbUluU3RhdGUkZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pbml0aWFsSXRlbUluU3RhdGUkZTJbaV0pO1xuICAgICAgfSkpKSB7XG4gICAgICAgIG5ld0l0ZW1zW2l0ZW0uZGF0YS5pZF0gPSB7XG4gICAgICAgICAgY3VycmVudDogaXRlbSxcbiAgICAgICAgICBmcm9tSW5pdGlhbFF1ZXJ5OiBpdGVtXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdJdGVtc1tpdGVtLmRhdGEuaWRdID0gaXRlbXNbaXRlbS5kYXRhLmlkXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpdGVtcyA9IG5ld0l0ZW1zO1xuICAgIHNldEl0ZW1zU3RhdGUoe1xuICAgICAgaXRlbXM6IG5ld0l0ZW1zLFxuICAgICAgaXRlbXNBcnJGcm9tRGF0YVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpdGVtczogUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgICBjb25zdCBpdGVtc1RvUmV0dXJuID0ge307XG4gICAgICBPYmplY3Qua2V5cyhpdGVtcykuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgIGl0ZW1zVG9SZXR1cm5baWRdID0gaXRlbXNbaWRdLmN1cnJlbnQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpdGVtc1RvUmV0dXJuO1xuICAgIH0sIFtpdGVtc10pLFxuICAgIHNldEl0ZW1zOiBSZWFjdC51c2VDYWxsYmFjayhpdGVtcyA9PiB7XG4gICAgICBzZXRJdGVtc1N0YXRlKHN0YXRlID0+IHtcbiAgICAgICAgbGV0IGl0ZW1zRm9yU3RhdGUgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoaXRlbXMpLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgIHZhciBfc3RhdGUkaXRlbXMkaWQ7XG5cbiAgICAgICAgICBpZiAoaXRlbXNbaWRdID09PSAoKF9zdGF0ZSRpdGVtcyRpZCA9IHN0YXRlLml0ZW1zW2lkXSkgPT09IG51bGwgfHwgX3N0YXRlJGl0ZW1zJGlkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhdGUkaXRlbXMkaWQuY3VycmVudCkpIHtcbiAgICAgICAgICAgIGl0ZW1zRm9yU3RhdGVbaWRdID0gc3RhdGUuaXRlbXNbaWRdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgX3N0YXRlJGl0ZW1zJGlkMjtcblxuICAgICAgICAgICAgaXRlbXNGb3JTdGF0ZVtpZF0gPSB7XG4gICAgICAgICAgICAgIGN1cnJlbnQ6IGl0ZW1zW2lkXSxcbiAgICAgICAgICAgICAgZnJvbUluaXRpYWxRdWVyeTogKF9zdGF0ZSRpdGVtcyRpZDIgPSBzdGF0ZS5pdGVtc1tpZF0pID09PSBudWxsIHx8IF9zdGF0ZSRpdGVtcyRpZDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdGF0ZSRpdGVtcyRpZDIuZnJvbUluaXRpYWxRdWVyeVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGl0ZW1zQXJyRnJvbURhdGE6IHN0YXRlLml0ZW1zQXJyRnJvbURhdGEsXG4gICAgICAgICAgaXRlbXM6IGl0ZW1zRm9yU3RhdGVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0sIFtzZXRJdGVtc1N0YXRlXSksXG4gICAgc3RhdGU6ICgoKSA9PiB7XG4gICAgICBpZiAobG9hZGluZykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6ICdsb2FkaW5nJ1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCAmJiBlcnJvci5uZXR3b3JrRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBraW5kOiAnZXJyb3InLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm5ldHdvcmtFcnJvci5tZXNzYWdlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZC5tYW55ICYmICFyZWxhdGlvbnNoaXBHZXR0ZXIuZGF0YSkge1xuICAgICAgICB2YXIgX3JlbGF0aW9uc2hpcEdldHRlciRlO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogJ2Vycm9yJyxcbiAgICAgICAgICBtZXNzYWdlOiAoKF9yZWxhdGlvbnNoaXBHZXR0ZXIkZSA9IHJlbGF0aW9uc2hpcEdldHRlci5lcnJvcnMpID09PSBudWxsIHx8IF9yZWxhdGlvbnNoaXBHZXR0ZXIkZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3JlbGF0aW9uc2hpcEdldHRlciRlWzBdLm1lc3NhZ2UpIHx8ICcnXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6ICdsb2FkZWQnXG4gICAgICB9O1xuICAgIH0pKClcbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZUZpZWxkc09iaihsaXN0LCBmaWVsZHMpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGVkaXRGaWVsZHMgPSB7fTtcbiAgICBmaWVsZHMgPT09IG51bGwgfHwgZmllbGRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWVsZHMuZm9yRWFjaChmaWVsZFBhdGggPT4ge1xuICAgICAgZWRpdEZpZWxkc1tmaWVsZFBhdGhdID0gbGlzdC5maWVsZHNbZmllbGRQYXRoXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZWRpdEZpZWxkcztcbiAgfSwgW2ZpZWxkcywgbGlzdC5maWVsZHNdKTtcbn1cblxuZnVuY3Rpb24gSW5saW5lRWRpdChfcmVmKSB7XG4gIHZhciBfaXRlbUdldHRlciRlcnJvcnM7XG5cbiAgbGV0IHtcbiAgICBmaWVsZHMsXG4gICAgbGlzdCxcbiAgICBzZWxlY3RlZEZpZWxkcyxcbiAgICBpdGVtR2V0dGVyLFxuICAgIG9uQ2FuY2VsLFxuICAgIG9uU2F2ZVxuICB9ID0gX3JlZjtcbiAgY29uc3QgZmllbGRzT2JqID0gdXNlRmllbGRzT2JqKGxpc3QsIGZpZWxkcyk7XG4gIGNvbnN0IFt1cGRhdGUsIHtcbiAgICBsb2FkaW5nLFxuICAgIGVycm9yXG4gIH1dID0gY2xpZW50LnVzZU11dGF0aW9uKGNsaWVudC5ncWxgbXV0YXRpb24gKCRkYXRhOiAke2xpc3QuZ3FsTmFtZXMudXBkYXRlSW5wdXROYW1lfSEsICRpZDogSUQhKSB7XG4gICAgICAgICAgaXRlbTogJHtsaXN0LmdxbE5hbWVzLnVwZGF0ZU11dGF0aW9uTmFtZX0od2hlcmU6IHsgaWQ6ICRpZCB9LCBkYXRhOiAkZGF0YSkge1xuICAgICAgICAgICAgJHtzZWxlY3RlZEZpZWxkc31cbiAgICAgICAgICB9XG4gICAgICAgIH1gLCB7XG4gICAgZXJyb3JQb2xpY3k6ICdhbGwnXG4gIH0pO1xuICBjb25zdCBbc3RhdGUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHVzZUludmFsaWRGaWVsZHMuZGVzZXJpYWxpemVWYWx1ZShmaWVsZHNPYmosIGl0ZW1HZXR0ZXIpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZSxcbiAgICAgIGl0ZW06IGl0ZW1HZXR0ZXIuZGF0YVxuICAgIH07XG4gIH0pO1xuXG4gIGlmIChzdGF0ZS5pdGVtICE9PSBpdGVtR2V0dGVyLmRhdGEgJiYgKF9pdGVtR2V0dGVyJGVycm9ycyA9IGl0ZW1HZXR0ZXIuZXJyb3JzKSAhPT0gbnVsbCAmJiBfaXRlbUdldHRlciRlcnJvcnMgIT09IHZvaWQgMCAmJiBfaXRlbUdldHRlciRlcnJvcnMuZXZlcnkoeCA9PiB7XG4gICAgdmFyIF94JHBhdGg7XG5cbiAgICByZXR1cm4gKChfeCRwYXRoID0geC5wYXRoKSA9PT0gbnVsbCB8fCBfeCRwYXRoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfeCRwYXRoLmxlbmd0aCkgIT09IDE7XG4gIH0pKSB7XG4gICAgY29uc3QgdmFsdWUgPSB1c2VJbnZhbGlkRmllbGRzLmRlc2VyaWFsaXplVmFsdWUoZmllbGRzT2JqLCBpdGVtR2V0dGVyKTtcbiAgICBzZXRWYWx1ZSh7XG4gICAgICB2YWx1ZSxcbiAgICAgIGl0ZW06IGl0ZW1HZXR0ZXIuZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIGNoYW5nZWRGaWVsZHMsXG4gICAgZGF0YUZvclVwZGF0ZVxuICB9ID0gdXNlSW52YWxpZEZpZWxkcy51c2VDaGFuZ2VkRmllbGRzQW5kRGF0YUZvclVwZGF0ZShmaWVsZHNPYmosIGl0ZW1HZXR0ZXIsIHN0YXRlLnZhbHVlKTtcbiAgY29uc3QgaW52YWxpZEZpZWxkcyA9IHVzZUludmFsaWRGaWVsZHMudXNlSW52YWxpZEZpZWxkcyhmaWVsZHNPYmosIHN0YXRlLnZhbHVlKTtcbiAgY29uc3QgW2ZvcmNlVmFsaWRhdGlvbiwgc2V0Rm9yY2VWYWxpZGF0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgdG9hc3RzID0gdG9hc3QudXNlVG9hc3RzKCk7XG4gIGNvbnN0IHNhdmVCdXR0b25Qcm9wcyA9IHtcbiAgICBpc0xvYWRpbmc6IGxvYWRpbmcsXG4gICAgd2VpZ2h0OiAnYm9sZCcsXG4gICAgc2l6ZTogJ3NtYWxsJyxcbiAgICB0b25lOiAnYWN0aXZlJyxcbiAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICBjb25zdCBuZXdGb3JjZVZhbGlkYXRpb24gPSBpbnZhbGlkRmllbGRzLnNpemUgIT09IDA7XG4gICAgICBzZXRGb3JjZVZhbGlkYXRpb24obmV3Rm9yY2VWYWxpZGF0aW9uKTtcbiAgICAgIGlmIChuZXdGb3JjZVZhbGlkYXRpb24pIHJldHVybjtcbiAgICAgIHVwZGF0ZSh7XG4gICAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAgIGRhdGE6IGRhdGFGb3JVcGRhdGUsXG4gICAgICAgICAgaWQ6IGl0ZW1HZXR0ZXIuZ2V0KCdpZCcpLmRhdGFcbiAgICAgICAgfVxuICAgICAgfSkudGhlbihfcmVmMiA9PiB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBlcnJvcnNcbiAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAvLyB3ZSdyZSBjaGVja2luZyBmb3IgcGF0aC5sZW5ndGggPT09IDEgYmVjYXVzZSBlcnJvcnMgd2l0aCBhIHBhdGggbGFyZ2VyIHRoYW4gMSB3aWxsIGJlIGZpZWxkIGxldmVsIGVycm9yc1xuICAgICAgICAvLyB3aGljaCBhcmUgaGFuZGxlZCBzZXBlcmF0ZWx5IGFuZCBkbyBub3QgaW5kaWNhdGUgYSBmYWlsdXJlIHRvIHVwZGF0ZSB0aGUgaXRlbVxuICAgICAgICBjb25zdCBlcnJvciA9IGVycm9ycyA9PT0gbnVsbCB8fCBlcnJvcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9ycy5maW5kKHggPT4ge1xuICAgICAgICAgIHZhciBfeCRwYXRoMjtcblxuICAgICAgICAgIHJldHVybiAoKF94JHBhdGgyID0geC5wYXRoKSA9PT0gbnVsbCB8fCBfeCRwYXRoMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3gkcGF0aDIubGVuZ3RoKSA9PT0gMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgdG9hc3RzLmFkZFRvYXN0KHtcbiAgICAgICAgICAgIHRpdGxlOiAnRmFpbGVkIHRvIHVwZGF0ZSBpdGVtJyxcbiAgICAgICAgICAgIHRvbmU6ICduZWdhdGl2ZScsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9hc3RzLmFkZFRvYXN0KHtcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLml0ZW1bbGlzdC5sYWJlbEZpZWxkXSB8fCBkYXRhLml0ZW0uaWQsXG4gICAgICAgICAgICB0b25lOiAncG9zaXRpdmUnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1NhdmVkIHN1Y2Nlc3NmdWxseSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvblNhdmUoZGF0YUdldHRlci5tYWtlRGF0YUdldHRlcihkYXRhLCBlcnJvcnMpLmdldCgnaXRlbScpKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgdG9hc3RzLmFkZFRvYXN0KHtcbiAgICAgICAgICB0aXRsZTogJ0ZhaWxlZCB0byB1cGRhdGUgaXRlbScsXG4gICAgICAgICAgdG9uZTogJ25lZ2F0aXZlJyxcbiAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2hpbGRyZW46ICdTYXZlJ1xuICB9O1xuICByZXR1cm4gY29yZS5qc3goY29yZS5TdGFjaywge1xuICAgIGdhcDogXCJ4bGFyZ2VcIlxuICB9LCBlcnJvciAmJiBjb3JlLmpzeChHcmFwaFFMRXJyb3JOb3RpY2UuR3JhcGhRTEVycm9yTm90aWNlLCB7XG4gICAgbmV0d29ya0Vycm9yOiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubmV0d29ya0Vycm9yIC8vIHdlJ3JlIGNoZWNraW5nIGZvciBwYXRoLmxlbmd0aCA9PT0gMSBiZWNhdXNlIGVycm9ycyB3aXRoIGEgcGF0aCBsYXJnZXIgdGhhbiAxIHdpbGwgYmUgZmllbGQgbGV2ZWwgZXJyb3JzXG4gICAgLy8gd2hpY2ggYXJlIGhhbmRsZWQgc2VwZXJhdGVseSBhbmQgZG8gbm90IGluZGljYXRlIGEgZmFpbHVyZSB0byB1cGRhdGUgdGhlIGl0ZW1cbiAgICAsXG4gICAgZXJyb3JzOiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IuZ3JhcGhRTEVycm9ycy5maWx0ZXIoeCA9PiB7XG4gICAgICB2YXIgX3gkcGF0aDM7XG5cbiAgICAgIHJldHVybiAoKF94JHBhdGgzID0geC5wYXRoKSA9PT0gbnVsbCB8fCBfeCRwYXRoMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3gkcGF0aDMubGVuZ3RoKSA9PT0gMTtcbiAgICB9KVxuICB9KSwgY29yZS5qc3goRmllbGRzLkZpZWxkcywge1xuICAgIGZpZWxkTW9kZXM6IG51bGwsXG4gICAgZmllbGRzOiBmaWVsZHNPYmosXG4gICAgZm9yY2VWYWxpZGF0aW9uOiBmb3JjZVZhbGlkYXRpb24sXG4gICAgaW52YWxpZEZpZWxkczogaW52YWxpZEZpZWxkcyxcbiAgICBvbkNoYW5nZTogUmVhY3QudXNlQ2FsbGJhY2sodmFsdWUgPT4ge1xuICAgICAgc2V0VmFsdWUoc3RhdGUgPT4gKHtcbiAgICAgICAgaXRlbTogc3RhdGUuaXRlbSxcbiAgICAgICAgdmFsdWU6IHZhbHVlKHN0YXRlLnZhbHVlKVxuICAgICAgfSkpO1xuICAgIH0sIFtzZXRWYWx1ZV0pLFxuICAgIHZhbHVlOiBzdGF0ZS52YWx1ZVxuICB9KSwgY29yZS5qc3goY29yZS5TdGFjaywge1xuICAgIGFjcm9zczogdHJ1ZSxcbiAgICBnYXA6IFwic21hbGxcIlxuICB9LCBjaGFuZ2VkRmllbGRzLnNpemUgPyBjb3JlLmpzeChidXR0b24uQnV0dG9uLCBzYXZlQnV0dG9uUHJvcHMpIDogY29yZS5qc3godG9vbHRpcC5Ub29sdGlwLCB7XG4gICAgY29udGVudDogXCJObyBmaWVsZHMgaGF2ZSBiZWVuIG1vZGlmaWVkIHNvIHlvdSBjYW5ub3Qgc2F2ZSBjaGFuZ2VzXCJcbiAgfSwgcHJvcHMgPT4gY29yZS5qc3goYnV0dG9uLkJ1dHRvbiwgX2V4dGVuZHMoe30sIHByb3BzLCBzYXZlQnV0dG9uUHJvcHMsIHtcbiAgICAvLyBtYWtpbmcgb25DbGljayB1bmRlZmluZWQgaW5zdGVhZCBvZiBtYWtpbmcgdGhlIGJ1dHRvbiBkaXNhYmxlZCBzbyB0aGUgYnV0dG9uIGNhbiBiZSBmb2N1c3NlZCBzbyBrZXlib2FyZCB1c2VycyBjYW4gc2VlIHRoZSB0b29sdGlwXG4gICAgb25DbGljazogdW5kZWZpbmVkXG4gIH0pKSksIGNvcmUuanN4KGJ1dHRvbi5CdXR0b24sIHtcbiAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgd2VpZ2h0OiBcIm5vbmVcIixcbiAgICBvbkNsaWNrOiBvbkNhbmNlbFxuICB9LCBcIkNhbmNlbFwiKSkpO1xufVxuXG4vKiogQGpzeFJ1bnRpbWUgY2xhc3NpYyAqL1xuZnVuY3Rpb24gSW5saW5lQ3JlYXRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBsaXN0LFxuICAgIG9uQ2FuY2VsLFxuICAgIG9uQ3JlYXRlLFxuICAgIGZpZWxkczogZmllbGRQYXRocyxcbiAgICBzZWxlY3RlZEZpZWxkc1xuICB9ID0gX3JlZjtcbiAgY29uc3QgdG9hc3RzID0gdG9hc3QudXNlVG9hc3RzKCk7XG4gIGNvbnN0IGZpZWxkcyA9IHVzZUZpZWxkc09iaihsaXN0LCBmaWVsZFBhdGhzKTtcbiAgY29uc3QgW2NyZWF0ZUl0ZW0sIHtcbiAgICBsb2FkaW5nLFxuICAgIGVycm9yXG4gIH1dID0gY2xpZW50LnVzZU11dGF0aW9uKGNsaWVudC5ncWxgbXV0YXRpb24oJGRhdGE6ICR7bGlzdC5ncWxOYW1lcy5jcmVhdGVJbnB1dE5hbWV9ISkge1xuICAgICAgaXRlbTogJHtsaXN0LmdxbE5hbWVzLmNyZWF0ZU11dGF0aW9uTmFtZX0oZGF0YTogJGRhdGEpIHtcbiAgICAgICAgJHtzZWxlY3RlZEZpZWxkc31cbiAgICB9XG4gIH1gKTtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhmaWVsZHMpLmZvckVhY2goZmllbGRQYXRoID0+IHtcbiAgICAgIHZhbHVlW2ZpZWxkUGF0aF0gPSB7XG4gICAgICAgIGtpbmQ6ICd2YWx1ZScsXG4gICAgICAgIHZhbHVlOiBmaWVsZHNbZmllbGRQYXRoXS5jb250cm9sbGVyLmRlZmF1bHRWYWx1ZVxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xuICBjb25zdCBpbnZhbGlkRmllbGRzID0gdXNlSW52YWxpZEZpZWxkcy51c2VJbnZhbGlkRmllbGRzKGZpZWxkcywgdmFsdWUpO1xuICBjb25zdCBbZm9yY2VWYWxpZGF0aW9uLCBzZXRGb3JjZVZhbGlkYXRpb25dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IG9uQ3JlYXRlQ2xpY2sgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3Rm9yY2VWYWxpZGF0aW9uID0gaW52YWxpZEZpZWxkcy5zaXplICE9PSAwO1xuICAgIHNldEZvcmNlVmFsaWRhdGlvbihuZXdGb3JjZVZhbGlkYXRpb24pO1xuICAgIGlmIChuZXdGb3JjZVZhbGlkYXRpb24pIHJldHVybjtcbiAgICBjb25zdCBkYXRhID0ge307XG4gICAgY29uc3QgYWxsU2VyaWFsaXplZFZhbHVlcyA9IHVzZUludmFsaWRGaWVsZHMuc2VyaWFsaXplVmFsdWVUb09iakJ5RmllbGRLZXkoZmllbGRzLCB2YWx1ZSk7XG4gICAgT2JqZWN0LmtleXMoYWxsU2VyaWFsaXplZFZhbHVlcykuZm9yRWFjaChmaWVsZFBhdGggPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjb250cm9sbGVyXG4gICAgICB9ID0gZmllbGRzW2ZpZWxkUGF0aF07XG4gICAgICBjb25zdCBzZXJpYWxpemVkID0gYWxsU2VyaWFsaXplZFZhbHVlc1tmaWVsZFBhdGhdO1xuXG4gICAgICBpZiAoIWlzRGVlcEVxdWFsX19kZWZhdWx0W1wiZGVmYXVsdFwiXShzZXJpYWxpemVkLCBjb250cm9sbGVyLnNlcmlhbGl6ZShjb250cm9sbGVyLmRlZmF1bHRWYWx1ZSkpKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwgc2VyaWFsaXplZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY3JlYXRlSXRlbSh7XG4gICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgZGF0YVxuICAgICAgfVxuICAgIH0pLnRoZW4oX3JlZjIgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgZGF0YSxcbiAgICAgICAgZXJyb3JzXG4gICAgICB9ID0gX3JlZjI7XG4gICAgICAvLyB3ZSdyZSBjaGVja2luZyBmb3IgcGF0aC5sZW5ndGggPT09IDEgYmVjYXVzZSBlcnJvcnMgd2l0aCBhIHBhdGggbGFyZ2VyIHRoYW4gMSB3aWxsIGJlIGZpZWxkIGxldmVsIGVycm9yc1xuICAgICAgLy8gd2hpY2ggYXJlIGhhbmRsZWQgc2VwZXJhdGVseSBhbmQgZG8gbm90IGluZGljYXRlIGEgZmFpbHVyZSB0byB1cGRhdGUgdGhlIGl0ZW1cbiAgICAgIGNvbnN0IGVycm9yID0gZXJyb3JzID09PSBudWxsIHx8IGVycm9ycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3JzLmZpbmQoeCA9PiB7XG4gICAgICAgIHZhciBfeCRwYXRoO1xuXG4gICAgICAgIHJldHVybiAoKF94JHBhdGggPSB4LnBhdGgpID09PSBudWxsIHx8IF94JHBhdGggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF94JHBhdGgubGVuZ3RoKSA9PT0gMTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdG9hc3RzLmFkZFRvYXN0KHtcbiAgICAgICAgICB0aXRsZTogJ0ZhaWxlZCB0byBjcmVhdGUgaXRlbScsXG4gICAgICAgICAgdG9uZTogJ25lZ2F0aXZlJyxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9hc3RzLmFkZFRvYXN0KHtcbiAgICAgICAgICB0aXRsZTogZGF0YS5pdGVtW2xpc3QubGFiZWxGaWVsZF0gfHwgZGF0YS5pdGVtLmlkLFxuICAgICAgICAgIHRvbmU6ICdwb3NpdGl2ZScsXG4gICAgICAgICAgbWVzc2FnZTogJ1NhdmVkIHN1Y2Nlc3NmdWxseSdcbiAgICAgICAgfSk7XG4gICAgICAgIG9uQ3JlYXRlKGRhdGFHZXR0ZXIubWFrZURhdGFHZXR0ZXIoZGF0YSwgZXJyb3JzKS5nZXQoJ2l0ZW0nKSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgIHRvYXN0cy5hZGRUb2FzdCh7XG4gICAgICAgIHRpdGxlOiAnRmFpbGVkIHRvIHVwZGF0ZSBpdGVtJyxcbiAgICAgICAgdG9uZTogJ25lZ2F0aXZlJyxcbiAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBjb3JlLmpzeChjb3JlLlN0YWNrLCB7XG4gICAgZ2FwOiBcInhsYXJnZVwiXG4gIH0sIGVycm9yICYmIGNvcmUuanN4KEdyYXBoUUxFcnJvck5vdGljZS5HcmFwaFFMRXJyb3JOb3RpY2UsIHtcbiAgICBuZXR3b3JrRXJyb3I6IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5uZXR3b3JrRXJyb3IsXG4gICAgZXJyb3JzOiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IuZ3JhcGhRTEVycm9yc1xuICB9KSwgY29yZS5qc3goRmllbGRzLkZpZWxkcywge1xuICAgIGZpZWxkTW9kZXM6IG51bGwsXG4gICAgZmllbGRzOiBmaWVsZHMsXG4gICAgZm9yY2VWYWxpZGF0aW9uOiBmb3JjZVZhbGlkYXRpb24sXG4gICAgaW52YWxpZEZpZWxkczogaW52YWxpZEZpZWxkcyxcbiAgICBvbkNoYW5nZTogc2V0VmFsdWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pLCBjb3JlLmpzeChjb3JlLlN0YWNrLCB7XG4gICAgZ2FwOiBcInNtYWxsXCIsXG4gICAgYWNyb3NzOiB0cnVlXG4gIH0sIGNvcmUuanN4KGJ1dHRvbi5CdXR0b24sIHtcbiAgICBpc0xvYWRpbmc6IGxvYWRpbmcsXG4gICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgIHRvbmU6IFwicG9zaXRpdmVcIixcbiAgICB3ZWlnaHQ6IFwiYm9sZFwiLFxuICAgIG9uQ2xpY2s6IG9uQ3JlYXRlQ2xpY2tcbiAgfSwgXCJDcmVhdGUgXCIsIGxpc3Quc2luZ3VsYXIpLCBjb3JlLmpzeChidXR0b24uQnV0dG9uLCB7XG4gICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgIHdlaWdodDogXCJub25lXCIsXG4gICAgb25DbGljazogb25DYW5jZWxcbiAgfSwgXCJDYW5jZWxcIikpKTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wibW9kZVwiXTtcbmNvbnN0IENhcmRDb250YWluZXIgPSBjb3JlLmZvcndhcmRSZWZXaXRoQXMoKF9yZWYsIHJlZikgPT4ge1xuICBsZXQge1xuICAgIG1vZGUgPSAndmlldydcbiAgfSA9IF9yZWYsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHtcbiAgICB0b25lc1xuICB9ID0gY29yZS51c2VUaGVtZSgpO1xuICBjb25zdCB0b25lID0gdG9uZXNbbW9kZSA9PT0gJ2VkaXQnID8gJ2FjdGl2ZScgOiBtb2RlID09PSAnY3JlYXRlJyA/ICdwb3NpdGl2ZScgOiAncGFzc2l2ZSddO1xuICByZXR1cm4gY29yZS5qc3goY29yZS5Cb3gsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBwYWRkaW5nTGVmdDogXCJ4bGFyZ2VcIixcbiAgICBjc3M6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgJzpiZWZvcmUnOiB7XG4gICAgICAgIGNvbnRlbnQ6ICdcIiBcIicsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdG9uZS5ib3JkZXIsXG4gICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgd2lkdGg6IDQsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgekluZGV4OiAxXG4gICAgICB9XG4gICAgfVxuICB9LCBwcm9wcykpO1xufSk7XG5mdW5jdGlvbiBDYXJkcyhfcmVmMikge1xuICB2YXIgX2ZpZWxkJGRpc3BsYXkkaW5saW5lO1xuXG4gIGxldCB7XG4gICAgbG9jYWxMaXN0LFxuICAgIGZpZWxkLFxuICAgIGZvcmVpZ25MaXN0LFxuICAgIGlkLFxuICAgIHZhbHVlLFxuICAgIG9uQ2hhbmdlLFxuICAgIGZvcmNlVmFsaWRhdGlvblxuICB9ID0gX3JlZjI7XG4gIGxldCBzZWxlY3RlZEZpZWxkcyA9IFsuLi5uZXcgU2V0KFsuLi5maWVsZC5kaXNwbGF5LmNhcmRGaWVsZHMsIC4uLigoKF9maWVsZCRkaXNwbGF5JGlubGluZSA9IGZpZWxkLmRpc3BsYXkuaW5saW5lRWRpdCkgPT09IG51bGwgfHwgX2ZpZWxkJGRpc3BsYXkkaW5saW5lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZmllbGQkZGlzcGxheSRpbmxpbmUuZmllbGRzKSB8fCBbXSldKV0ubWFwKGZpZWxkUGF0aCA9PiB7XG4gICAgcmV0dXJuIGZvcmVpZ25MaXN0LmZpZWxkc1tmaWVsZFBhdGhdLmNvbnRyb2xsZXIuZ3JhcGhxbFNlbGVjdGlvbjtcbiAgfSkuam9pbignXFxuJyk7XG5cbiAgaWYgKCFmaWVsZC5kaXNwbGF5LmNhcmRGaWVsZHMuaW5jbHVkZXMoJ2lkJykpIHtcbiAgICBzZWxlY3RlZEZpZWxkcyArPSAnXFxuaWQnO1xuICB9XG5cbiAgaWYgKCFmaWVsZC5kaXNwbGF5LmNhcmRGaWVsZHMuaW5jbHVkZXMoZm9yZWlnbkxpc3QubGFiZWxGaWVsZCkgJiYgZm9yZWlnbkxpc3QubGFiZWxGaWVsZCAhPT0gJ2lkJykge1xuICAgIHNlbGVjdGVkRmllbGRzICs9IGBcXG4ke2ZvcmVpZ25MaXN0LmxhYmVsRmllbGR9YDtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBpdGVtcyxcbiAgICBzZXRJdGVtcyxcbiAgICBzdGF0ZTogaXRlbXNTdGF0ZVxuICB9ID0gdXNlSXRlbVN0YXRlKHtcbiAgICBzZWxlY3RlZEZpZWxkcyxcbiAgICBsb2NhbExpc3QsXG4gICAgaWQsXG4gICAgZmllbGRcbiAgfSk7XG4gIGNvbnN0IGNsaWVudCQxID0gY2xpZW50LnVzZUFwb2xsb0NsaWVudCgpO1xuICBjb25zdCBbaXNMb2FkaW5nTGF6eUl0ZW1zLCBzZXRJc0xvYWRpbmdMYXp5SXRlbXNdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2hvd0Nvbm5lY3RJdGVtcywgc2V0U2hvd0Nvbm5lY3RJdGVtc10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtoaWRlQ29ubmVjdEl0ZW1zTGFiZWwsIHNldEhpZGVDb25uZWN0SXRlbXNMYWJlbF0gPSBSZWFjdC51c2VTdGF0ZSgnQ2FuY2VsJyk7XG4gIGNvbnN0IGVkaXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGlzTW91bnRlZFJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpc01vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIH07XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2YWx1ZS5pdGVtc0JlaW5nRWRpdGVkKSB7XG4gICAgICB2YXIgX2VkaXRSZWYkY3VycmVudDtcblxuICAgICAgZWRpdFJlZiA9PT0gbnVsbCB8fCBlZGl0UmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2VkaXRSZWYkY3VycmVudCA9IGVkaXRSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2VkaXRSZWYkY3VycmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2VkaXRSZWYkY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW3ZhbHVlXSk7XG5cbiAgaWYgKGl0ZW1zU3RhdGUua2luZCA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgcmV0dXJuIGNvcmUuanN4KFwiZGl2XCIsIG51bGwsIGNvcmUuanN4KGxvYWRpbmcuTG9hZGluZ0RvdHMsIHtcbiAgICAgIGxhYmVsOiBgTG9hZGluZyBpdGVtcyBmb3IgJHtmaWVsZC5sYWJlbH0gZmllbGRgXG4gICAgfSkpO1xuICB9XG5cbiAgaWYgKGl0ZW1zU3RhdGUua2luZCA9PT0gJ2Vycm9yJykge1xuICAgIHJldHVybiBjb3JlLmpzeChcInNwYW5cIiwge1xuICAgICAgY3NzOiB7XG4gICAgICAgIGNvbG9yOiAncmVkJ1xuICAgICAgfVxuICAgIH0sIGl0ZW1zU3RhdGUubWVzc2FnZSk7XG4gIH1cblxuICByZXR1cm4gY29yZS5qc3goY29yZS5TdGFjaywge1xuICAgIGdhcDogXCJ4bGFyZ2VcIlxuICB9LCBjb3JlLmpzeChjb3JlLlN0YWNrLCB7XG4gICAgYXM6IFwidWxcIixcbiAgICBnYXA6IFwieGxhcmdlXCIsXG4gICAgY3NzOiB7XG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgbGk6IHtcbiAgICAgICAgbGlzdFN0eWxlOiAnbm9uZSdcbiAgICAgIH1cbiAgICB9XG4gIH0sIFsuLi52YWx1ZS5jdXJyZW50SWRzXS5tYXAoKGlkLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGl0ZW1HZXR0ZXIgPSBpdGVtc1tpZF07XG4gICAgY29uc3QgaXNFZGl0TW9kZSA9ICEhKG9uQ2hhbmdlICE9PSB1bmRlZmluZWQpICYmIHZhbHVlLml0ZW1zQmVpbmdFZGl0ZWQuaGFzKGlkKTtcbiAgICByZXR1cm4gY29yZS5qc3goQ2FyZENvbnRhaW5lciwge1xuICAgICAgcm9sZTogXCJzdGF0dXNcIixcbiAgICAgIG1vZGU6IGlzRWRpdE1vZGUgPyAnZWRpdCcgOiAndmlldydcbiAgICB9LCBjb3JlLmpzeChjb3JlLlZpc3VhbGx5SGlkZGVuLCB7XG4gICAgICBhczogXCJoMlwiXG4gICAgfSwgYCR7ZmllbGQubGFiZWx9ICR7aW5kZXggKyAxfSAke2lzRWRpdE1vZGUgPyAnZWRpdCcgOiAndmlldyd9IG1vZGVgKSwgaXNFZGl0TW9kZSA/IGNvcmUuanN4KElubGluZUVkaXQsIHtcbiAgICAgIGxpc3Q6IGZvcmVpZ25MaXN0LFxuICAgICAgZmllbGRzOiBmaWVsZC5kaXNwbGF5LmlubGluZUVkaXQuZmllbGRzLFxuICAgICAgb25TYXZlOiBuZXdJdGVtR2V0dGVyID0+IHtcbiAgICAgICAgc2V0SXRlbXMoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBpdGVtcyksIHt9LCB7XG4gICAgICAgICAgW2lkXTogbmV3SXRlbUdldHRlclxuICAgICAgICB9KSk7XG4gICAgICAgIGNvbnN0IGl0ZW1zQmVpbmdFZGl0ZWQgPSBuZXcgU2V0KHZhbHVlLml0ZW1zQmVpbmdFZGl0ZWQpO1xuICAgICAgICBpdGVtc0JlaW5nRWRpdGVkLmRlbGV0ZShpZCk7XG4gICAgICAgIG9uQ2hhbmdlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdmFsdWUpLCB7fSwge1xuICAgICAgICAgIGl0ZW1zQmVpbmdFZGl0ZWRcbiAgICAgICAgfSkpO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdGVkRmllbGRzOiBzZWxlY3RlZEZpZWxkcyxcbiAgICAgIGl0ZW1HZXR0ZXI6IGl0ZW1HZXR0ZXIsXG4gICAgICBvbkNhbmNlbDogKCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtc0JlaW5nRWRpdGVkID0gbmV3IFNldCh2YWx1ZS5pdGVtc0JlaW5nRWRpdGVkKTtcbiAgICAgICAgaXRlbXNCZWluZ0VkaXRlZC5kZWxldGUoaWQpO1xuICAgICAgICBvbkNoYW5nZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHZhbHVlKSwge30sIHtcbiAgICAgICAgICBpdGVtc0JlaW5nRWRpdGVkXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KSA6IGNvcmUuanN4KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjb3JlLmpzeChjb3JlLlN0YWNrLCB7XG4gICAgICBnYXA6IFwieGxhcmdlXCJcbiAgICB9LCBmaWVsZC5kaXNwbGF5LmNhcmRGaWVsZHMubWFwKGZpZWxkUGF0aCA9PiB7XG4gICAgICBjb25zdCBmaWVsZCA9IGZvcmVpZ25MaXN0LmZpZWxkc1tmaWVsZFBhdGhdO1xuICAgICAgY29uc3QgaXRlbUZvckZpZWxkID0ge307XG5cbiAgICAgIGZvciAoY29uc3QgZ3JhcGhxbEZpZWxkIG9mIGdldFJvb3RHcmFwaFFMRmllbGRzRnJvbUZpZWxkQ29udHJvbGxlci5nZXRSb290R3JhcGhRTEZpZWxkc0Zyb21GaWVsZENvbnRyb2xsZXIoZmllbGQuY29udHJvbGxlcikpIHtcbiAgICAgICAgY29uc3QgZmllbGRHZXR0ZXIgPSBpdGVtR2V0dGVyLmdldChncmFwaHFsRmllbGQpO1xuXG4gICAgICAgIGlmIChmaWVsZEdldHRlci5lcnJvcnMpIHtcbiAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBmaWVsZEdldHRlci5lcnJvcnNbMF0ubWVzc2FnZTtcbiAgICAgICAgICByZXR1cm4gY29yZS5qc3goZmllbGRzLkZpZWxkQ29udGFpbmVyLCBudWxsLCBjb3JlLmpzeChmaWVsZHMuRmllbGRMYWJlbCwgbnVsbCwgZmllbGQubGFiZWwpLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlbUZvckZpZWxkW2dyYXBocWxGaWVsZF0gPSBmaWVsZEdldHRlci5kYXRhO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29yZS5qc3goZmllbGQudmlld3MuQ2FyZFZhbHVlLCB7XG4gICAgICAgIGtleTogZmllbGRQYXRoLFxuICAgICAgICBmaWVsZDogZmllbGQuY29udHJvbGxlcixcbiAgICAgICAgaXRlbTogaXRlbUZvckZpZWxkXG4gICAgICB9KTtcbiAgICB9KSksIGNvcmUuanN4KGNvcmUuU3RhY2ssIHtcbiAgICAgIGFjcm9zczogdHJ1ZSxcbiAgICAgIGdhcDogXCJzbWFsbFwiLFxuICAgICAgbWFyZ2luVG9wOiBcInhsYXJnZVwiXG4gICAgfSwgZmllbGQuZGlzcGxheS5pbmxpbmVFZGl0ICYmIG9uQ2hhbmdlICE9PSB1bmRlZmluZWQgJiYgY29yZS5qc3goYnV0dG9uLkJ1dHRvbiwge1xuICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgZGlzYWJsZWQ6IG9uQ2hhbmdlID09PSB1bmRlZmluZWQsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIG9uQ2hhbmdlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdmFsdWUpLCB7fSwge1xuICAgICAgICAgIGl0ZW1zQmVpbmdFZGl0ZWQ6IG5ldyBTZXQoWy4uLnZhbHVlLml0ZW1zQmVpbmdFZGl0ZWQsIGlkXSlcbiAgICAgICAgfSkpO1xuICAgICAgfSxcbiAgICAgIHRvbmU6IFwiYWN0aXZlXCJcbiAgICB9LCBcIkVkaXRcIiksIGZpZWxkLmRpc3BsYXkucmVtb3ZlTW9kZSA9PT0gJ2Rpc2Nvbm5lY3QnICYmIG9uQ2hhbmdlICE9PSB1bmRlZmluZWQgJiYgY29yZS5qc3godG9vbHRpcC5Ub29sdGlwLCB7XG4gICAgICBjb250ZW50OiBcIlRoaXMgaXRlbSB3aWxsIG5vdCBiZSBkZWxldGVkLiBJdCB3aWxsIG9ubHkgYmUgcmVtb3ZlZCBmcm9tIHRoaXMgZmllbGQuXCJcbiAgICB9LCBwcm9wcyA9PiBjb3JlLmpzeChidXR0b24uQnV0dG9uLCBfZXh0ZW5kcyh7XG4gICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICBkaXNhYmxlZDogb25DaGFuZ2UgPT09IHVuZGVmaW5lZCxcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudElkcyA9IG5ldyBTZXQodmFsdWUuY3VycmVudElkcyk7XG4gICAgICAgIGN1cnJlbnRJZHMuZGVsZXRlKGlkKTtcbiAgICAgICAgb25DaGFuZ2UoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2YWx1ZSksIHt9LCB7XG4gICAgICAgICAgY3VycmVudElkc1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIHRvbmU6IFwibmVnYXRpdmVcIlxuICAgIH0pLCBcIlJlbW92ZVwiKSksIGZpZWxkLmRpc3BsYXkubGlua1RvSXRlbSAmJiBjb3JlLmpzeChidXR0b24uQnV0dG9uLCB7XG4gICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICB3ZWlnaHQ6IFwibGlua1wiLFxuICAgICAgdG9uZTogXCJhY3RpdmVcIixcbiAgICAgIGNzczoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnXG4gICAgICB9LFxuICAgICAgYXM6IGFkbWluVWlfcm91dGVyX2Rpc3Rfa2V5c3RvbmVOZXh0S2V5c3RvbmVBZG1pblVpUm91dGVyLkxpbmssXG4gICAgICBocmVmOiBgLyR7Zm9yZWlnbkxpc3QucGF0aH0vJHtpZH1gXG4gICAgfSwgXCJWaWV3IFwiLCBmb3JlaWduTGlzdC5zaW5ndWxhciwgXCIgZGV0YWlsc1wiKSkpKTtcbiAgfSkpLCBvbkNoYW5nZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGZpZWxkLmRpc3BsYXkuaW5saW5lQ29ubmVjdCAmJiBzaG93Q29ubmVjdEl0ZW1zID8gY29yZS5qc3goQ2FyZENvbnRhaW5lciwge1xuICAgIG1vZGU6IFwiZWRpdFwiXG4gIH0sIGNvcmUuanN4KGNvcmUuU3RhY2ssIHtcbiAgICBnYXA6IFwic21hbGxcIixcbiAgICBtYXJnaW5ZOiBcIm1lZGl1bVwiLFxuICAgIGFjcm9zczogdHJ1ZSxcbiAgICBjc3M6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICAgJ2RpdjpmaXJzdC1vZi10eXBlJzoge1xuICAgICAgICBmbGV4OiAnMidcbiAgICAgIH1cbiAgICB9XG4gIH0sIGNvcmUuanN4KGZpZWxkc190eXBlc19yZWxhdGlvbnNoaXBfdmlld3NfUmVsYXRpb25zaGlwU2VsZWN0X2Rpc3Rfa2V5c3RvbmVOZXh0S2V5c3RvbmVGaWVsZHNUeXBlc1JlbGF0aW9uc2hpcFZpZXdzUmVsYXRpb25zaGlwU2VsZWN0LlJlbGF0aW9uc2hpcFNlbGVjdCwge1xuICAgIGF1dG9Gb2N1czogdHJ1ZSxcbiAgICBjb250cm9sU2hvdWxkUmVuZGVyVmFsdWU6IGlzTG9hZGluZ0xhenlJdGVtcyxcbiAgICBpc0Rpc2FibGVkOiBvbkNoYW5nZSA9PT0gdW5kZWZpbmVkLFxuICAgIGxpc3Q6IGZvcmVpZ25MaXN0LFxuICAgIGlzTG9hZGluZzogaXNMb2FkaW5nTGF6eUl0ZW1zLFxuICAgIHBsYWNlaG9sZGVyOiBgU2VsZWN0IGEgJHtmb3JlaWduTGlzdC5zaW5ndWxhcn1gLFxuICAgIHBvcnRhbE1lbnU6IHRydWUsXG4gICAgc3RhdGU6IHtcbiAgICAgIGtpbmQ6ICdtYW55JyxcblxuICAgICAgYXN5bmMgb25DaGFuZ2Uob3B0aW9ucykge1xuICAgICAgICAvLyBUT0RPOiBtYXliZSB1c2UgdGhlIGV4dHJhU2VsZWN0aW9uIHByb3Agb24gUmVsYXRpb25zaGlwU2VsZWN0IGhlcmVcbiAgICAgICAgY29uc3QgaXRlbXNUb0ZldGNoQW5kQ29ubmVjdCA9IFtdO1xuICAgICAgICBvcHRpb25zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgaWYgKCF2YWx1ZS5jdXJyZW50SWRzLmhhcyhpdGVtLmlkKSkge1xuICAgICAgICAgICAgaXRlbXNUb0ZldGNoQW5kQ29ubmVjdC5wdXNoKGl0ZW0uaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGl0ZW1zVG9GZXRjaEFuZENvbm5lY3QubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgZXJyb3JzXG4gICAgICAgICAgICB9ID0gYXdhaXQgY2xpZW50JDEucXVlcnkoe1xuICAgICAgICAgICAgICBxdWVyeTogY2xpZW50LmdxbGBxdWVyeSAoJGlkczogW0lEIV0hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbXM6ICR7Zm9yZWlnbkxpc3QuZ3FsTmFtZXMubGlzdFF1ZXJ5TmFtZX0od2hlcmU6IHsgaWQ6IHsgaW46ICRpZHMgfX0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR7c2VsZWN0ZWRGaWVsZHN9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9YCxcbiAgICAgICAgICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICAgICAgICAgaWRzOiBpdGVtc1RvRmV0Y2hBbmRDb25uZWN0XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgY29uc3QgZGF0YUdldHRlcnMgPSBkYXRhR2V0dGVyLm1ha2VEYXRhR2V0dGVyKGRhdGEsIGVycm9ycyk7XG4gICAgICAgICAgICAgIGNvbnN0IGl0ZW1zRGF0YUdldHRlciA9IGRhdGFHZXR0ZXJzLmdldCgnaXRlbXMnKTtcblxuICAgICAgICAgICAgICBsZXQgbmV3SXRlbXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBpdGVtcyk7XG5cbiAgICAgICAgICAgICAgbGV0IG5ld0N1cnJlbnRJZHMgPSBmaWVsZC5tYW55ID8gbmV3IFNldCh2YWx1ZS5jdXJyZW50SWRzKSA6IG5ldyBTZXQoKTtcblxuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtc0RhdGFHZXR0ZXIuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpdGVtc0RhdGFHZXR0ZXIuZGF0YS5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoKGl0ZW0gPT09IG51bGwgfHwgaXRlbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaXRlbS5pZCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdDdXJyZW50SWRzLmFkZChpdGVtLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3SXRlbXNbaXRlbS5pZF0gPSBpdGVtc0RhdGFHZXR0ZXIuZ2V0KGkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKG5ld0N1cnJlbnRJZHMuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHNldEl0ZW1zKG5ld0l0ZW1zKTtcbiAgICAgICAgICAgICAgICBvbkNoYW5nZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHZhbHVlKSwge30sIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRJZHM6IG5ld0N1cnJlbnRJZHNcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgc2V0SGlkZUNvbm5lY3RJdGVtc0xhYmVsKCdEb25lJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIHNldElzTG9hZGluZ0xhenlJdGVtcyhmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB2YWx1ZTogKCgpID0+IHtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBbXTtcbiAgICAgICAgT2JqZWN0LmtleXMoaXRlbXMpLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgIGlmICh2YWx1ZS5jdXJyZW50SWRzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBsYWJlbDogaWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgfSkoKVxuICAgIH1cbiAgfSksIGNvcmUuanN4KGJ1dHRvbi5CdXR0b24sIHtcbiAgICBvbkNsaWNrOiAoKSA9PiBzZXRTaG93Q29ubmVjdEl0ZW1zKGZhbHNlKVxuICB9LCBoaWRlQ29ubmVjdEl0ZW1zTGFiZWwpKSkgOiB2YWx1ZS5pdGVtQmVpbmdDcmVhdGVkID8gY29yZS5qc3goQ2FyZENvbnRhaW5lciwge1xuICAgIG1vZGU6IFwiY3JlYXRlXCJcbiAgfSwgY29yZS5qc3goSW5saW5lQ3JlYXRlLCB7XG4gICAgc2VsZWN0ZWRGaWVsZHM6IHNlbGVjdGVkRmllbGRzLFxuICAgIGZpZWxkczogZmllbGQuZGlzcGxheS5pbmxpbmVDcmVhdGUuZmllbGRzLFxuICAgIGxpc3Q6IGZvcmVpZ25MaXN0LFxuICAgIG9uQ2FuY2VsOiAoKSA9PiB7XG4gICAgICBvbkNoYW5nZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHZhbHVlKSwge30sIHtcbiAgICAgICAgaXRlbUJlaW5nQ3JlYXRlZDogZmFsc2VcbiAgICAgIH0pKTtcbiAgICB9LFxuICAgIG9uQ3JlYXRlOiBpdGVtR2V0dGVyID0+IHtcbiAgICAgIGNvbnN0IGlkID0gaXRlbUdldHRlci5kYXRhLmlkO1xuICAgICAgc2V0SXRlbXMoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBpdGVtcyksIHt9LCB7XG4gICAgICAgIFtpZF06IGl0ZW1HZXR0ZXJcbiAgICAgIH0pKTtcbiAgICAgIG9uQ2hhbmdlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdmFsdWUpLCB7fSwge1xuICAgICAgICBpdGVtQmVpbmdDcmVhdGVkOiBmYWxzZSxcbiAgICAgICAgY3VycmVudElkczogZmllbGQubWFueSA/IG5ldyBTZXQoWy4uLnZhbHVlLmN1cnJlbnRJZHMsIGlkXSkgOiBuZXcgU2V0KFtpZF0pXG4gICAgICB9KSk7XG4gICAgfVxuICB9KSkgOiBmaWVsZC5kaXNwbGF5LmlubGluZUNyZWF0ZSB8fCBmaWVsZC5kaXNwbGF5LmlubGluZUNvbm5lY3QgPyBjb3JlLmpzeChDYXJkQ29udGFpbmVyLCB7XG4gICAgbW9kZTogXCJjcmVhdGVcIlxuICB9LCBjb3JlLmpzeChjb3JlLlN0YWNrLCB7XG4gICAgZ2FwOiBcInNtYWxsXCIsXG4gICAgbWFyZ2luVG9wOiBcIm1lZGl1bVwiLFxuICAgIGFjcm9zczogdHJ1ZVxuICB9LCBmaWVsZC5kaXNwbGF5LmlubGluZUNyZWF0ZSAmJiBjb3JlLmpzeChidXR0b24uQnV0dG9uLCB7XG4gICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgIGRpc2FibGVkOiBvbkNoYW5nZSA9PT0gdW5kZWZpbmVkLFxuICAgIHRvbmU6IFwicG9zaXRpdmVcIixcbiAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICBvbkNoYW5nZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHZhbHVlKSwge30sIHtcbiAgICAgICAgaXRlbUJlaW5nQ3JlYXRlZDogdHJ1ZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwgXCJDcmVhdGUgXCIsIGZvcmVpZ25MaXN0LnNpbmd1bGFyKSwgZmllbGQuZGlzcGxheS5pbmxpbmVDb25uZWN0ICYmIGNvcmUuanN4KGJ1dHRvbi5CdXR0b24sIHtcbiAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgd2VpZ2h0OiBcIm5vbmVcIixcbiAgICB0b25lOiBcInBhc3NpdmVcIixcbiAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICBzZXRTaG93Q29ubmVjdEl0ZW1zKHRydWUpO1xuICAgICAgc2V0SGlkZUNvbm5lY3RJdGVtc0xhYmVsKCdDYW5jZWwnKTtcbiAgICB9XG4gIH0sIFwiTGluayBleGlzdGluZyBcIiwgZm9yZWlnbkxpc3Quc2luZ3VsYXIpKSkgOiBudWxsLCBmb3JjZVZhbGlkYXRpb24gJiYgY29yZS5qc3goY29yZS5UZXh0LCB7XG4gICAgY29sb3I6IFwicmVkNjAwXCIsXG4gICAgc2l6ZTogXCJzbWFsbFwiXG4gIH0sIFwiWW91IG11c3QgZmluaXNoIGNyZWF0aW5nIGFuZCBlZGl0aW5nIGFueSByZWxhdGVkIFwiLCBmb3JlaWduTGlzdC5sYWJlbC50b0xvd2VyQ2FzZSgpLCBcIiBiZWZvcmUgc2F2aW5nIHRoZSBcIiwgbG9jYWxMaXN0LnNpbmd1bGFyLnRvTG93ZXJDYXNlKCkpKTtcbn1cblxuZnVuY3Rpb24gTGlua1RvUmVsYXRlZEl0ZW1zKF9yZWYpIHtcbiAgdmFyIF92YWx1ZSR2YWx1ZTtcblxuICBsZXQge1xuICAgIGl0ZW1JZCxcbiAgICB2YWx1ZSxcbiAgICBsaXN0LFxuICAgIHJlZkZpZWxkS2V5XG4gIH0gPSBfcmVmO1xuXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdFF1ZXJ5KF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlZkZpZWxkS2V5LFxuICAgICAgaXRlbUlkLFxuICAgICAgdmFsdWVcbiAgICB9ID0gX3JlZjI7XG5cbiAgICBpZiAoISFyZWZGaWVsZEtleSAmJiBpdGVtSWQpIHtcbiAgICAgIHJldHVybiBgISR7cmVmRmllbGRLZXl9X21hdGNoZXM9XCIke2l0ZW1JZH1cImA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAhaWRfaW49XCIkeyh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudmFsdWUpLnNsaWNlKDAsIDEwMCkubWFwKF9yZWYzID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGlkXG4gICAgICB9ID0gX3JlZjM7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfSkuam9pbignLCcpfVwiYDtcbiAgfVxuXG4gIGNvbnN0IGNvbW1vblByb3BzID0ge1xuICAgIHNpemU6ICdzbWFsbCcsXG4gICAgdG9uZTogJ2FjdGl2ZScsXG4gICAgd2VpZ2h0OiAnbGluaydcbiAgfTtcblxuICBpZiAodmFsdWUua2luZCA9PT0gJ21hbnknKSB7XG4gICAgY29uc3QgcXVlcnkgPSBjb25zdHJ1Y3RRdWVyeSh7XG4gICAgICByZWZGaWVsZEtleSxcbiAgICAgIHZhbHVlLFxuICAgICAgaXRlbUlkXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvcmUuanN4KGJ1dHRvbi5CdXR0b24sIF9leHRlbmRzKHt9LCBjb21tb25Qcm9wcywge1xuICAgICAgYXM6IGFkbWluVWlfcm91dGVyX2Rpc3Rfa2V5c3RvbmVOZXh0S2V5c3RvbmVBZG1pblVpUm91dGVyLkxpbmssXG4gICAgICBocmVmOiBgLyR7bGlzdC5wYXRofT8ke3F1ZXJ5fWBcbiAgICB9KSwgXCJWaWV3IHJlbGF0ZWQgXCIsIGxpc3QucGx1cmFsKTtcbiAgfVxuXG4gIHJldHVybiBjb3JlLmpzeChidXR0b24uQnV0dG9uLCBfZXh0ZW5kcyh7fSwgY29tbW9uUHJvcHMsIHtcbiAgICBhczogYWRtaW5VaV9yb3V0ZXJfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUFkbWluVWlSb3V0ZXIuTGluayxcbiAgICBocmVmOiBgLyR7bGlzdC5wYXRofS8keyhfdmFsdWUkdmFsdWUgPSB2YWx1ZS52YWx1ZSkgPT09IG51bGwgfHwgX3ZhbHVlJHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdmFsdWUkdmFsdWUuaWR9YFxuICB9KSwgXCJWaWV3IFwiLCBsaXN0LnNpbmd1bGFyLCBcIiBkZXRhaWxzXCIpO1xufVxuXG5jb25zdCBSZWxhdGlvbnNoaXBMaW5rQnV0dG9uID0gX3JlZjQgPT4ge1xuICBsZXQge1xuICAgIGhyZWYsXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY0O1xuICByZXR1cm4gY29yZS5qc3goYnV0dG9uLkJ1dHRvbiwge1xuICAgIGNzczoge1xuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgfSxcbiAgICB3ZWlnaHQ6IFwibGlua1wiLFxuICAgIHRvbmU6IFwiYWN0aXZlXCIsXG4gICAgYXM6IGFkbWluVWlfcm91dGVyX2Rpc3Rfa2V5c3RvbmVOZXh0S2V5c3RvbmVBZG1pblVpUm91dGVyLkxpbmssXG4gICAgaHJlZjogaHJlZlxuICB9LCBjaGlsZHJlbik7XG59O1xuXG5jb25zdCBSZWxhdGlvbnNoaXBEaXNwbGF5ID0gX3JlZjUgPT4ge1xuICBsZXQge1xuICAgIGxpc3QsXG4gICAgdmFsdWVcbiAgfSA9IF9yZWY1O1xuXG4gIGlmICh2YWx1ZS5raW5kID09PSAnbWFueScpIHtcbiAgICBpZiAodmFsdWUudmFsdWUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY29yZS5qc3goY29yZS5JbmxpbmUsIHtcbiAgICAgICAgZ2FwOiBcInNtYWxsXCJcbiAgICAgIH0sIHZhbHVlLnZhbHVlLm1hcChpID0+IGNvcmUuanN4KFJlbGF0aW9uc2hpcExpbmtCdXR0b24sIHtcbiAgICAgICAgaHJlZjogYC8ke2xpc3QucGF0aH0vJHtpLmlkfWBcbiAgICAgIH0sIGkubGFiZWwpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb3JlLmpzeChcImRpdlwiLCBudWxsLCBcIihObyBcIiwgbGlzdC5wbHVyYWwsIFwiKVwiKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlLnZhbHVlKSB7XG4gICAgICByZXR1cm4gY29yZS5qc3goUmVsYXRpb25zaGlwTGlua0J1dHRvbiwge1xuICAgICAgICBocmVmOiBgLyR7bGlzdC5wYXRofS8ke3ZhbHVlLnZhbHVlLmlkfWBcbiAgICAgIH0sIHZhbHVlLnZhbHVlLmxhYmVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvcmUuanN4KFwiZGl2XCIsIG51bGwsIFwiKE5vIFwiLCBsaXN0LnNpbmd1bGFyLCBcIilcIik7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBGaWVsZCA9IF9yZWY2ID0+IHtcbiAgbGV0IHtcbiAgICBmaWVsZCxcbiAgICBhdXRvRm9jdXMsXG4gICAgdmFsdWUsXG4gICAgb25DaGFuZ2UsXG4gICAgZm9yY2VWYWxpZGF0aW9uXG4gIH0gPSBfcmVmNjtcbiAgY29uc3Qga2V5c3RvbmUgPSBhZG1pblVpX2NvbnRleHRfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUFkbWluVWlDb250ZXh0LnVzZUtleXN0b25lKCk7XG4gIGNvbnN0IGZvcmVpZ25MaXN0ID0gYWRtaW5VaV9jb250ZXh0X2Rpc3Rfa2V5c3RvbmVOZXh0S2V5c3RvbmVBZG1pblVpQ29udGV4dC51c2VMaXN0KGZpZWxkLnJlZkxpc3RLZXkpO1xuICBjb25zdCBsb2NhbExpc3QgPSBhZG1pblVpX2NvbnRleHRfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUFkbWluVWlDb250ZXh0LnVzZUxpc3QoZmllbGQubGlzdEtleSk7XG4gIGNvbnN0IFtpc0RyYXdlck9wZW4sIHNldElzRHJhd2VyT3Blbl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgaWYgKHZhbHVlLmtpbmQgPT09ICdjYXJkcy12aWV3Jykge1xuICAgIHJldHVybiBjb3JlLmpzeChmaWVsZHMuRmllbGRDb250YWluZXIsIHtcbiAgICAgIGFzOiBcImZpZWxkc2V0XCJcbiAgICB9LCBjb3JlLmpzeChmaWVsZHMuRmllbGRMZWdlbmQsIG51bGwsIGZpZWxkLmxhYmVsKSwgY29yZS5qc3goQ2FyZHMsIHtcbiAgICAgIGZvcmNlVmFsaWRhdGlvbjogZm9yY2VWYWxpZGF0aW9uLFxuICAgICAgZmllbGQ6IGZpZWxkLFxuICAgICAgaWQ6IHZhbHVlLmlkLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgZm9yZWlnbkxpc3Q6IGZvcmVpZ25MaXN0LFxuICAgICAgbG9jYWxMaXN0OiBsb2NhbExpc3RcbiAgICB9KSk7XG4gIH1cblxuICBpZiAodmFsdWUua2luZCA9PT0gJ2NvdW50Jykge1xuICAgIHJldHVybiBjb3JlLmpzeChjb3JlLlN0YWNrLCB7XG4gICAgICBhczogXCJmaWVsZHNldFwiLFxuICAgICAgZ2FwOiBcIm1lZGl1bVwiXG4gICAgfSwgY29yZS5qc3goZmllbGRzLkZpZWxkTGVnZW5kLCBudWxsLCBmaWVsZC5sYWJlbCksIGNvcmUuanN4KFwiZGl2XCIsIG51bGwsIHZhbHVlLmNvdW50ID09PSAxID8gYFRoZXJlIGlzIDEgJHtmb3JlaWduTGlzdC5zaW5ndWxhcn0gYCA6IGBUaGVyZSBhcmUgJHt2YWx1ZS5jb3VudH0gJHtmb3JlaWduTGlzdC5wbHVyYWx9IGAsIFwibGlua2VkIHRvIHRoaXMgXCIsIGxvY2FsTGlzdC5zaW5ndWxhcikpO1xuICB9XG5cbiAgcmV0dXJuIGNvcmUuanN4KGZpZWxkcy5GaWVsZENvbnRhaW5lciwge1xuICAgIGFzOiBcImZpZWxkc2V0XCJcbiAgfSwgY29yZS5qc3goZmllbGRzLkZpZWxkTGFiZWwsIHtcbiAgICBhczogXCJsZWdlbmRcIlxuICB9LCBmaWVsZC5sYWJlbCksIG9uQ2hhbmdlID8gY29yZS5qc3goUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNvcmUuanN4KGNvcmUuU3RhY2ssIHtcbiAgICBnYXA6IFwibWVkaXVtXCJcbiAgfSwgY29yZS5qc3goZmllbGRzX3R5cGVzX3JlbGF0aW9uc2hpcF92aWV3c19SZWxhdGlvbnNoaXBTZWxlY3RfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUZpZWxkc1R5cGVzUmVsYXRpb25zaGlwVmlld3NSZWxhdGlvbnNoaXBTZWxlY3QuUmVsYXRpb25zaGlwU2VsZWN0LCB7XG4gICAgY29udHJvbFNob3VsZFJlbmRlclZhbHVlOiB0cnVlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGlzRGlzYWJsZWQ6IG9uQ2hhbmdlID09PSB1bmRlZmluZWQsXG4gICAgbGlzdDogZm9yZWlnbkxpc3QsXG4gICAgcG9ydGFsTWVudTogdHJ1ZSxcbiAgICBzdGF0ZTogdmFsdWUua2luZCA9PT0gJ21hbnknID8ge1xuICAgICAga2luZDogJ21hbnknLFxuICAgICAgdmFsdWU6IHZhbHVlLnZhbHVlLFxuXG4gICAgICBvbkNoYW5nZShuZXdJdGVtcykge1xuICAgICAgICBvbkNoYW5nZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHZhbHVlKSwge30sIHtcbiAgICAgICAgICB2YWx1ZTogbmV3SXRlbXNcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgfSA6IHtcbiAgICAgIGtpbmQ6ICdvbmUnLFxuICAgICAgdmFsdWU6IHZhbHVlLnZhbHVlLFxuXG4gICAgICBvbkNoYW5nZShuZXdWYWwpIHtcbiAgICAgICAgaWYgKHZhbHVlLmtpbmQgPT09ICdvbmUnKSB7XG4gICAgICAgICAgb25DaGFuZ2UoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2YWx1ZSksIHt9LCB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3VmFsXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9XG4gIH0pLCBjb3JlLmpzeChjb3JlLlN0YWNrLCB7XG4gICAgYWNyb3NzOiB0cnVlLFxuICAgIGdhcDogXCJzbWFsbFwiXG4gIH0sICFmaWVsZC5oaWRlQ3JlYXRlICYmIGNvcmUuanN4KGJ1dHRvbi5CdXR0b24sIHtcbiAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgZGlzYWJsZWQ6IGlzRHJhd2VyT3BlbixcbiAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICBzZXRJc0RyYXdlck9wZW4odHJ1ZSk7XG4gICAgfVxuICB9LCBcIkNyZWF0ZSByZWxhdGVkIFwiLCBmb3JlaWduTGlzdC5zaW5ndWxhciksIGtleXN0b25lLmF1dGhlbnRpY2F0ZWRJdGVtLnN0YXRlID09PSAnYXV0aGVudGljYXRlZCcgJiYga2V5c3RvbmUuYXV0aGVudGljYXRlZEl0ZW0ubGlzdEtleSA9PT0gZmllbGQucmVmTGlzdEtleSAmJiBjb3JlLmpzeChidXR0b24uQnV0dG9uLCB7XG4gICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgIGlzRGlzYWJsZWQ6IG9uQ2hhbmdlID09PSB1bmRlZmluZWQsXG4gICAgb25DbGljazogKCkgPT4ge1xuICAgICAgaWYgKGtleXN0b25lLmF1dGhlbnRpY2F0ZWRJdGVtLnN0YXRlID09PSAnYXV0aGVudGljYXRlZCcpIHtcbiAgICAgICAgY29uc3QgdmFsID0ge1xuICAgICAgICAgIGxhYmVsOiBrZXlzdG9uZS5hdXRoZW50aWNhdGVkSXRlbS5sYWJlbCxcbiAgICAgICAgICBpZDoga2V5c3RvbmUuYXV0aGVudGljYXRlZEl0ZW0uaWRcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodmFsdWUua2luZCA9PT0gJ21hbnknKSB7XG4gICAgICAgICAgb25DaGFuZ2UoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2YWx1ZSksIHt9LCB7XG4gICAgICAgICAgICB2YWx1ZTogWy4uLnZhbHVlLnZhbHVlLCB2YWxdXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uQ2hhbmdlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdmFsdWUpLCB7fSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwgdmFsdWUua2luZCA9PT0gJ21hbnknID8gJ0FkZCAnIDogJ1NldCBhcyAnLCBrZXlzdG9uZS5hdXRoZW50aWNhdGVkSXRlbS5sYWJlbCksICEhKHZhbHVlLmtpbmQgPT09ICdtYW55JyA/IHZhbHVlLnZhbHVlLmxlbmd0aCA6IHZhbHVlLmtpbmQgPT09ICdvbmUnICYmIHZhbHVlLnZhbHVlKSAmJiBjb3JlLmpzeChMaW5rVG9SZWxhdGVkSXRlbXMsIHtcbiAgICBpdGVtSWQ6IHZhbHVlLmlkLFxuICAgIHJlZkZpZWxkS2V5OiBmaWVsZC5yZWZGaWVsZEtleSxcbiAgICBsaXN0OiBmb3JlaWduTGlzdCxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSkpKSwgY29yZS5qc3gobW9kYWxzLkRyYXdlckNvbnRyb2xsZXIsIHtcbiAgICBpc09wZW46IGlzRHJhd2VyT3BlblxuICB9LCBjb3JlLmpzeChDcmVhdGVJdGVtRHJhd2VyLkNyZWF0ZUl0ZW1EcmF3ZXIsIHtcbiAgICBsaXN0S2V5OiBmb3JlaWduTGlzdC5rZXksXG4gICAgb25DbG9zZTogKCkgPT4ge1xuICAgICAgc2V0SXNEcmF3ZXJPcGVuKGZhbHNlKTtcbiAgICB9LFxuICAgIG9uQ3JlYXRlOiB2YWwgPT4ge1xuICAgICAgc2V0SXNEcmF3ZXJPcGVuKGZhbHNlKTtcblxuICAgICAgaWYgKHZhbHVlLmtpbmQgPT09ICdtYW55Jykge1xuICAgICAgICBvbkNoYW5nZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHZhbHVlKSwge30sIHtcbiAgICAgICAgICB2YWx1ZTogWy4uLnZhbHVlLnZhbHVlLCB2YWxdXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUua2luZCA9PT0gJ29uZScpIHtcbiAgICAgICAgb25DaGFuZ2UoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2YWx1ZSksIHt9LCB7XG4gICAgICAgICAgdmFsdWU6IHZhbFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuICB9KSkpIDogY29yZS5qc3goUmVsYXRpb25zaGlwRGlzcGxheSwge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBsaXN0OiBmb3JlaWduTGlzdFxuICB9KSk7XG59O1xuY29uc3QgQ2VsbCA9IF9yZWY3ID0+IHtcbiAgbGV0IHtcbiAgICBmaWVsZCxcbiAgICBpdGVtXG4gIH0gPSBfcmVmNztcbiAgY29uc3QgbGlzdCA9IGFkbWluVWlfY29udGV4dF9kaXN0X2tleXN0b25lTmV4dEtleXN0b25lQWRtaW5VaUNvbnRleHQudXNlTGlzdChmaWVsZC5yZWZMaXN0S2V5KTtcbiAgY29uc3Qge1xuICAgIGNvbG9yc1xuICB9ID0gY29yZS51c2VUaGVtZSgpO1xuXG4gIGlmIChmaWVsZC5kaXNwbGF5Lm1vZGUgPT09ICdjb3VudCcpIHtcbiAgICB2YXIgX2l0ZW0kO1xuXG4gICAgY29uc3QgY291bnQgPSAoX2l0ZW0kID0gaXRlbVtgJHtmaWVsZC5wYXRofUNvdW50YF0pICE9PSBudWxsICYmIF9pdGVtJCAhPT0gdm9pZCAwID8gX2l0ZW0kIDogMDtcbiAgICByZXR1cm4gY29yZS5qc3goQ2VsbENvbnRhaW5lci5DZWxsQ29udGFpbmVyLCBudWxsLCBjb3VudCwgXCIgXCIsIGNvdW50ID09PSAxID8gbGlzdC5zaW5ndWxhciA6IGxpc3QucGx1cmFsKTtcbiAgfVxuXG4gIGNvbnN0IGRhdGEgPSBpdGVtW2ZpZWxkLnBhdGhdO1xuICBjb25zdCBpdGVtcyA9IChBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtkYXRhXSkuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XG4gIGNvbnN0IGRpc3BsYXlJdGVtcyA9IGl0ZW1zLmxlbmd0aCA8IDUgPyBpdGVtcyA6IGl0ZW1zLnNsaWNlKDAsIDMpO1xuICBjb25zdCBvdmVyZmxvdyA9IGl0ZW1zLmxlbmd0aCA8IDUgPyAwIDogaXRlbXMubGVuZ3RoIC0gMztcbiAgY29uc3Qgc3R5bGVzID0ge1xuICAgIGNvbG9yOiBjb2xvcnMuZm9yZWdyb3VuZCxcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICc6aG92ZXInOiB7XG4gICAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZSdcbiAgICB9XG4gIH07XG4gIHJldHVybiBjb3JlLmpzeChDZWxsQ29udGFpbmVyLkNlbGxDb250YWluZXIsIG51bGwsIGRpc3BsYXlJdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiBjb3JlLmpzeChSZWFjdC5GcmFnbWVudCwge1xuICAgIGtleTogaXRlbS5pZFxuICB9LCAhIWluZGV4ID8gJywgJyA6ICcnLCBjb3JlLmpzeChhZG1pblVpX3JvdXRlcl9kaXN0X2tleXN0b25lTmV4dEtleXN0b25lQWRtaW5VaVJvdXRlci5MaW5rLCB7XG4gICAgaHJlZjogYC8ke2xpc3QucGF0aH0vW2lkXWAsXG4gICAgYXM6IGAvJHtsaXN0LnBhdGh9LyR7aXRlbS5pZH1gLFxuICAgIGNzczogc3R5bGVzXG4gIH0sIGl0ZW0ubGFiZWwgfHwgaXRlbS5pZCkpKSwgb3ZlcmZsb3cgPyBgLCBhbmQgJHtvdmVyZmxvd30gbW9yZWAgOiBudWxsKTtcbn07XG5jb25zdCBDYXJkVmFsdWUgPSBfcmVmOCA9PiB7XG4gIGxldCB7XG4gICAgZmllbGQsXG4gICAgaXRlbVxuICB9ID0gX3JlZjg7XG4gIGNvbnN0IGxpc3QgPSBhZG1pblVpX2NvbnRleHRfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUFkbWluVWlDb250ZXh0LnVzZUxpc3QoZmllbGQucmVmTGlzdEtleSk7XG4gIGNvbnN0IGRhdGEgPSBpdGVtW2ZpZWxkLnBhdGhdO1xuICByZXR1cm4gY29yZS5qc3goZmllbGRzLkZpZWxkQ29udGFpbmVyLCBudWxsLCBjb3JlLmpzeChmaWVsZHMuRmllbGRMYWJlbCwgbnVsbCwgZmllbGQubGFiZWwpLCAoQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV0pLmZpbHRlcihpdGVtID0+IGl0ZW0pLm1hcCgoaXRlbSwgaW5kZXgpID0+IGNvcmUuanN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAga2V5OiBpdGVtLmlkXG4gIH0sICEhaW5kZXggPyAnLCAnIDogJycsIGNvcmUuanN4KGFkbWluVWlfcm91dGVyX2Rpc3Rfa2V5c3RvbmVOZXh0S2V5c3RvbmVBZG1pblVpUm91dGVyLkxpbmssIHtcbiAgICBocmVmOiBgLyR7bGlzdC5wYXRofS9baWRdYCxcbiAgICBhczogYC8ke2xpc3QucGF0aH0vJHtpdGVtLmlkfWBcbiAgfSwgaXRlbS5sYWJlbCB8fCBpdGVtLmlkKSkpKTtcbn07XG5jb25zdCBjb250cm9sbGVyID0gY29uZmlnID0+IHtcbiAgcmV0dXJuIHtcbiAgICByZWZGaWVsZEtleTogY29uZmlnLmZpZWxkTWV0YS5yZWZGaWVsZEtleSxcbiAgICBtYW55OiBjb25maWcuZmllbGRNZXRhLm1hbnksXG4gICAgbGlzdEtleTogY29uZmlnLmxpc3RLZXksXG4gICAgcGF0aDogY29uZmlnLnBhdGgsXG4gICAgbGFiZWw6IGNvbmZpZy5sYWJlbCxcbiAgICBkaXNwbGF5OiBjb25maWcuZmllbGRNZXRhLmRpc3BsYXlNb2RlID09PSAnY2FyZHMnID8ge1xuICAgICAgbW9kZTogJ2NhcmRzJyxcbiAgICAgIGNhcmRGaWVsZHM6IGNvbmZpZy5maWVsZE1ldGEuY2FyZEZpZWxkcyxcbiAgICAgIGlubGluZUNyZWF0ZTogY29uZmlnLmZpZWxkTWV0YS5pbmxpbmVDcmVhdGUsXG4gICAgICBpbmxpbmVFZGl0OiBjb25maWcuZmllbGRNZXRhLmlubGluZUVkaXQsXG4gICAgICBsaW5rVG9JdGVtOiBjb25maWcuZmllbGRNZXRhLmxpbmtUb0l0ZW0sXG4gICAgICByZW1vdmVNb2RlOiBjb25maWcuZmllbGRNZXRhLnJlbW92ZU1vZGUsXG4gICAgICBpbmxpbmVDb25uZWN0OiBjb25maWcuZmllbGRNZXRhLmlubGluZUNvbm5lY3RcbiAgICB9IDogY29uZmlnLmZpZWxkTWV0YS5kaXNwbGF5TW9kZSA9PT0gJ2NvdW50JyA/IHtcbiAgICAgIG1vZGU6ICdjb3VudCdcbiAgICB9IDoge1xuICAgICAgbW9kZTogJ3NlbGVjdCcsXG4gICAgICByZWZMYWJlbEZpZWxkOiBjb25maWcuZmllbGRNZXRhLnJlZkxhYmVsRmllbGRcbiAgICB9LFxuICAgIHJlZkxpc3RLZXk6IGNvbmZpZy5maWVsZE1ldGEucmVmTGlzdEtleSxcbiAgICBncmFwaHFsU2VsZWN0aW9uOiBjb25maWcuZmllbGRNZXRhLmRpc3BsYXlNb2RlID09PSAnY2FyZHMnID8gYCR7Y29uZmlnLnBhdGh9IHtcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgICBsYWJlbDogJHtjb25maWcuZmllbGRNZXRhLnJlZkxhYmVsRmllbGR9XG4gICAgICAgICAgfWAgOiBjb25maWcuZmllbGRNZXRhLmRpc3BsYXlNb2RlID09PSAnY291bnQnID8gYCR7Y29uZmlnLnBhdGh9Q291bnRgIDogYCR7Y29uZmlnLnBhdGh9IHtcbiAgICAgICAgICAgICAgaWRcbiAgICAgICAgICAgICAgbGFiZWw6ICR7Y29uZmlnLmZpZWxkTWV0YS5yZWZMYWJlbEZpZWxkfVxuICAgICAgICAgICAgfWAsXG4gICAgaGlkZUNyZWF0ZTogY29uZmlnLmZpZWxkTWV0YS5oaWRlQ3JlYXRlLFxuICAgIGRlZmF1bHRWYWx1ZTogY29uZmlnLmZpZWxkTWV0YS5tYW55ID8ge1xuICAgICAgaWQ6IG51bGwsXG4gICAgICBraW5kOiAnbWFueScsXG4gICAgICBpbml0aWFsVmFsdWU6IFtdLFxuICAgICAgdmFsdWU6IFtdXG4gICAgfSA6IHtcbiAgICAgIGlkOiBudWxsLFxuICAgICAga2luZDogJ29uZScsXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGluaXRpYWxWYWx1ZTogbnVsbFxuICAgIH0sXG4gICAgZGVzZXJpYWxpemU6IGRhdGEgPT4ge1xuICAgICAgaWYgKGNvbmZpZy5maWVsZE1ldGEuZGlzcGxheU1vZGUgPT09ICdjb3VudCcpIHtcbiAgICAgICAgdmFyIF9kYXRhJDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgIGtpbmQ6ICdjb3VudCcsXG4gICAgICAgICAgY291bnQ6IChfZGF0YSQgPSBkYXRhW2Ake2NvbmZpZy5wYXRofUNvdW50YF0pICE9PSBudWxsICYmIF9kYXRhJCAhPT0gdm9pZCAwID8gX2RhdGEkIDogMFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLmZpZWxkTWV0YS5kaXNwbGF5TW9kZSA9PT0gJ2NhcmRzJykge1xuICAgICAgICBjb25zdCBpbml0aWFsSWRzID0gbmV3IFNldCgoQXJyYXkuaXNBcnJheShkYXRhW2NvbmZpZy5wYXRoXSkgPyBkYXRhW2NvbmZpZy5wYXRoXSA6IGRhdGFbY29uZmlnLnBhdGhdID8gW2RhdGFbY29uZmlnLnBhdGhdXSA6IFtdKS5tYXAoeCA9PiB4LmlkKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogJ2NhcmRzLXZpZXcnLFxuICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgIGl0ZW1zQmVpbmdFZGl0ZWQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICBpdGVtQmVpbmdDcmVhdGVkOiBmYWxzZSxcbiAgICAgICAgICBpbml0aWFsSWRzLFxuICAgICAgICAgIGN1cnJlbnRJZHM6IGluaXRpYWxJZHNcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5maWVsZE1ldGEubWFueSkge1xuICAgICAgICBsZXQgdmFsdWUgPSAoZGF0YVtjb25maWcucGF0aF0gfHwgW10pLm1hcCh4ID0+ICh7XG4gICAgICAgICAgaWQ6IHguaWQsXG4gICAgICAgICAgbGFiZWw6IHgubGFiZWwgfHwgeC5pZFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogJ21hbnknLFxuICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgIGluaXRpYWxWYWx1ZTogdmFsdWUsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbGV0IHZhbHVlID0gZGF0YVtjb25maWcucGF0aF07XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHtcbiAgICAgICAgICBpZDogdmFsdWUuaWQsXG4gICAgICAgICAgbGFiZWw6IHZhbHVlLmxhYmVsIHx8IHZhbHVlLmlkXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6ICdvbmUnLFxuICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGluaXRpYWxWYWx1ZTogdmFsdWVcbiAgICAgIH07XG4gICAgfSxcbiAgICBmaWx0ZXI6IHtcbiAgICAgIEZpbHRlcjogX3JlZjkgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0gPSBfcmVmOTtcbiAgICAgICAgY29uc3QgZm9yZWlnbkxpc3QgPSBhZG1pblVpX2NvbnRleHRfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUFkbWluVWlDb250ZXh0LnVzZUxpc3QoY29uZmlnLmZpZWxkTWV0YS5yZWZMaXN0S2V5KTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGZpbHRlclZhbHVlcyxcbiAgICAgICAgICBsb2FkaW5nXG4gICAgICAgIH0gPSB1c2VSZWxhdGlvbnNoaXBGaWx0ZXJWYWx1ZXMoe1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGxpc3Q6IGZvcmVpZ25MaXN0XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgICAgICBraW5kOiAnbWFueScsXG4gICAgICAgICAgdmFsdWU6IGZpbHRlclZhbHVlcyxcblxuICAgICAgICAgIG9uQ2hhbmdlKG5ld0l0ZW1zKSB7XG4gICAgICAgICAgICBvbkNoYW5nZShuZXdJdGVtcy5tYXAoaXRlbSA9PiBpdGVtLmlkKS5qb2luKCcsJykpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gY29yZS5qc3goZmllbGRzX3R5cGVzX3JlbGF0aW9uc2hpcF92aWV3c19SZWxhdGlvbnNoaXBTZWxlY3RfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUZpZWxkc1R5cGVzUmVsYXRpb25zaGlwVmlld3NSZWxhdGlvbnNoaXBTZWxlY3QuUmVsYXRpb25zaGlwU2VsZWN0LCB7XG4gICAgICAgICAgY29udHJvbFNob3VsZFJlbmRlclZhbHVlOiB0cnVlLFxuICAgICAgICAgIGxpc3Q6IGZvcmVpZ25MaXN0LFxuICAgICAgICAgIGlzTG9hZGluZzogbG9hZGluZyxcbiAgICAgICAgICBpc0Rpc2FibGVkOiBvbkNoYW5nZSA9PT0gdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBncmFwaHFsOiBfcmVmMTAgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0gPSBfcmVmMTA7XG4gICAgICAgIGNvbnN0IGZvcmVpZ25JZHMgPSBnZXRGb3JlaWduSWRzKHZhbHVlKTtcblxuICAgICAgICBpZiAoY29uZmlnLmZpZWxkTWV0YS5tYW55KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtjb25maWcucGF0aF06IHtcbiAgICAgICAgICAgICAgc29tZToge1xuICAgICAgICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICAgICAgICBpbjogZm9yZWlnbklkc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtjb25maWcucGF0aF06IHtcbiAgICAgICAgICAgIGlkOiB7XG4gICAgICAgICAgICAgIGluOiBmb3JlaWduSWRzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgTGFiZWwoX3JlZjExKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSA9IF9yZWYxMTtcbiAgICAgICAgY29uc3QgZm9yZWlnbkxpc3QgPSBhZG1pblVpX2NvbnRleHRfZGlzdF9rZXlzdG9uZU5leHRLZXlzdG9uZUFkbWluVWlDb250ZXh0LnVzZUxpc3QoY29uZmlnLmZpZWxkTWV0YS5yZWZMaXN0S2V5KTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGZpbHRlclZhbHVlc1xuICAgICAgICB9ID0gdXNlUmVsYXRpb25zaGlwRmlsdGVyVmFsdWVzKHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBsaXN0OiBmb3JlaWduTGlzdFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWZpbHRlclZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gYGhhcyBubyB2YWx1ZWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsdGVyVmFsdWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBmaWx0ZXJWYWx1ZXMubWFwKGkgPT4gaS5sYWJlbCkuam9pbignLCAnKTtcbiAgICAgICAgICByZXR1cm4gYGlzIGluIFske3ZhbHVlc31dYDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbkxhYmVsID0gZmlsdGVyVmFsdWVzWzBdLmxhYmVsO1xuICAgICAgICByZXR1cm4gYGlzICR7b3B0aW9uTGFiZWx9YDtcbiAgICAgIH0sXG5cbiAgICAgIHR5cGVzOiB7XG4gICAgICAgIG1hdGNoZXM6IHtcbiAgICAgICAgICBsYWJlbDogJ01hdGNoZXMnLFxuICAgICAgICAgIGluaXRpYWxWYWx1ZTogJydcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICB2YWxpZGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLmtpbmQgIT09ICdjYXJkcy12aWV3JyB8fCB2YWx1ZS5pdGVtc0JlaW5nRWRpdGVkLnNpemUgPT09IDAgJiYgIXZhbHVlLml0ZW1CZWluZ0NyZWF0ZWQ7XG4gICAgfSxcblxuICAgIHNlcmlhbGl6ZTogc3RhdGUgPT4ge1xuICAgICAgaWYgKHN0YXRlLmtpbmQgPT09ICdtYW55Jykge1xuICAgICAgICBjb25zdCBuZXdBbGxJZHMgPSBuZXcgU2V0KHN0YXRlLnZhbHVlLm1hcCh4ID0+IHguaWQpKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbElkcyA9IG5ldyBTZXQoc3RhdGUuaW5pdGlhbFZhbHVlLm1hcCh4ID0+IHguaWQpKTtcbiAgICAgICAgbGV0IGRpc2Nvbm5lY3QgPSBzdGF0ZS5pbml0aWFsVmFsdWUuZmlsdGVyKHggPT4gIW5ld0FsbElkcy5oYXMoeC5pZCkpLm1hcCh4ID0+ICh7XG4gICAgICAgICAgaWQ6IHguaWRcbiAgICAgICAgfSkpO1xuICAgICAgICBsZXQgY29ubmVjdCA9IHN0YXRlLnZhbHVlLmZpbHRlcih4ID0+ICFpbml0aWFsSWRzLmhhcyh4LmlkKSkubWFwKHggPT4gKHtcbiAgICAgICAgICBpZDogeC5pZFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKGRpc2Nvbm5lY3QubGVuZ3RoIHx8IGNvbm5lY3QubGVuZ3RoKSB7XG4gICAgICAgICAgbGV0IG91dHB1dCA9IHt9O1xuXG4gICAgICAgICAgaWYgKGRpc2Nvbm5lY3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBvdXRwdXQuZGlzY29ubmVjdCA9IGRpc2Nvbm5lY3Q7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNvbm5lY3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBvdXRwdXQuY29ubmVjdCA9IGNvbm5lY3Q7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtjb25maWcucGF0aF06IG91dHB1dFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUua2luZCA9PT0gJ29uZScpIHtcbiAgICAgICAgdmFyIF9zdGF0ZSRpbml0aWFsVmFsdWU7XG5cbiAgICAgICAgaWYgKHN0YXRlLmluaXRpYWxWYWx1ZSAmJiAhc3RhdGUudmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW2NvbmZpZy5wYXRoXToge1xuICAgICAgICAgICAgICBkaXNjb25uZWN0OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS52YWx1ZSAmJiBzdGF0ZS52YWx1ZS5pZCAhPT0gKChfc3RhdGUkaW5pdGlhbFZhbHVlID0gc3RhdGUuaW5pdGlhbFZhbHVlKSA9PT0gbnVsbCB8fCBfc3RhdGUkaW5pdGlhbFZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhdGUkaW5pdGlhbFZhbHVlLmlkKSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbY29uZmlnLnBhdGhdOiB7XG4gICAgICAgICAgICAgIGNvbm5lY3Q6IHtcbiAgICAgICAgICAgICAgICBpZDogc3RhdGUudmFsdWUuaWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUua2luZCA9PT0gJ2NhcmRzLXZpZXcnKSB7XG4gICAgICAgIGxldCBkaXNjb25uZWN0ID0gWy4uLnN0YXRlLmluaXRpYWxJZHNdLmZpbHRlcihpZCA9PiAhc3RhdGUuY3VycmVudElkcy5oYXMoaWQpKS5tYXAoaWQgPT4gKHtcbiAgICAgICAgICBpZFxuICAgICAgICB9KSk7XG4gICAgICAgIGxldCBjb25uZWN0ID0gWy4uLnN0YXRlLmN1cnJlbnRJZHNdLmZpbHRlcihpZCA9PiAhc3RhdGUuaW5pdGlhbElkcy5oYXMoaWQpKS5tYXAoaWQgPT4gKHtcbiAgICAgICAgICBpZFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5maWVsZE1ldGEubWFueSkge1xuICAgICAgICAgIGlmIChkaXNjb25uZWN0Lmxlbmd0aCB8fCBjb25uZWN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgW2NvbmZpZy5wYXRoXToge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Q6IGNvbm5lY3QubGVuZ3RoID8gY29ubmVjdCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBkaXNjb25uZWN0OiBkaXNjb25uZWN0Lmxlbmd0aCA/IGRpc2Nvbm5lY3QgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY29ubmVjdC5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW2NvbmZpZy5wYXRoXToge1xuICAgICAgICAgICAgICBjb25uZWN0OiBjb25uZWN0WzBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkaXNjb25uZWN0Lmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbY29uZmlnLnBhdGhdOiB7XG4gICAgICAgICAgICAgIGRpc2Nvbm5lY3Q6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiB1c2VSZWxhdGlvbnNoaXBGaWx0ZXJWYWx1ZXMoX3JlZjEyKSB7XG4gIHZhciBfZGF0YSRpdGVtcztcblxuICBsZXQge1xuICAgIHZhbHVlLFxuICAgIGxpc3RcbiAgfSA9IF9yZWYxMjtcbiAgY29uc3QgZm9yZWlnbklkcyA9IGdldEZvcmVpZ25JZHModmFsdWUpO1xuICBjb25zdCB3aGVyZSA9IHtcbiAgICBpZDoge1xuICAgICAgaW46IGZvcmVpZ25JZHNcbiAgICB9XG4gIH07XG4gIGNvbnN0IHF1ZXJ5ID0gY2xpZW50LmdxbGBcbiAgICBxdWVyeSBGT1JFSUdOTElTVF9RVUVSWSgkd2hlcmU6ICR7bGlzdC5ncWxOYW1lcy53aGVyZUlucHV0TmFtZX0hKSB7XG4gICAgICBpdGVtczogJHtsaXN0LmdxbE5hbWVzLmxpc3RRdWVyeU5hbWV9KHdoZXJlOiAkd2hlcmUpIHtcbiAgICAgICAgaWQgXG4gICAgICAgICR7bGlzdC5sYWJlbEZpZWxkfVxuICAgICAgfVxuICAgIH1cbiAgYDtcbiAgY29uc3Qge1xuICAgIGRhdGEsXG4gICAgbG9hZGluZ1xuICB9ID0gY2xpZW50LnVzZVF1ZXJ5KHF1ZXJ5LCB7XG4gICAgdmFyaWFibGVzOiB7XG4gICAgICB3aGVyZVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZmlsdGVyVmFsdWVzOiAoZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RhdGEkaXRlbXMgPSBkYXRhLml0ZW1zKSA9PT0gbnVsbCB8fCBfZGF0YSRpdGVtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RhdGEkaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIGxhYmVsOiBpdGVtW2xpc3QubGFiZWxGaWVsZF0gfHwgaXRlbS5pZFxuICAgICAgfTtcbiAgICB9KSkgfHwgZm9yZWlnbklkcy5tYXAoZiA9PiAoe1xuICAgICAgbGFiZWw6IGYsXG4gICAgICBpZDogZlxuICAgIH0pKSxcbiAgICBsb2FkaW5nOiBsb2FkaW5nXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEZvcmVpZ25JZHModmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB2YWx1ZS5zcGxpdCgnLCcpO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnRzLkNhcmRWYWx1ZSA9IENhcmRWYWx1ZTtcbmV4cG9ydHMuQ2VsbCA9IENlbGw7XG5leHBvcnRzLkZpZWxkID0gRmllbGQ7XG5leHBvcnRzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/relationship/views/dist/keystone-next-keystone-fields-types-relationship-views.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/relationship/views/dist/keystone-next-keystone-fields-types-relationship-views.cjs.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/relationship/views/dist/keystone-next-keystone-fields-types-relationship-views.cjs.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./keystone-next-keystone-fields-types-relationship-views.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/fields/types/relationship/views/dist/keystone-next-keystone-fields-types-relationship-views.cjs.dev.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy9yZWxhdGlvbnNoaXAvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1yZWxhdGlvbnNoaXAtdmlld3MuY2pzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSxvUUFBK0Y7QUFDakciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy9yZWxhdGlvbnNoaXAvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1yZWxhdGlvbnNoaXAtdmlld3MuY2pzLmpzP2I2NTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4va2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1maWVsZHMtdHlwZXMtcmVsYXRpb25zaGlwLXZpZXdzLmNqcy5wcm9kLmpzXCIpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1yZWxhdGlvbnNoaXAtdmlld3MuY2pzLmRldi5qc1wiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/relationship/views/dist/keystone-next-keystone-fields-types-relationship-views.cjs.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/select/views/dist/keystone-next-keystone-fields-types-select-views.cjs.dev.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/select/views/dist/keystone-next-keystone-fields-types-select-views.cjs.dev.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar segmentedControl = __webpack_require__(/*! @keystone-ui/segmented-control */ \"@keystone-ui/segmented-control\");\nvar button = __webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\nvar CellContainer = __webpack_require__(/*! ../../../../../dist/CellContainer-453254b5.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js\");\nvar CellLink = __webpack_require__(/*! ../../../../../dist/CellLink-dc41c877.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellLink-dc41c877.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"../../node_modules/@babel/runtime/helpers/defineProperty.js\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlertTriangleIcon */ \"@keystone-ui/icons/icons/AlertTriangleIcon\");\n__webpack_require__(/*! next/link */ \"../../node_modules/next/link.js\");\n__webpack_require__(/*! @keystone-ui/toast */ \"@keystone-ui/toast\");\n__webpack_require__(/*! @keystone-ui/loading */ \"@keystone-ui/loading\");\n__webpack_require__(/*! @keystone-ui/modals */ \"@keystone-ui/modals\");\n__webpack_require__(/*! apollo-upload-client */ \"apollo-upload-client\");\n__webpack_require__(/*! @emotion/hash */ \"@emotion/hash\");\n__webpack_require__(/*! ../../../../../dist/sqlite-a2385a81.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n__webpack_require__(/*! ../../../../../dist/graphql-ts-schema-2a220120.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\");\n__webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n__webpack_require__(/*! ../../../../../dist/admin-meta-graphql-9f9a9c11.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\n__webpack_require__(/*! next/router */ \"next/router\");\n__webpack_require__(/*! @keystone-ui/popover */ \"@keystone-ui/popover\");\n__webpack_require__(/*! @keystone-ui/icons/icons/MoreHorizontalIcon */ \"@keystone-ui/icons/icons/MoreHorizontalIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ChevronRightIcon */ \"@keystone-ui/icons/icons/ChevronRightIcon\");\n__webpack_require__(/*! ../../../../../dist/SignoutButton-081410d6.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js\");\n__webpack_require__(/*! fast-deep-equal */ \"fast-deep-equal\");\n__webpack_require__(/*! @keystone-ui/notice */ \"@keystone-ui/notice\");\n__webpack_require__(/*! ../../../../../admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js\");\n__webpack_require__(/*! decimal.js */ \"decimal.js\");\n__webpack_require__(/*! @graphql-tools/schema */ \"@graphql-tools/schema\");\n__webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\n__webpack_require__(/*! @graphql-ts/schema */ \"@graphql-ts/schema\");\n__webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\n__webpack_require__(/*! graphql-upload/public/GraphQLUpload.js */ \"graphql-upload/public/GraphQLUpload.js\");\n__webpack_require__(/*! graphql */ \"graphql\");\n__webpack_require__(/*! @graphql-ts/extend */ \"@graphql-ts/extend\");\n__webpack_require__(/*! @graphql-ts/schema/api-with-context */ \"@graphql-ts/schema/api-with-context\");\n\nconst Field = _ref => {\n  let {\n    field,\n    value,\n    onChange,\n    autoFocus,\n    forceValidation\n  } = _ref;\n  const [hasChanged, setHasChanged] = React.useState(false);\n  const validationMessage = (hasChanged || forceValidation) && !validate(value, field.isRequired) ? core.jsx(core.Text, {\n    color: \"red600\",\n    size: \"small\"\n  }, field.label, \" is required\") : null;\n  return core.jsx(fields.FieldContainer, {\n    as: field.displayMode === 'select' ? 'div' : 'fieldset'\n  }, field.displayMode === 'select' ? core.jsx(React.Fragment, null, core.jsx(fields.FieldLabel, {\n    htmlFor: field.path\n  }, field.label), core.jsx(fields.Select, {\n    id: field.path,\n    isClearable: true,\n    autoFocus: autoFocus,\n    options: field.options,\n    isDisabled: onChange === undefined,\n    onChange: newVal => {\n      onChange === null || onChange === void 0 ? void 0 : onChange(_objectSpread(_objectSpread({}, value), {}, {\n        value: newVal\n      }));\n      setHasChanged(true);\n    },\n    value: value.value,\n    portalMenu: true\n  }), validationMessage) : core.jsx(React.Fragment, null, core.jsx(fields.FieldLabel, {\n    as: \"legend\"\n  }, field.label), core.jsx(core.Stack, {\n    across: true,\n    gap: \"small\",\n    align: \"center\"\n  }, core.jsx(segmentedControl.SegmentedControl, {\n    segments: field.options.map(x => x.label),\n    selectedIndex: value.value ? field.options.findIndex(x => x.value === value.value.value) : undefined,\n    onChange: index => {\n      onChange === null || onChange === void 0 ? void 0 : onChange(_objectSpread(_objectSpread({}, value), {}, {\n        value: field.options[index]\n      }));\n      setHasChanged(true);\n    }\n  }), value.value !== null && onChange !== undefined && core.jsx(button.Button, {\n    onClick: () => {\n      onChange(_objectSpread(_objectSpread({}, value), {}, {\n        value: null\n      }));\n      setHasChanged(true);\n    }\n  }, \"Clear\")), validationMessage));\n};\nconst Cell = _ref2 => {\n  var _field$options$find;\n\n  let {\n    item,\n    field,\n    linkTo\n  } = _ref2;\n  let value = item[field.path] + '';\n  const label = (_field$options$find = field.options.find(x => x.value === value)) === null || _field$options$find === void 0 ? void 0 : _field$options$find.label;\n  return linkTo ? core.jsx(CellLink.CellLink, linkTo, label) : core.jsx(CellContainer.CellContainer, null, label);\n};\nCell.supportsLinkTo = true;\nconst CardValue = _ref3 => {\n  var _field$options$find2;\n\n  let {\n    item,\n    field\n  } = _ref3;\n  let value = item[field.path] + '';\n  const label = (_field$options$find2 = field.options.find(x => x.value === value)) === null || _field$options$find2 === void 0 ? void 0 : _field$options$find2.label;\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), label);\n};\n\nfunction validate(value, isRequired) {\n  if (isRequired) {\n    // if you got null initially on the update screen, we want to allow saving\n    // since the user probably doesn't have read access control\n    if (value.kind === 'update' && value.initial === null) {\n      return true;\n    }\n\n    return value.value !== null;\n  }\n\n  return true;\n}\n\nconst controller = config => {\n  var _config$fieldMeta$def, _optionsWithStringVal;\n\n  const optionsWithStringValues = config.fieldMeta.options.map(x => ({\n    label: x.label,\n    value: x.value.toString()\n  })); // Transform from string value to type appropriate value\n\n  const t = v => v === null ? null : config.fieldMeta.type === 'integer' ? parseInt(v) : v;\n\n  const stringifiedDefault = (_config$fieldMeta$def = config.fieldMeta.defaultValue) === null || _config$fieldMeta$def === void 0 ? void 0 : _config$fieldMeta$def.toString();\n  return {\n    path: config.path,\n    label: config.label,\n    graphqlSelection: config.path,\n    defaultValue: {\n      kind: 'create',\n      value: (_optionsWithStringVal = optionsWithStringValues.find(x => x.value === stringifiedDefault)) !== null && _optionsWithStringVal !== void 0 ? _optionsWithStringVal : null\n    },\n    type: config.fieldMeta.type,\n    displayMode: config.fieldMeta.displayMode,\n    isRequired: config.fieldMeta.isRequired,\n    options: optionsWithStringValues,\n    deserialize: data => {\n      for (const option of config.fieldMeta.options) {\n        if (option.value === data[config.path]) {\n          const stringifiedOption = {\n            label: option.label,\n            value: option.value.toString()\n          };\n          return {\n            kind: 'update',\n            initial: stringifiedOption,\n            value: stringifiedOption\n          };\n        }\n      }\n\n      return {\n        kind: 'update',\n        initial: null,\n        value: null\n      };\n    },\n    serialize: value => {\n      var _value$value$value, _value$value;\n\n      return {\n        [config.path]: t((_value$value$value = (_value$value = value.value) === null || _value$value === void 0 ? void 0 : _value$value.value) !== null && _value$value$value !== void 0 ? _value$value$value : null)\n      };\n    },\n    validate: value => validate(value, config.fieldMeta.isRequired),\n    filter: {\n      Filter(props) {\n        return core.jsx(fields.MultiSelect, {\n          onChange: props.onChange,\n          options: optionsWithStringValues,\n          value: props.value,\n          autoFocus: true\n        });\n      },\n\n      graphql: _ref4 => {\n        let {\n          type,\n          value: options\n        } = _ref4;\n        return {\n          [config.path]: {\n            [type === 'not_matches' ? 'notIn' : 'in']: options.map(x => t(x.value))\n          }\n        };\n      },\n\n      Label(_ref5) {\n        let {\n          type,\n          value\n        } = _ref5;\n\n        if (!value.length) {\n          return type === 'not_matches' ? `is set` : `has no value`;\n        }\n\n        if (value.length > 1) {\n          const values = value.map(i => i.label).join(', ');\n          return type === 'not_matches' ? `is not in [${values}]` : `is in [${values}]`;\n        }\n\n        const optionLabel = value[0].label;\n        return type === 'not_matches' ? `is not ${optionLabel}` : `is ${optionLabel}`;\n      },\n\n      types: {\n        matches: {\n          label: 'Matches',\n          initialValue: []\n        },\n        not_matches: {\n          label: 'Does not match',\n          initialValue: []\n        }\n      }\n    }\n  };\n};\n\nexports.CardValue = CardValue;\nexports.Cell = Cell;\nexports.Field = Field;\nexports.controller = controller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/select/views/dist/keystone-next-keystone-fields-types-select-views.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/select/views/dist/keystone-next-keystone-fields-types-select-views.cjs.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/select/views/dist/keystone-next-keystone-fields-types-select-views.cjs.js ***!
  \*****************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./keystone-next-keystone-fields-types-select-views.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/fields/types/select/views/dist/keystone-next-keystone-fields-types-select-views.cjs.dev.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy9zZWxlY3Qvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1zZWxlY3Qtdmlld3MuY2pzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSxrUEFBeUY7QUFDM0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy9zZWxlY3Qvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1zZWxlY3Qtdmlld3MuY2pzLmpzP2JjOTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4va2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1maWVsZHMtdHlwZXMtc2VsZWN0LXZpZXdzLmNqcy5wcm9kLmpzXCIpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy1zZWxlY3Qtdmlld3MuY2pzLmRldi5qc1wiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/select/views/dist/keystone-next-keystone-fields-types-select-views.cjs.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/text/views/dist/keystone-next-keystone-fields-types-text-views.cjs.dev.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/text/views/dist/keystone-next-keystone-fields-types-text-views.cjs.dev.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar CellContainer = __webpack_require__(/*! ../../../../../dist/CellContainer-453254b5.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js\");\nvar CellLink = __webpack_require__(/*! ../../../../../dist/CellLink-dc41c877.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellLink-dc41c877.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"../../node_modules/@babel/runtime/helpers/defineProperty.js\");\n__webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlertTriangleIcon */ \"@keystone-ui/icons/icons/AlertTriangleIcon\");\n__webpack_require__(/*! next/link */ \"../../node_modules/next/link.js\");\n__webpack_require__(/*! @keystone-ui/toast */ \"@keystone-ui/toast\");\n__webpack_require__(/*! @keystone-ui/loading */ \"@keystone-ui/loading\");\n__webpack_require__(/*! @keystone-ui/modals */ \"@keystone-ui/modals\");\n__webpack_require__(/*! apollo-upload-client */ \"apollo-upload-client\");\n__webpack_require__(/*! @emotion/hash */ \"@emotion/hash\");\n__webpack_require__(/*! ../../../../../dist/sqlite-a2385a81.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n__webpack_require__(/*! ../../../../../dist/graphql-ts-schema-2a220120.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\");\n__webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n__webpack_require__(/*! ../../../../../dist/admin-meta-graphql-9f9a9c11.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\n__webpack_require__(/*! next/router */ \"next/router\");\n__webpack_require__(/*! @keystone-ui/popover */ \"@keystone-ui/popover\");\n__webpack_require__(/*! @keystone-ui/icons/icons/MoreHorizontalIcon */ \"@keystone-ui/icons/icons/MoreHorizontalIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ChevronRightIcon */ \"@keystone-ui/icons/icons/ChevronRightIcon\");\n__webpack_require__(/*! ../../../../../dist/SignoutButton-081410d6.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js\");\n__webpack_require__(/*! fast-deep-equal */ \"fast-deep-equal\");\n__webpack_require__(/*! @keystone-ui/notice */ \"@keystone-ui/notice\");\n__webpack_require__(/*! ../../../../../admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js\");\n__webpack_require__(/*! decimal.js */ \"decimal.js\");\n__webpack_require__(/*! @graphql-tools/schema */ \"@graphql-tools/schema\");\n__webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\n__webpack_require__(/*! @graphql-ts/schema */ \"@graphql-ts/schema\");\n__webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\n__webpack_require__(/*! graphql-upload/public/GraphQLUpload.js */ \"graphql-upload/public/GraphQLUpload.js\");\n__webpack_require__(/*! graphql */ \"graphql\");\n__webpack_require__(/*! @graphql-ts/extend */ \"@graphql-ts/extend\");\n__webpack_require__(/*! @graphql-ts/schema/api-with-context */ \"@graphql-ts/schema/api-with-context\");\n\nconst Field = _ref => {\n  let {\n    field,\n    value,\n    onChange,\n    autoFocus,\n    forceValidation\n  } = _ref;\n  const {\n    typography,\n    fields: fields$1\n  } = core.useTheme();\n  const [shouldShowErrors, setShouldShowErrors] = React.useState(false);\n  const validationMessages = validate(value, field.validation, field.label);\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), onChange ? core.jsx(core.Stack, {\n    gap: \"small\"\n  }, field.displayMode === 'textarea' ? core.jsx(fields.TextArea, {\n    id: field.path,\n    autoFocus: autoFocus,\n    onChange: event => onChange(_objectSpread(_objectSpread({}, value), {}, {\n      inner: {\n        kind: 'value',\n        value: event.target.value\n      }\n    })),\n    value: value.inner.kind === 'null' ? '' : value.inner.value,\n    disabled: value.inner.kind === 'null',\n    onBlur: () => {\n      setShouldShowErrors(true);\n    }\n  }) : core.jsx(fields.TextInput, {\n    id: field.path,\n    autoFocus: autoFocus,\n    onChange: event => onChange(_objectSpread(_objectSpread({}, value), {}, {\n      inner: {\n        kind: 'value',\n        value: event.target.value\n      }\n    })),\n    value: value.inner.kind === 'null' ? '' : value.inner.value,\n    disabled: value.inner.kind === 'null',\n    onBlur: () => {\n      setShouldShowErrors(true);\n    }\n  }), field.isNullable && core.jsx(fields.Checkbox, {\n    autoFocus: autoFocus,\n    disabled: onChange === undefined,\n    onChange: () => {\n      if (value.inner.kind === 'value') {\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          inner: {\n            kind: 'null',\n            prev: value.inner.value\n          }\n        }));\n      } else {\n        onChange(_objectSpread(_objectSpread({}, value), {}, {\n          inner: {\n            kind: 'value',\n            value: value.inner.prev\n          }\n        }));\n      }\n    },\n    checked: value.inner.kind === 'null'\n  }, core.jsx(\"span\", {\n    css: {\n      fontWeight: typography.fontWeight.semibold,\n      color: fields$1.labelColor\n    }\n  }, \"Set field as null\")), !!validationMessages.length && (shouldShowErrors || forceValidation) && validationMessages.map((message, i) => core.jsx(\"span\", {\n    key: i,\n    css: {\n      color: 'red'\n    }\n  }, message))) : value.inner.kind === 'null' ? null : value.inner.value);\n};\nconst Cell = _ref2 => {\n  let {\n    item,\n    field,\n    linkTo\n  } = _ref2;\n  let value = item[field.path] + '';\n  return linkTo ? core.jsx(CellLink.CellLink, linkTo, value) : core.jsx(CellContainer.CellContainer, null, value);\n};\nCell.supportsLinkTo = true;\nconst CardValue = _ref3 => {\n  let {\n    item,\n    field\n  } = _ref3;\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), item[field.path]);\n};\n\nfunction validate(value, validation, fieldLabel) {\n  // if the value is the same as the initial for an update, we don't want to block saving\n  // since we're not gonna send it anyway if it's the same\n  // and going \"fix this thing that is unrelated to the thing you're doing\" is bad\n  // and also bc it could be null bc of read access control\n  if (value.kind === 'update' && (value.initial.kind === 'null' && value.inner.kind === 'null' || value.initial.kind === 'value' && value.inner.kind === 'value' && value.inner.value === value.initial.value)) {\n    return [];\n  }\n\n  if (value.inner.kind === 'null') {\n    if (validation.isRequired) {\n      return [`${fieldLabel} is required`];\n    }\n\n    return [];\n  }\n\n  const val = value.inner.value;\n  let messages = [];\n\n  if (validation.length.min !== null && val.length < validation.length.min) {\n    if (validation.length.min === 1) {\n      messages.push(`${fieldLabel} must not be empty`);\n    } else {\n      messages.push(`${fieldLabel} must be at least ${validation.length.min} characters long`);\n    }\n  }\n\n  if (validation.length.max !== null && val.length > validation.length.max) {\n    messages.push(`${fieldLabel} must be no longer than ${validation.length.min} characters`);\n  }\n\n  if (validation.match && !validation.match.regex.test(val)) {\n    messages.push(validation.match.explanation || `${fieldLabel} must match ${validation.match.regex}`);\n  }\n\n  return messages;\n}\n\nfunction deserializeTextValue(value) {\n  if (value === null) {\n    return {\n      kind: 'null',\n      prev: ''\n    };\n  }\n\n  return {\n    kind: 'value',\n    value\n  };\n}\n\nconst controller = config => {\n  const validation = {\n    isRequired: config.fieldMeta.validation.isRequired,\n    length: config.fieldMeta.validation.length,\n    match: config.fieldMeta.validation.match ? {\n      regex: new RegExp(config.fieldMeta.validation.match.regex.source, config.fieldMeta.validation.match.regex.flags),\n      explanation: config.fieldMeta.validation.match.explanation\n    } : null\n  };\n  return {\n    path: config.path,\n    label: config.label,\n    graphqlSelection: config.path,\n    defaultValue: {\n      kind: 'create',\n      inner: deserializeTextValue(config.fieldMeta.defaultValue)\n    },\n    displayMode: config.fieldMeta.displayMode,\n    isNullable: config.fieldMeta.isNullable,\n    deserialize: data => {\n      const inner = deserializeTextValue(data[config.path]);\n      return {\n        kind: 'update',\n        inner,\n        initial: inner\n      };\n    },\n    serialize: value => ({\n      [config.path]: value.inner.kind === 'null' ? null : value.inner.value\n    }),\n    validation,\n    validate: val => validate(val, validation, config.label).length === 0,\n    filter: {\n      Filter(props) {\n        return core.jsx(fields.TextInput, {\n          onChange: event => {\n            props.onChange(event.target.value);\n          },\n          value: props.value,\n          autoFocus: props.autoFocus\n        });\n      },\n\n      graphql: _ref4 => {\n        let {\n          type,\n          value\n        } = _ref4;\n        const isNot = type.startsWith('not_');\n        const key = type === 'is_i' || type === 'not_i' ? 'equals' : type.replace(/_i$/, '').replace('not_', '').replace(/_([a-z])/g, (_, char) => char.toUpperCase());\n        const filter = {\n          [key]: value\n        };\n        return {\n          [config.path]: _objectSpread(_objectSpread({}, isNot ? {\n            not: filter\n          } : filter), {}, {\n            mode: config.fieldMeta.shouldUseModeInsensitive ? 'insensitive' : undefined\n          })\n        };\n      },\n\n      Label(_ref5) {\n        let {\n          label,\n          value\n        } = _ref5;\n        return `${label.toLowerCase()}: \"${value}\"`;\n      },\n\n      types: {\n        contains_i: {\n          label: 'Contains',\n          initialValue: ''\n        },\n        not_contains_i: {\n          label: 'Does not contain',\n          initialValue: ''\n        },\n        is_i: {\n          label: 'Is exactly',\n          initialValue: ''\n        },\n        not_i: {\n          label: 'Is not exactly',\n          initialValue: ''\n        },\n        starts_with_i: {\n          label: 'Starts with',\n          initialValue: ''\n        },\n        not_starts_with_i: {\n          label: 'Does not start with',\n          initialValue: ''\n        },\n        ends_with_i: {\n          label: 'Ends with',\n          initialValue: ''\n        },\n        not_ends_with_i: {\n          label: 'Does not end with',\n          initialValue: ''\n        }\n      }\n    }\n  };\n};\n\nexports.CardValue = CardValue;\nexports.Cell = Cell;\nexports.Field = Field;\nexports.controller = controller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/text/views/dist/keystone-next-keystone-fields-types-text-views.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/text/views/dist/keystone-next-keystone-fields-types-text-views.cjs.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/text/views/dist/keystone-next-keystone-fields-types-text-views.cjs.js ***!
  \*************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./keystone-next-keystone-fields-types-text-views.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/fields/types/text/views/dist/keystone-next-keystone-fields-types-text-views.cjs.dev.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy90ZXh0L3ZpZXdzL2Rpc3Qva2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1maWVsZHMtdHlwZXMtdGV4dC12aWV3cy5janMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLDRPQUF1RjtBQUN6RiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvQGtleXN0b25lLW5leHQva2V5c3RvbmUvZmllbGRzL3R5cGVzL3RleHQvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy10ZXh0LXZpZXdzLmNqcy5qcz83ZmY3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2tleXN0b25lLW5leHQta2V5c3RvbmUtZmllbGRzLXR5cGVzLXRleHQtdmlld3MuY2pzLnByb2QuanNcIik7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2tleXN0b25lLW5leHQta2V5c3RvbmUtZmllbGRzLXR5cGVzLXRleHQtdmlld3MuY2pzLmRldi5qc1wiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/text/views/dist/keystone-next-keystone-fields-types-text-views.cjs.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/timestamp/views/dist/keystone-next-keystone-fields-types-timestamp-views.cjs.dev.js":
/*!***************************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/timestamp/views/dist/keystone-next-keystone-fields-types-timestamp-views.cjs.dev.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"../../node_modules/@babel/runtime/helpers/extends.js\");\nvar _objectSpread = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"../../node_modules/@babel/runtime/helpers/objectSpread2.js\");\nvar React = __webpack_require__(/*! react */ \"react\");\nvar core = __webpack_require__(/*! @keystone-ui/core */ \"@keystone-ui/core\");\nvar fields = __webpack_require__(/*! @keystone-ui/fields */ \"@keystone-ui/fields\");\nvar CellContainer = __webpack_require__(/*! ../../../../../dist/CellContainer-453254b5.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellContainer-453254b5.cjs.dev.js\");\nvar CellLink = __webpack_require__(/*! ../../../../../dist/CellLink-dc41c877.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/CellLink-dc41c877.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"../../node_modules/@babel/runtime/helpers/defineProperty.js\");\n__webpack_require__(/*! @keystone-ui/button */ \"@keystone-ui/button\");\n__webpack_require__(/*! @keystone-ui/icons/icons/AlertTriangleIcon */ \"@keystone-ui/icons/icons/AlertTriangleIcon\");\n__webpack_require__(/*! next/link */ \"../../node_modules/next/link.js\");\n__webpack_require__(/*! @keystone-ui/toast */ \"@keystone-ui/toast\");\n__webpack_require__(/*! @keystone-ui/loading */ \"@keystone-ui/loading\");\n__webpack_require__(/*! @keystone-ui/modals */ \"@keystone-ui/modals\");\n__webpack_require__(/*! apollo-upload-client */ \"apollo-upload-client\");\n__webpack_require__(/*! @emotion/hash */ \"@emotion/hash\");\n__webpack_require__(/*! ../../../../../dist/sqlite-a2385a81.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/sqlite-a2385a81.cjs.dev.js\");\n__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n__webpack_require__(/*! ../../../../../dist/graphql-ts-schema-2a220120.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/graphql-ts-schema-2a220120.cjs.dev.js\");\n__webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n__webpack_require__(/*! ../../../../../dist/admin-meta-graphql-9f9a9c11.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/admin-meta-graphql-9f9a9c11.cjs.dev.js\");\n__webpack_require__(/*! next/router */ \"next/router\");\n__webpack_require__(/*! @keystone-ui/popover */ \"@keystone-ui/popover\");\n__webpack_require__(/*! @keystone-ui/icons/icons/MoreHorizontalIcon */ \"@keystone-ui/icons/icons/MoreHorizontalIcon\");\n__webpack_require__(/*! @keystone-ui/icons/icons/ChevronRightIcon */ \"@keystone-ui/icons/icons/ChevronRightIcon\");\n__webpack_require__(/*! ../../../../../dist/SignoutButton-081410d6.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/SignoutButton-081410d6.cjs.dev.js\");\n__webpack_require__(/*! fast-deep-equal */ \"fast-deep-equal\");\n__webpack_require__(/*! @keystone-ui/notice */ \"@keystone-ui/notice\");\nvar utils = __webpack_require__(/*! ../../../../../dist/utils-1eb8e360.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/dist/utils-1eb8e360.cjs.dev.js\");\nvar dateFns = __webpack_require__(/*! date-fns */ \"date-fns\");\n__webpack_require__(/*! ../../../../../admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/admin-ui/router/dist/keystone-next-keystone-admin-ui-router.cjs.dev.js\");\n__webpack_require__(/*! decimal.js */ \"decimal.js\");\n__webpack_require__(/*! @graphql-tools/schema */ \"@graphql-tools/schema\");\n__webpack_require__(/*! @graphql-ts/schema/api-without-context */ \"@graphql-ts/schema/api-without-context\");\n__webpack_require__(/*! @graphql-ts/schema */ \"@graphql-ts/schema\");\n__webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\n__webpack_require__(/*! graphql-upload/public/GraphQLUpload.js */ \"graphql-upload/public/GraphQLUpload.js\");\n__webpack_require__(/*! graphql */ \"graphql\");\n__webpack_require__(/*! @graphql-ts/extend */ \"@graphql-ts/extend\");\n__webpack_require__(/*! @graphql-ts/schema/api-with-context */ \"@graphql-ts/schema/api-with-context\");\n\nconst FULL_TIME_PATTERN = 'HH:mm:ss.SSS';\n\nfunction formatFullTime(date) {\n  return dateFns.format(date, FULL_TIME_PATTERN);\n}\n\nfunction formatTime(time) {\n  const date = dateFns.parse(time, FULL_TIME_PATTERN, new Date());\n\n  if (date.getMilliseconds() !== 0) {\n    return dateFns.format(date, FULL_TIME_PATTERN);\n  }\n\n  if (date.getSeconds() !== 0) {\n    return dateFns.format(date, 'HH:mm:ss');\n  }\n\n  return dateFns.format(date, 'HH:mm');\n}\nfunction parseTime(time) {\n  for (const pattern of ['H:m:s.SSS', 'H:m:s', 'H:m', 'H']) {\n    const parsed = dateFns.parse(time, pattern, new Date());\n\n    if (dateFns.isValid(parsed)) {\n      return dateFns.format(parsed, FULL_TIME_PATTERN);\n    }\n  }\n\n  return undefined;\n}\nfunction constructTimestamp(_ref) {\n  let {\n    dateValue,\n    timeValue\n  } = _ref;\n  return new Date(`${dateValue}T${timeValue}`).toISOString();\n}\nfunction deconstructTimestamp(value) {\n  return {\n    dateValue: dateFns.formatISO(new Date(value), {\n      representation: 'date'\n    }),\n    timeValue: {\n      kind: 'parsed',\n      value: formatFullTime(new Date(value))\n    }\n  };\n}\nfunction formatOutput(value) {\n  if (!value) return '';\n  const date = new Date(value);\n  return date.toLocaleString();\n}\n\nconst Field = _ref => {\n  var _value$value$dateValu, _field$fieldMeta$defa;\n\n  let {\n    field,\n    value,\n    onChange,\n    forceValidation\n  } = _ref;\n  const [touchedFirstInput, setTouchedFirstInput] = React.useState(false);\n  const [touchedSecondInput, setTouchedSecondInput] = React.useState(false);\n  const showValidation = touchedFirstInput && touchedSecondInput || forceValidation;\n  const validationMessages = showValidation ? validate(value, field.fieldMeta, field.label) : undefined;\n  const timeInputProps = utils.useFormattedInput({\n    format(_ref2) {\n      let {\n        value\n      } = _ref2;\n\n      if (value === null) {\n        return '';\n      }\n\n      return formatTime(value);\n    },\n\n    parse(value) {\n      value = value.trim();\n\n      if (value === '') {\n        return {\n          kind: 'parsed',\n          value: null\n        };\n      }\n\n      const parsed = parseTime(value);\n\n      if (parsed !== undefined) {\n        return {\n          kind: 'parsed',\n          value: parsed\n        };\n      }\n\n      return value;\n    }\n\n  }, {\n    value: value.value.timeValue,\n\n    onChange(timeValue) {\n      onChange === null || onChange === void 0 ? void 0 : onChange(_objectSpread(_objectSpread({}, value), {}, {\n        value: _objectSpread(_objectSpread({}, value.value), {}, {\n          timeValue\n        })\n      }));\n    },\n\n    onBlur() {\n      setTouchedSecondInput(true);\n    }\n\n  });\n  return core.jsx(fields.FieldContainer, {\n    as: \"fieldset\"\n  }, core.jsx(core.Stack, null, core.jsx(fields.FieldLabel, {\n    as: \"legend\"\n  }, field.label), onChange ? core.jsx(core.Inline, {\n    gap: \"small\"\n  }, core.jsx(core.Stack, null, core.jsx(fields.DatePicker, {\n    onUpdate: date => {\n      onChange(_objectSpread(_objectSpread({}, value), {}, {\n        value: {\n          dateValue: date,\n          timeValue: typeof value.value.timeValue === 'object' && value.value.timeValue.value === null ? {\n            kind: 'parsed',\n            value: '00:00:00.000'\n          } : value.value.timeValue\n        }\n      }));\n    },\n    onClear: () => {\n      onChange(_objectSpread(_objectSpread({}, value), {}, {\n        value: _objectSpread(_objectSpread({}, value.value), {}, {\n          dateValue: null\n        })\n      }));\n    },\n    onBlur: () => setTouchedFirstInput(true),\n    value: (_value$value$dateValu = value.value.dateValue) !== null && _value$value$dateValu !== void 0 ? _value$value$dateValu : ''\n  }), (validationMessages === null || validationMessages === void 0 ? void 0 : validationMessages.date) && core.jsx(core.Text, {\n    color: \"red600\",\n    size: \"small\"\n  }, validationMessages.date)), core.jsx(core.Stack, null, core.jsx(core.VisuallyHidden, {\n    as: \"label\",\n    htmlFor: `${field.path}--time-input`\n  }, `${field.label} time field`), core.jsx(fields.TextInput, _extends({\n    id: `${field.path}--time-input`\n  }, timeInputProps, {\n    disabled: onChange === undefined,\n    placeholder: \"00:00\"\n  })), (validationMessages === null || validationMessages === void 0 ? void 0 : validationMessages.time) && core.jsx(core.Text, {\n    color: \"red600\",\n    size: \"small\"\n  }, validationMessages.time))) : value.value.dateValue !== null && typeof value.value.timeValue === 'object' && value.value.timeValue.value !== null && core.jsx(core.Text, null, formatOutput(constructTimestamp({\n    dateValue: value.value.dateValue,\n    timeValue: value.value.timeValue.value\n  }))), (value.kind === 'create' && typeof field.fieldMeta.defaultValue !== 'string' && ((_field$fieldMeta$defa = field.fieldMeta.defaultValue) === null || _field$fieldMeta$defa === void 0 ? void 0 : _field$fieldMeta$defa.kind) === 'now' || field.fieldMeta.updatedAt) && core.jsx(core.Text, null, \"When this item is saved, this field will be set to the current date and time\")));\n};\n\nfunction validate(value, fieldMeta, label) {\n  var _fieldMeta$defaultVal;\n\n  const val = value.value;\n  const hasDateValue = val.dateValue !== null;\n  const hasTimeValue = typeof val.timeValue === 'string' || typeof val.timeValue.value === 'string';\n  const isValueEmpty = !hasDateValue && !hasTimeValue; // if we recieve null initially on the item view and the current value is null,\n  // we should always allow saving it because:\n  // - the value might be null in the database and we don't want to prevent saving the whole item because of that\n  // - we might have null because of an access control error\n\n  if (value.kind === 'update' && value.initial === null && isValueEmpty) {\n    return undefined;\n  }\n\n  if (value.kind === 'create' && isValueEmpty && (typeof fieldMeta.defaultValue === 'object' && ((_fieldMeta$defaultVal = fieldMeta.defaultValue) === null || _fieldMeta$defaultVal === void 0 ? void 0 : _fieldMeta$defaultVal.kind) === 'now' || fieldMeta.updatedAt)) {\n    return undefined;\n  }\n\n  if (fieldMeta.isRequired && isValueEmpty) {\n    return {\n      date: `${label} is required`\n    };\n  }\n\n  if (hasDateValue && !hasTimeValue) {\n    return {\n      time: `${label} requires a time to be provided`\n    };\n  }\n\n  const timeError = typeof val.timeValue === 'string' ? `${label} requires a valid time in the format hh:mm` : undefined;\n\n  if (hasTimeValue && !hasDateValue) {\n    return {\n      date: `${label} requires a date to be selected`,\n      time: timeError\n    };\n  }\n\n  if (timeError) {\n    return {\n      time: timeError\n    };\n  }\n\n  return undefined;\n}\n\nconst Cell = _ref3 => {\n  let {\n    item,\n    field,\n    linkTo\n  } = _ref3;\n  let value = item[field.path];\n  return linkTo ? core.jsx(CellLink.CellLink, linkTo, formatOutput(value)) : core.jsx(CellContainer.CellContainer, null, formatOutput(value));\n};\nCell.supportsLinkTo = true;\nconst CardValue = _ref4 => {\n  let {\n    item,\n    field\n  } = _ref4;\n  return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, null, field.label), formatOutput(item[field.path]));\n};\nconst controller = config => {\n  return {\n    path: config.path,\n    label: config.label,\n    graphqlSelection: config.path,\n    fieldMeta: config.fieldMeta,\n    defaultValue: {\n      kind: 'create',\n      value: typeof config.fieldMeta.defaultValue === 'string' ? deconstructTimestamp(config.fieldMeta.defaultValue) : {\n        dateValue: null,\n        timeValue: {\n          kind: 'parsed',\n          value: null\n        }\n      }\n    },\n    deserialize: data => {\n      const value = data[config.path];\n      return {\n        kind: 'update',\n        initial: data[config.path],\n        value: value ? deconstructTimestamp(value) : {\n          dateValue: null,\n          timeValue: {\n            kind: 'parsed',\n            value: null\n          }\n        }\n      };\n    },\n    serialize: _ref5 => {\n      let {\n        value: {\n          dateValue,\n          timeValue\n        }\n      } = _ref5;\n\n      if (dateValue && typeof timeValue === 'object' && timeValue.value !== null) {\n        let formattedDate = constructTimestamp({\n          dateValue,\n          timeValue: timeValue.value\n        });\n        return {\n          [config.path]: formattedDate\n        };\n      }\n\n      return {\n        [config.path]: null\n      };\n    },\n    validate: value => validate(value, config.fieldMeta, config.label) === undefined\n  };\n};\n\nexports.CardValue = CardValue;\nexports.Cell = Cell;\nexports.Field = Field;\nexports.controller = controller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/timestamp/views/dist/keystone-next-keystone-fields-types-timestamp-views.cjs.dev.js\n");

/***/ }),

/***/ "../../node_modules/@keystone-next/keystone/fields/types/timestamp/views/dist/keystone-next-keystone-fields-types-timestamp-views.cjs.js":
/*!***********************************************************************************************************************************************!*\
  !*** ../../node_modules/@keystone-next/keystone/fields/types/timestamp/views/dist/keystone-next-keystone-fields-types-timestamp-views.cjs.js ***!
  \***********************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./keystone-next-keystone-fields-types-timestamp-views.cjs.dev.js */ \"../../node_modules/@keystone-next/keystone/fields/types/timestamp/views/dist/keystone-next-keystone-fields-types-timestamp-views.cjs.dev.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy90aW1lc3RhbXAvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy10aW1lc3RhbXAtdmlld3MuY2pzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSwyUEFBNEY7QUFDOUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BrZXlzdG9uZS1uZXh0L2tleXN0b25lL2ZpZWxkcy90eXBlcy90aW1lc3RhbXAvdmlld3MvZGlzdC9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy10aW1lc3RhbXAtdmlld3MuY2pzLmpzP2YzZTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4va2V5c3RvbmUtbmV4dC1rZXlzdG9uZS1maWVsZHMtdHlwZXMtdGltZXN0YW1wLXZpZXdzLmNqcy5wcm9kLmpzXCIpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9rZXlzdG9uZS1uZXh0LWtleXN0b25lLWZpZWxkcy10eXBlcy10aW1lc3RhbXAtdmlld3MuY2pzLmRldi5qc1wiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/@keystone-next/keystone/fields/types/timestamp/views/dist/keystone-next-keystone-fields-types-timestamp-views.cjs.js\n");

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _keystone_next_keystone_internal_do_not_use_will_break_in_patch_admin_ui_pages_App__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/pages/App */ \"@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/pages/App\");\n/* harmony import */ var _keystone_next_keystone_internal_do_not_use_will_break_in_patch_admin_ui_pages_App__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_keystone_next_keystone_internal_do_not_use_will_break_in_patch_admin_ui_pages_App__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_keystone_next_keystone_internal_do_not_use_will_break_in_patch_admin_ui_id_field_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view */ \"../../node_modules/@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/id-field-view/dist/keystone-next-keystone-___internal-do-not-use-will-break-in-patch-admin-ui-id-field-view.cjs.js\");\n/* harmony import */ var _node_modules_keystone_next_keystone_internal_do_not_use_will_break_in_patch_admin_ui_id_field_view__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_keystone_next_keystone_internal_do_not_use_will_break_in_patch_admin_ui_id_field_view__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_text_views__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/@keystone-next/keystone/fields/types/text/views */ \"../../node_modules/@keystone-next/keystone/fields/types/text/views/dist/keystone-next-keystone-fields-types-text-views.cjs.js\");\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_text_views__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_keystone_next_keystone_fields_types_text_views__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_password_views__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/@keystone-next/keystone/fields/types/password/views */ \"../../node_modules/@keystone-next/keystone/fields/types/password/views/dist/keystone-next-keystone-fields-types-password-views.cjs.js\");\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_password_views__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_keystone_next_keystone_fields_types_password_views__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_relationship_views__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../node_modules/@keystone-next/keystone/fields/types/relationship/views */ \"../../node_modules/@keystone-next/keystone/fields/types/relationship/views/dist/keystone-next-keystone-fields-types-relationship-views.cjs.js\");\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_relationship_views__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_keystone_next_keystone_fields_types_relationship_views__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_select_views__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../node_modules/@keystone-next/keystone/fields/types/select/views */ \"../../node_modules/@keystone-next/keystone/fields/types/select/views/dist/keystone-next-keystone-fields-types-select-views.cjs.js\");\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_select_views__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_keystone_next_keystone_fields_types_select_views__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_keystone_next_fields_document_views__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../node_modules/@keystone-next/fields-document/views */ \"../../node_modules/@keystone-next/fields-document/views/dist/keystone-next-fields-document-views.cjs.js\");\n/* harmony import */ var _node_modules_keystone_next_fields_document_views__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_node_modules_keystone_next_fields_document_views__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_timestamp_views__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../node_modules/@keystone-next/keystone/fields/types/timestamp/views */ \"../../node_modules/@keystone-next/keystone/fields/types/timestamp/views/dist/keystone-next-keystone-fields-types-timestamp-views.cjs.js\");\n/* harmony import */ var _node_modules_keystone_next_keystone_fields_types_timestamp_views__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_node_modules_keystone_next_keystone_fields_types_timestamp_views__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\nvar adminConfig = {\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_keystone_next_keystone_internal_do_not_use_will_break_in_patch_admin_ui_pages_App__WEBPACK_IMPORTED_MODULE_0__.getApp)({\n    lazyMetadataQuery: {\n        \"kind\": \"Document\",\n        \"definitions\": [\n            {\n                \"kind\": \"OperationDefinition\",\n                \"operation\": \"query\",\n                \"selectionSet\": {\n                    \"kind\": \"SelectionSet\",\n                    \"selections\": [\n                        {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                                \"kind\": \"Name\",\n                                \"value\": \"keystone\",\n                                \"loc\": {\n                                    \"start\": 22,\n                                    \"end\": 30\n                                }\n                            },\n                            \"arguments\": [],\n                            \"directives\": [],\n                            \"selectionSet\": {\n                                \"kind\": \"SelectionSet\",\n                                \"selections\": [\n                                    {\n                                        \"kind\": \"Field\",\n                                        \"name\": {\n                                            \"kind\": \"Name\",\n                                            \"value\": \"adminMeta\",\n                                            \"loc\": {\n                                                \"start\": 39,\n                                                \"end\": 48\n                                            }\n                                        },\n                                        \"arguments\": [],\n                                        \"directives\": [],\n                                        \"selectionSet\": {\n                                            \"kind\": \"SelectionSet\",\n                                            \"selections\": [\n                                                {\n                                                    \"kind\": \"Field\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"lists\",\n                                                        \"loc\": {\n                                                            \"start\": 59,\n                                                            \"end\": 64\n                                                        }\n                                                    },\n                                                    \"arguments\": [],\n                                                    \"directives\": [],\n                                                    \"selectionSet\": {\n                                                        \"kind\": \"SelectionSet\",\n                                                        \"selections\": [\n                                                            {\n                                                                \"kind\": \"Field\",\n                                                                \"name\": {\n                                                                    \"kind\": \"Name\",\n                                                                    \"value\": \"key\",\n                                                                    \"loc\": {\n                                                                        \"start\": 77,\n                                                                        \"end\": 80\n                                                                    }\n                                                                },\n                                                                \"arguments\": [],\n                                                                \"directives\": [],\n                                                                \"loc\": {\n                                                                    \"start\": 77,\n                                                                    \"end\": 80\n                                                                }\n                                                            },\n                                                            {\n                                                                \"kind\": \"Field\",\n                                                                \"name\": {\n                                                                    \"kind\": \"Name\",\n                                                                    \"value\": \"isHidden\",\n                                                                    \"loc\": {\n                                                                        \"start\": 91,\n                                                                        \"end\": 99\n                                                                    }\n                                                                },\n                                                                \"arguments\": [],\n                                                                \"directives\": [],\n                                                                \"loc\": {\n                                                                    \"start\": 91,\n                                                                    \"end\": 99\n                                                                }\n                                                            },\n                                                            {\n                                                                \"kind\": \"Field\",\n                                                                \"name\": {\n                                                                    \"kind\": \"Name\",\n                                                                    \"value\": \"fields\",\n                                                                    \"loc\": {\n                                                                        \"start\": 110,\n                                                                        \"end\": 116\n                                                                    }\n                                                                },\n                                                                \"arguments\": [],\n                                                                \"directives\": [],\n                                                                \"selectionSet\": {\n                                                                    \"kind\": \"SelectionSet\",\n                                                                    \"selections\": [\n                                                                        {\n                                                                            \"kind\": \"Field\",\n                                                                            \"name\": {\n                                                                                \"kind\": \"Name\",\n                                                                                \"value\": \"path\",\n                                                                                \"loc\": {\n                                                                                    \"start\": 131,\n                                                                                    \"end\": 135\n                                                                                }\n                                                                            },\n                                                                            \"arguments\": [],\n                                                                            \"directives\": [],\n                                                                            \"loc\": {\n                                                                                \"start\": 131,\n                                                                                \"end\": 135\n                                                                            }\n                                                                        },\n                                                                        {\n                                                                            \"kind\": \"Field\",\n                                                                            \"name\": {\n                                                                                \"kind\": \"Name\",\n                                                                                \"value\": \"createView\",\n                                                                                \"loc\": {\n                                                                                    \"start\": 148,\n                                                                                    \"end\": 158\n                                                                                }\n                                                                            },\n                                                                            \"arguments\": [],\n                                                                            \"directives\": [],\n                                                                            \"selectionSet\": {\n                                                                                \"kind\": \"SelectionSet\",\n                                                                                \"selections\": [\n                                                                                    {\n                                                                                        \"kind\": \"Field\",\n                                                                                        \"name\": {\n                                                                                            \"kind\": \"Name\",\n                                                                                            \"value\": \"fieldMode\",\n                                                                                            \"loc\": {\n                                                                                                \"start\": 175,\n                                                                                                \"end\": 184\n                                                                                            }\n                                                                                        },\n                                                                                        \"arguments\": [],\n                                                                                        \"directives\": [],\n                                                                                        \"loc\": {\n                                                                                            \"start\": 175,\n                                                                                            \"end\": 184\n                                                                                        }\n                                                                                    }\n                                                                                ],\n                                                                                \"loc\": {\n                                                                                    \"start\": 159,\n                                                                                    \"end\": 198\n                                                                                }\n                                                                            },\n                                                                            \"loc\": {\n                                                                                \"start\": 148,\n                                                                                \"end\": 198\n                                                                            }\n                                                                        }\n                                                                    ],\n                                                                    \"loc\": {\n                                                                        \"start\": 117,\n                                                                        \"end\": 210\n                                                                    }\n                                                                },\n                                                                \"loc\": {\n                                                                    \"start\": 110,\n                                                                    \"end\": 210\n                                                                }\n                                                            }\n                                                        ],\n                                                        \"loc\": {\n                                                            \"start\": 65,\n                                                            \"end\": 220\n                                                        }\n                                                    },\n                                                    \"loc\": {\n                                                        \"start\": 59,\n                                                        \"end\": 220\n                                                    }\n                                                }\n                                            ],\n                                            \"loc\": {\n                                                \"start\": 49,\n                                                \"end\": 228\n                                            }\n                                        },\n                                        \"loc\": {\n                                            \"start\": 39,\n                                            \"end\": 228\n                                        }\n                                    }\n                                ],\n                                \"loc\": {\n                                    \"start\": 31,\n                                    \"end\": 234\n                                }\n                            },\n                            \"loc\": {\n                                \"start\": 22,\n                                \"end\": 234\n                            }\n                        },\n                        {\n                            \"kind\": \"Field\",\n                            \"name\": {\n                                \"kind\": \"Name\",\n                                \"value\": \"authenticatedItem\"\n                            },\n                            \"selectionSet\": {\n                                \"kind\": \"SelectionSet\",\n                                \"selections\": [\n                                    {\n                                        \"kind\": \"InlineFragment\",\n                                        \"typeCondition\": {\n                                            \"kind\": \"NamedType\",\n                                            \"name\": {\n                                                \"kind\": \"Name\",\n                                                \"value\": \"User\"\n                                            }\n                                        },\n                                        \"selectionSet\": {\n                                            \"kind\": \"SelectionSet\",\n                                            \"selections\": [\n                                                {\n                                                    \"kind\": \"Field\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"id\"\n                                                    }\n                                                },\n                                                {\n                                                    \"kind\": \"Field\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"name\"\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    fieldViews: [\n        _node_modules_keystone_next_keystone_internal_do_not_use_will_break_in_patch_admin_ui_id_field_view__WEBPACK_IMPORTED_MODULE_1__,\n        _node_modules_keystone_next_keystone_fields_types_text_views__WEBPACK_IMPORTED_MODULE_2__,\n        _node_modules_keystone_next_keystone_fields_types_password_views__WEBPACK_IMPORTED_MODULE_3__,\n        _node_modules_keystone_next_keystone_fields_types_relationship_views__WEBPACK_IMPORTED_MODULE_4__,\n        _node_modules_keystone_next_keystone_fields_types_select_views__WEBPACK_IMPORTED_MODULE_5__,\n        _node_modules_keystone_next_fields_document_views__WEBPACK_IMPORTED_MODULE_6__,\n        _node_modules_keystone_next_keystone_fields_types_timestamp_views__WEBPACK_IMPORTED_MODULE_7__\n    ],\n    adminMetaHash: \"2qivu7\",\n    adminConfig: adminConfig,\n    apiPath: \"/api/graphql\"\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/_app.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/link.js":
/*!***************************************************!*\
  !*** ../../node_modules/next/dist/client/link.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\nvar _router = __webpack_require__(/*! ../shared/lib/router/router */ \"../../node_modules/next/dist/shared/lib/router/router.js\");\nvar _router1 = __webpack_require__(/*! ./router */ \"../../node_modules/next/dist/client/router.js\");\nvar _useIntersection = __webpack_require__(/*! ./use-intersection */ \"../../node_modules/next/dist/client/use-intersection.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst prefetched = {\n};\nfunction prefetch(router, href, as, options) {\n    if (true) return;\n    if (!(0, _router).isLocalURL(href)) return;\n    // Prefetch the JSON page if asked (only in the client)\n    // We need to handle a prefetch error here since we may be\n    // loading with priority which can reject but we don't\n    // want to force navigation since this is only a prefetch\n    router.prefetch(href, as, options).catch((err)=>{\n        if (true) {\n            // rethrow to show invalid URL errors\n            throw err;\n        }\n    });\n    const curLocale = options && typeof options.locale !== 'undefined' ? options.locale : router && router.locale;\n    // Join on an invalid URI character\n    prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true;\n}\nfunction isModifiedEvent(event) {\n    const { target  } = event.currentTarget;\n    return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale) {\n    const { nodeName  } = e.currentTarget;\n    if (nodeName === 'A' && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {\n        // ignore click for browser’s default behavior\n        return;\n    }\n    e.preventDefault();\n    //  avoid scroll for urls with anchor refs\n    if (scroll == null && as.indexOf('#') >= 0) {\n        scroll = false;\n    }\n    // replace state instead of push if prop is present\n    router[replace ? 'replace' : 'push'](href, as, {\n        shallow,\n        locale,\n        scroll\n    });\n}\nfunction Link(props) {\n    if (true) {\n        function createPropError(args) {\n            return new Error(`Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` + ( false ? 0 : ''));\n        }\n        // TypeScript trick for type-guarding:\n        const requiredPropsGuard = {\n            href: true\n        };\n        const requiredProps = Object.keys(requiredPropsGuard);\n        requiredProps.forEach((key)=>{\n            if (key === 'href') {\n                if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {\n                    throw createPropError({\n                        key,\n                        expected: '`string` or `object`',\n                        actual: props[key] === null ? 'null' : typeof props[key]\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // TypeScript trick for type-guarding:\n        const optionalPropsGuard = {\n            as: true,\n            replace: true,\n            scroll: true,\n            shallow: true,\n            passHref: true,\n            prefetch: true,\n            locale: true\n        };\n        const optionalProps = Object.keys(optionalPropsGuard);\n        optionalProps.forEach((key)=>{\n            const valType = typeof props[key];\n            if (key === 'as') {\n                if (props[key] && valType !== 'string' && valType !== 'object') {\n                    throw createPropError({\n                        key,\n                        expected: '`string` or `object`',\n                        actual: valType\n                    });\n                }\n            } else if (key === 'locale') {\n                if (props[key] && valType !== 'string') {\n                    throw createPropError({\n                        key,\n                        expected: '`string`',\n                        actual: valType\n                    });\n                }\n            } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {\n                if (props[key] != null && valType !== 'boolean') {\n                    throw createPropError({\n                        key,\n                        expected: '`boolean`',\n                        actual: valType\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const hasWarned = _react.default.useRef(false);\n        if (props.prefetch && !hasWarned.current) {\n            hasWarned.current = true;\n            console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated');\n        }\n    }\n    const p = props.prefetch !== false;\n    const router = (0, _router1).useRouter();\n    const { href , as  } = _react.default.useMemo(()=>{\n        const [resolvedHref, resolvedAs] = (0, _router).resolveHref(router, props.href, true);\n        return {\n            href: resolvedHref,\n            as: props.as ? (0, _router).resolveHref(router, props.as) : resolvedAs || resolvedHref\n        };\n    }, [\n        router,\n        props.href,\n        props.as\n    ]);\n    let { children , replace , shallow , scroll , locale  } = props;\n    // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag\n    if (typeof children === 'string') {\n        children = /*#__PURE__*/ _react.default.createElement(\"a\", null, children);\n    }\n    // This will return the first child, if multiple are provided it will throw an error\n    let child;\n    if (true) {\n        try {\n            child = _react.default.Children.only(children);\n        } catch (err) {\n            throw new Error(`Multiple children were passed to <Link> with \\`href\\` of \\`${props.href}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` + ( false ? 0 : ''));\n        }\n    } else {}\n    const childRef = child && typeof child === 'object' && child.ref;\n    const [setIntersectionRef, isVisible] = (0, _useIntersection).useIntersection({\n        rootMargin: '200px'\n    });\n    const setRef = _react.default.useCallback((el)=>{\n        setIntersectionRef(el);\n        if (childRef) {\n            if (typeof childRef === 'function') childRef(el);\n            else if (typeof childRef === 'object') {\n                childRef.current = el;\n            }\n        }\n    }, [\n        childRef,\n        setIntersectionRef\n    ]);\n    _react.default.useEffect(()=>{\n        const shouldPrefetch = isVisible && p && (0, _router).isLocalURL(href);\n        const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;\n        const isPrefetched = prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')];\n        if (shouldPrefetch && !isPrefetched) {\n            prefetch(router, href, as, {\n                locale: curLocale\n            });\n        }\n    }, [\n        as,\n        href,\n        isVisible,\n        locale,\n        p,\n        router\n    ]);\n    const childProps = {\n        ref: setRef,\n        onClick: (e)=>{\n            if (child.props && typeof child.props.onClick === 'function') {\n                child.props.onClick(e);\n            }\n            if (!e.defaultPrevented) {\n                linkClicked(e, router, href, as, replace, shallow, scroll, locale);\n            }\n        }\n    };\n    childProps.onMouseEnter = (e)=>{\n        if (!(0, _router).isLocalURL(href)) return;\n        if (child.props && typeof child.props.onMouseEnter === 'function') {\n            child.props.onMouseEnter(e);\n        }\n        prefetch(router, href, as, {\n            priority: true\n        });\n    };\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user\n    if (props.passHref || child.type === 'a' && !('href' in child.props)) {\n        const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;\n        // we only render domain locales if we are currently on a domain locale\n        // so that locale links are still visitable in development/preview envs\n        const localeDomain = router && router.isLocaleDomain && (0, _router).getDomainLocale(as, curLocale, router && router.locales, router && router.domainLocales);\n        childProps.href = localeDomain || (0, _router).addBasePath((0, _router).addLocale(as, curLocale, router && router.defaultLocale));\n    }\n    return(/*#__PURE__*/ _react.default.cloneElement(child, childProps));\n}\nvar _default = Link;\nexports[\"default\"] = _default; //# sourceMappingURL=link.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/link.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/normalize-trailing-slash.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.removePathTrailingSlash = removePathTrailingSlash;\nexports.normalizePathTrailingSlash = void 0;\nfunction removePathTrailingSlash(path) {\n    return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;\n}\nconst normalizePathTrailingSlash =  false ? 0 : removePathTrailingSlash;\nexports.normalizePathTrailingSlash = normalizePathTrailingSlash; //# sourceMappingURL=normalize-trailing-slash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvbm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1pBLDhDQUE2QyxDQUFDO0lBQzFDRyxLQUFLLEVBQUUsSUFBSTtBQUNmLENBQUMsRUFBQztBQUNGRCwrQkFBK0IsR0FBR0UsdUJBQXVCO0FBQ3pERixrQ0FBa0MsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUNsQ0UsdUJBQXVCLENBQUNFLElBQUksRUFBRSxDQUFDO0lBQ3BDLE1BQU0sQ0FBQ0EsSUFBSSxDQUFDQyxRQUFRLENBQUMsQ0FBRyxPQUFLRCxJQUFJLEtBQUssQ0FBRyxLQUFHQSxJQUFJLENBQUNFLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJRixJQUFJO0FBQ3hFLENBQUM7QUFDRCxLQUFLLENBQUNELDBCQUEwQixHQUFHSSxNQUFpQyxHQUFHLENBUXRFLEdBQUdMLHVCQUF1QjtBQUMzQkYsa0NBQWtDLEdBQUdHLDBCQUEwQixDQUUvRCxDQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanM/ZWQwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2ggPSByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaDtcbmV4cG9ydHMubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG5mdW5jdGlvbiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguZW5kc1dpdGgoJy8nKSAmJiBwYXRoICE9PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5jb25zdCBub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IHByb2Nlc3MuZW52Ll9fTkVYVF9UUkFJTElOR19TTEFTSCA/IChwYXRoKT0+e1xuICAgIGlmICgvXFwuW14vXStcXC8/JC8udGVzdChwYXRoKSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2gocGF0aCk7XG4gICAgfSBlbHNlIGlmIChwYXRoLmVuZHNXaXRoKCcvJykpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhdGggKyAnLyc7XG4gICAgfVxufSA6IHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoO1xuZXhwb3J0cy5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCA9IG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2giLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsInBhdGgiLCJlbmRzV2l0aCIsInNsaWNlIiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9UUkFJTElOR19TTEFTSCIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/request-idle-callback.js":
/*!********************************************************************!*\
  !*** ../../node_modules/next/dist/client/request-idle-callback.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.cancelIdleCallback = exports.requestIdleCallback = void 0;\nconst requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(cb) {\n    let start = Date.now();\n    return setTimeout(function() {\n        cb({\n            didTimeout: false,\n            timeRemaining: function() {\n                return Math.max(0, 50 - (Date.now() - start));\n            }\n        });\n    }, 1);\n};\nexports.requestIdleCallback = requestIdleCallback;\nconst cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(id) {\n    return clearTimeout(id);\n};\nexports.cancelIdleCallback = cancelIdleCallback; //# sourceMappingURL=request-idle-callback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1pBLDhDQUE2QyxDQUFDO0lBQzFDRyxLQUFLLEVBQUUsSUFBSTtBQUNmLENBQUMsRUFBQztBQUNGRCwwQkFBMEIsR0FBR0EsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDakUsS0FBSyxDQUFDRyxtQkFBbUIsR0FBRyxNQUFNLENBQUNDLElBQUksS0FBSyxDQUFXLGNBQUlBLElBQUksQ0FBQ0QsbUJBQW1CLElBQUlDLElBQUksQ0FBQ0QsbUJBQW1CLENBQUNFLElBQUksQ0FBQ0MsTUFBTSxLQUFLLFFBQVEsQ0FBQ0MsRUFBRSxFQUFFLENBQUM7SUFDMUksR0FBRyxDQUFDQyxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsR0FBRztJQUNwQixNQUFNLENBQUNDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsQ0FBQztRQUMxQkosRUFBRSxDQUFDLENBQUM7WUFDQUssVUFBVSxFQUFFLEtBQUs7WUFDakJDLGFBQWEsRUFBRSxRQUFRLEdBQUcsQ0FBQztnQkFDdkIsTUFBTSxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJTixJQUFJLENBQUNDLEdBQUcsS0FBS0YsS0FBSztZQUMvQyxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUMsRUFBRSxDQUFDO0FBQ1IsQ0FBQztBQUNEUiwyQkFBMkIsR0FBR0csbUJBQW1CO0FBQ2pELEtBQUssQ0FBQ0Qsa0JBQWtCLEdBQUcsTUFBTSxDQUFDRSxJQUFJLEtBQUssQ0FBVyxjQUFJQSxJQUFJLENBQUNGLGtCQUFrQixJQUFJRSxJQUFJLENBQUNGLGtCQUFrQixDQUFDRyxJQUFJLENBQUNDLE1BQU0sS0FBSyxRQUFRLENBQUNVLEVBQUUsRUFBRSxDQUFDO0lBQ3ZJLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDRCxFQUFFO0FBQzFCLENBQUM7QUFDRGhCLDBCQUEwQixHQUFHRSxrQkFBa0IsQ0FFL0MsQ0FBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzP2U5NzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGV4cG9ydHMucmVxdWVzdElkbGVDYWxsYmFjayA9IHZvaWQgMDtcbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oY2IpIHtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjYih7XG4gICAgICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSwgMSk7XG59O1xuZXhwb3J0cy5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFjaztcbmNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjayAmJiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjay5iaW5kKHdpbmRvdykgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbn07XG5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGNhbmNlbElkbGVDYWxsYmFjaztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNhbmNlbElkbGVDYWxsYmFjayIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJzZWxmIiwiYmluZCIsIndpbmRvdyIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiTWF0aCIsIm1heCIsImlkIiwiY2xlYXJUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/route-loader.js":
/*!***********************************************************!*\
  !*** ../../node_modules/next/dist/client/route-loader.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.markAssetError = markAssetError;\nexports.isAssetError = isAssetError;\nexports.getClientBuildManifest = getClientBuildManifest;\nexports.getMiddlewareManifest = getMiddlewareManifest;\nexports.createRouteLoader = createRouteLoader;\nvar _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/utils/get-asset-path-from-route */ \"../shared/lib/router/utils/get-asset-path-from-route\"));\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"../../node_modules/next/dist/client/request-idle-callback.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n// 3.8s was arbitrarily chosen as it's what https://web.dev/interactive\n// considers as \"Good\" time-to-interactive. We must assume something went\n// wrong beyond this point, and then fall-back to a full page transition to\n// show the user something of value.\nconst MS_MAX_IDLE_DELAY = 3800;\nfunction withFuture(key, map, generator) {\n    let entry = map.get(key);\n    if (entry) {\n        if ('future' in entry) {\n            return entry.future;\n        }\n        return Promise.resolve(entry);\n    }\n    let resolver;\n    const prom = new Promise((resolve)=>{\n        resolver = resolve;\n    });\n    map.set(key, entry = {\n        resolve: resolver,\n        future: prom\n    });\n    return generator ? generator() // eslint-disable-next-line no-sequences\n    .then((value)=>(resolver(value), value)\n    ).catch((err)=>{\n        map.delete(key);\n        throw err;\n    }) : prom;\n}\nfunction hasPrefetch(link) {\n    try {\n        link = document.createElement('link');\n        return(// with relList.support\n        (!!window.MSInputMethodContext && !!document.documentMode) || link.relList.supports('prefetch'));\n    } catch (e) {\n        return false;\n    }\n}\nconst canPrefetch = hasPrefetch();\nfunction prefetchViaDom(href, as, link) {\n    return new Promise((res, rej)=>{\n        const selector = `\n      link[rel=\"prefetch\"][href^=\"${href}\"],\n      link[rel=\"preload\"][href^=\"${href}\"],\n      script[src^=\"${href}\"]`;\n        if (document.querySelector(selector)) {\n            return res();\n        }\n        link = document.createElement('link');\n        // The order of property assignment here is intentional:\n        if (as) link.as = as;\n        link.rel = `prefetch`;\n        link.crossOrigin = undefined;\n        link.onload = res;\n        link.onerror = rej;\n        // `href` should always be last:\n        link.href = href;\n        document.head.appendChild(link);\n    });\n}\nconst ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR');\nfunction markAssetError(err) {\n    return Object.defineProperty(err, ASSET_LOAD_ERROR, {\n    });\n}\nfunction isAssetError(err) {\n    return err && ASSET_LOAD_ERROR in err;\n}\nfunction appendScript(src, script) {\n    return new Promise((resolve, reject)=>{\n        script = document.createElement('script');\n        // The order of property assignment here is intentional.\n        // 1. Setup success/failure hooks in case the browser synchronously\n        //    executes when `src` is set.\n        script.onload = resolve;\n        script.onerror = ()=>reject(markAssetError(new Error(`Failed to load script: ${src}`)))\n        ;\n        // 2. Configure the cross-origin attribute before setting `src` in case the\n        //    browser begins to fetch.\n        script.crossOrigin = undefined;\n        // 3. Finally, set the source and inject into the DOM in case the child\n        //    must be appended for fetching to start.\n        script.src = src;\n        document.body.appendChild(script);\n    });\n}\n// We wait for pages to be built in dev before we start the route transition\n// timeout to prevent an un-necessary hard navigation in development.\nlet devBuildPromise;\n// Resolve a promise that times out after given amount of milliseconds.\nfunction resolvePromiseWithTimeout(p, ms, err) {\n    return new Promise((resolve, reject)=>{\n        let cancelled = false;\n        p.then((r)=>{\n            // Resolved, cancel the timeout\n            cancelled = true;\n            resolve(r);\n        }).catch(reject);\n        // We wrap these checks separately for better dead-code elimination in\n        // production bundles.\n        if (true) {\n            (devBuildPromise || Promise.resolve()).then(()=>{\n                (0, _requestIdleCallback).requestIdleCallback(()=>setTimeout(()=>{\n                        if (!cancelled) {\n                            reject(err);\n                        }\n                    }, ms)\n                );\n            });\n        }\n        if (false) {}\n    });\n}\nfunction getClientBuildManifest() {\n    if (self.__BUILD_MANIFEST) {\n        return Promise.resolve(self.__BUILD_MANIFEST);\n    }\n    const onBuildManifest = new Promise((resolve)=>{\n        // Mandatory because this is not concurrent safe:\n        const cb = self.__BUILD_MANIFEST_CB;\n        self.__BUILD_MANIFEST_CB = ()=>{\n            resolve(self.__BUILD_MANIFEST);\n            cb && cb();\n        };\n    });\n    return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));\n}\nfunction getMiddlewareManifest() {\n    if (self.__MIDDLEWARE_MANIFEST) {\n        return Promise.resolve(self.__MIDDLEWARE_MANIFEST);\n    }\n    const onMiddlewareManifest = new Promise((resolve)=>{\n        const cb = self.__MIDDLEWARE_MANIFEST_CB;\n        self.__MIDDLEWARE_MANIFEST_CB = ()=>{\n            resolve(self.__MIDDLEWARE_MANIFEST);\n            cb && cb();\n        };\n    });\n    return resolvePromiseWithTimeout(onMiddlewareManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client middleware manifest')));\n}\nfunction getFilesForRoute(assetPrefix, route) {\n    if (true) {\n        return Promise.resolve({\n            scripts: [\n                assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute).default(route, '.js')), \n            ],\n            // Styles are handled by `style-loader` in development:\n            css: []\n        });\n    }\n    return getClientBuildManifest().then((manifest)=>{\n        if (!(route in manifest)) {\n            throw markAssetError(new Error(`Failed to lookup route: ${route}`));\n        }\n        const allFiles = manifest[route].map((entry)=>assetPrefix + '/_next/' + encodeURI(entry)\n        );\n        return {\n            scripts: allFiles.filter((v)=>v.endsWith('.js')\n            ),\n            css: allFiles.filter((v)=>v.endsWith('.css')\n            )\n        };\n    });\n}\nfunction createRouteLoader(assetPrefix) {\n    const entrypoints = new Map();\n    const loadedScripts = new Map();\n    const styleSheets = new Map();\n    const routes = new Map();\n    function maybeExecuteScript(src) {\n        // With HMR we might need to \"reload\" scripts when they are\n        // disposed and readded. Executing scripts twice has no functional\n        // differences\n        if (false) {} else {\n            return appendScript(src);\n        }\n    }\n    function fetchStyleSheet(href) {\n        let prom = styleSheets.get(href);\n        if (prom) {\n            return prom;\n        }\n        styleSheets.set(href, prom = fetch(href).then((res)=>{\n            if (!res.ok) {\n                throw new Error(`Failed to load stylesheet: ${href}`);\n            }\n            return res.text().then((text)=>({\n                    href: href,\n                    content: text\n                })\n            );\n        }).catch((err)=>{\n            throw markAssetError(err);\n        }));\n        return prom;\n    }\n    return {\n        whenEntrypoint (route) {\n            return withFuture(route, entrypoints);\n        },\n        onEntrypoint (route, execute) {\n            (execute ? Promise.resolve().then(()=>execute()\n            ).then((exports)=>({\n                    component: exports && exports.default || exports,\n                    exports: exports\n                })\n            , (err)=>({\n                    error: err\n                })\n            ) : Promise.resolve(undefined)).then((input)=>{\n                const old = entrypoints.get(route);\n                if (old && 'resolve' in old) {\n                    if (input) {\n                        entrypoints.set(route, input);\n                        old.resolve(input);\n                    }\n                } else {\n                    if (input) {\n                        entrypoints.set(route, input);\n                    } else {\n                        entrypoints.delete(route);\n                    }\n                    // when this entrypoint has been resolved before\n                    // the route is outdated and we want to invalidate\n                    // this cache entry\n                    routes.delete(route);\n                }\n            });\n        },\n        loadRoute (route, prefetch) {\n            return withFuture(route, routes, ()=>{\n                const routeFilesPromise = getFilesForRoute(assetPrefix, route).then(({ scripts , css  })=>{\n                    return Promise.all([\n                        entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)),\n                        Promise.all(css.map(fetchStyleSheet)), \n                    ]);\n                }).then((res)=>{\n                    return this.whenEntrypoint(route).then((entrypoint)=>({\n                            entrypoint,\n                            styles: res[1]\n                        })\n                    );\n                });\n                if (true) {\n                    devBuildPromise = new Promise((resolve)=>{\n                        if (routeFilesPromise) {\n                            return routeFilesPromise.finally(()=>{\n                                resolve();\n                            });\n                        }\n                    });\n                }\n                return resolvePromiseWithTimeout(routeFilesPromise, MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`))).then(({ entrypoint , styles  })=>{\n                    const res = Object.assign({\n                        styles: styles\n                    }, entrypoint);\n                    return 'error' in entrypoint ? entrypoint : res;\n                }).catch((err)=>{\n                    if (prefetch) {\n                        // we don't want to cache errors during prefetch\n                        throw err;\n                    }\n                    return {\n                        error: err\n                    };\n                });\n            });\n        },\n        prefetch (route) {\n            // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n            // License: Apache 2.0\n            let cn;\n            if (cn = navigator.connection) {\n                // Don't prefetch if using 2G or if Save-Data is enabled.\n                if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n            }\n            return getFilesForRoute(assetPrefix, route).then((output)=>Promise.all(canPrefetch ? output.scripts.map((script)=>prefetchViaDom(script, 'script')\n                ) : [])\n            ).then(()=>{\n                (0, _requestIdleCallback).requestIdleCallback(()=>this.loadRoute(route, true).catch(()=>{\n                    })\n                );\n            }).catch(()=>{\n            });\n        }\n    };\n} //# sourceMappingURL=route-loader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/route-loader.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/router.js":
/*!*****************************************************!*\
  !*** ../../node_modules/next/dist/client/router.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"Router\", ({\n    enumerable: true,\n    get: function() {\n        return _router.default;\n    }\n}));\nObject.defineProperty(exports, \"withRouter\", ({\n    enumerable: true,\n    get: function() {\n        return _withRouter.default;\n    }\n}));\nexports.useRouter = useRouter;\nexports.createRouter = createRouter;\nexports.makePublicRouterInstance = makePublicRouterInstance;\nexports[\"default\"] = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\nvar _router = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/router */ \"../../node_modules/next/dist/shared/lib/router/router.js\"));\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"../shared/lib/router-context\");\nvar _isError = _interopRequireDefault(__webpack_require__(/*! ../lib/is-error */ \"../../node_modules/next/dist/lib/is-error.js\"));\nvar _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ \"../../node_modules/next/dist/client/with-router.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst singletonRouter = {\n    router: null,\n    readyCallbacks: [],\n    ready (cb) {\n        if (this.router) return cb();\n        if (false) {}\n    }\n};\n// Create public properties and methods of the router in the singletonRouter\nconst urlPropertyFields = [\n    'pathname',\n    'route',\n    'query',\n    'asPath',\n    'components',\n    'isFallback',\n    'basePath',\n    'locale',\n    'locales',\n    'defaultLocale',\n    'isReady',\n    'isPreview',\n    'isLocaleDomain',\n    'domainLocales', \n];\nconst routerEvents = [\n    'routeChangeStart',\n    'beforeHistoryChange',\n    'routeChangeComplete',\n    'routeChangeError',\n    'hashChangeStart',\n    'hashChangeComplete', \n];\nconst coreMethodFields = [\n    'push',\n    'replace',\n    'reload',\n    'back',\n    'prefetch',\n    'beforePopState', \n];\n// Events is a static property on the router, the router doesn't have to be initialized to use it\nObject.defineProperty(singletonRouter, 'events', {\n    get () {\n        return _router.default.events;\n    }\n});\nurlPropertyFields.forEach((field)=>{\n    // Here we need to use Object.defineProperty because we need to return\n    // the property assigned to the actual router\n    // The value might get changed as we change routes and this is the\n    // proper way to access it\n    Object.defineProperty(singletonRouter, field, {\n        get () {\n            const router = getRouter();\n            return router[field];\n        }\n    });\n});\ncoreMethodFields.forEach((field)=>{\n    singletonRouter[field] = (...args)=>{\n        const router = getRouter();\n        return router[field](...args);\n    };\n});\nrouterEvents.forEach((event)=>{\n    singletonRouter.ready(()=>{\n        _router.default.events.on(event, (...args)=>{\n            const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;\n            const _singletonRouter = singletonRouter;\n            if (_singletonRouter[eventField]) {\n                try {\n                    _singletonRouter[eventField](...args);\n                } catch (err) {\n                    console.error(`Error when running the Router event: ${eventField}`);\n                    console.error((0, _isError).default(err) ? `${err.message}\\n${err.stack}` : err + '');\n                }\n            }\n        });\n    });\n});\nfunction getRouter() {\n    if (!singletonRouter.router) {\n        const message = 'No router instance found.\\n' + 'You should only use \"next/router\" on the client side of your app.\\n';\n        throw new Error(message);\n    }\n    return singletonRouter.router;\n}\nvar _default = singletonRouter;\nexports[\"default\"] = _default;\nfunction useRouter() {\n    return _react.default.useContext(_routerContext.RouterContext);\n}\nfunction createRouter(...args) {\n    singletonRouter.router = new _router.default(...args);\n    singletonRouter.readyCallbacks.forEach((cb)=>cb()\n    );\n    singletonRouter.readyCallbacks = [];\n    return singletonRouter.router;\n}\nfunction makePublicRouterInstance(router) {\n    const scopedRouter = router;\n    const instance = {\n    };\n    for (const property of urlPropertyFields){\n        if (typeof scopedRouter[property] === 'object') {\n            instance[property] = Object.assign(Array.isArray(scopedRouter[property]) ? [] : {\n            }, scopedRouter[property]) // makes sure query is not stateful\n            ;\n            continue;\n        }\n        instance[property] = scopedRouter[property];\n    }\n    // Events is a static property on the router, the router doesn't have to be initialized to use it\n    instance.events = _router.default.events;\n    coreMethodFields.forEach((field)=>{\n        instance[field] = (...args)=>{\n            return scopedRouter[field](...args);\n        };\n    });\n    return instance;\n} //# sourceMappingURL=router.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcm91dGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1pBLDhDQUE2QyxDQUFDO0lBQzFDRyxLQUFLLEVBQUUsSUFBSTtBQUNmLENBQUMsRUFBQztBQUNGSCwwQ0FBeUMsQ0FBQztJQUN0Q0ksVUFBVSxFQUFFLElBQUk7SUFDaEJDLEdBQUcsRUFBRSxRQUFRLEdBQUcsQ0FBQztRQUNiLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPO0lBQzFCLENBQUM7QUFDTCxDQUFDLEVBQUM7QUFDRlAsOENBQTZDLENBQUM7SUFDMUNJLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxHQUFHLEVBQUUsUUFBUSxHQUFHLENBQUM7UUFDYixNQUFNLENBQUNHLFdBQVcsQ0FBQ0QsT0FBTztJQUM5QixDQUFDO0FBQ0wsQ0FBQyxFQUFDO0FBQ0ZMLGlCQUFpQixHQUFHTyxTQUFTO0FBQzdCUCxvQkFBb0IsR0FBR1EsWUFBWTtBQUNuQ1IsZ0NBQWdDLEdBQUdTLHdCQUF3QjtBQUMzRFQsa0JBQWUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN4QixHQUFHLENBQUNVLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsb0JBQU87QUFDbkQsR0FBRyxDQUFDUixPQUFPLEdBQUdPLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLDZGQUE2QjtBQUMxRSxHQUFHLENBQUNDLGNBQWMsR0FBR0QsbUJBQU8sQ0FBQyxrRUFBOEI7QUFDM0QsR0FBRyxDQUFDRSxRQUFRLEdBQUdILHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLHFFQUFpQjtBQUMvRCxHQUFHLENBQUNOLFdBQVcsR0FBR0ssc0JBQXNCLENBQUNDLG1CQUFPLENBQUMseUVBQWU7U0FDdkRELHNCQUFzQixDQUFDSSxHQUFHLEVBQUUsQ0FBQztJQUNsQyxNQUFNLENBQUNBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsR0FBRyxDQUFDO1FBQ2xDVixPQUFPLEVBQUVVLEdBQUc7SUFDaEIsQ0FBQztBQUNMLENBQUM7QUFDRCxLQUFLLENBQUNFLGVBQWUsR0FBRyxDQUFDO0lBQ3JCQyxNQUFNLEVBQUUsSUFBSTtJQUNaQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCQyxLQUFLLEVBQUVDLEVBQUUsRUFBRSxDQUFDO1FBQ1IsRUFBRSxFQUFFLElBQUksQ0FBQ0gsTUFBTSxFQUFFLE1BQU0sQ0FBQ0csRUFBRTtRQUMxQixFQUFFLEVBQUUsS0FBNkIsRUFBRSxFQUVsQztJQUNMLENBQUM7QUFDTCxDQUFDO0FBQ0QsRUFBNEU7QUFDNUUsS0FBSyxDQUFDRSxpQkFBaUIsR0FBRyxDQUFDO0lBQ3ZCLENBQVU7SUFDVixDQUFPO0lBQ1AsQ0FBTztJQUNQLENBQVE7SUFDUixDQUFZO0lBQ1osQ0FBWTtJQUNaLENBQVU7SUFDVixDQUFRO0lBQ1IsQ0FBUztJQUNULENBQWU7SUFDZixDQUFTO0lBQ1QsQ0FBVztJQUNYLENBQWdCO0lBQ2hCLENBQWU7QUFDbkIsQ0FBQztBQUNELEtBQUssQ0FBQ0MsWUFBWSxHQUFHLENBQUM7SUFDbEIsQ0FBa0I7SUFDbEIsQ0FBcUI7SUFDckIsQ0FBcUI7SUFDckIsQ0FBa0I7SUFDbEIsQ0FBaUI7SUFDakIsQ0FBb0I7QUFDeEIsQ0FBQztBQUNELEtBQUssQ0FBQ0MsZ0JBQWdCLEdBQUcsQ0FBQztJQUN0QixDQUFNO0lBQ04sQ0FBUztJQUNULENBQVE7SUFDUixDQUFNO0lBQ04sQ0FBVTtJQUNWLENBQWdCO0FBQ3BCLENBQUM7QUFDRCxFQUFpRztBQUNqRzNCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDa0IsZUFBZSxFQUFFLENBQVEsU0FBRSxDQUFDO0lBQzlDZCxHQUFHLElBQUksQ0FBQztRQUNKLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUNxQixNQUFNO0lBQ2pDLENBQUM7QUFDTCxDQUFDO0FBQ0RILGlCQUFpQixDQUFDSSxPQUFPLEVBQUVDLEtBQUssR0FBRyxDQUFDO0lBQ2hDLEVBQXNFO0lBQ3RFLEVBQTZDO0lBQzdDLEVBQWtFO0lBQ2xFLEVBQTBCO0lBQzFCOUIsTUFBTSxDQUFDQyxjQUFjLENBQUNrQixlQUFlLEVBQUVXLEtBQUssRUFBRSxDQUFDO1FBQzNDekIsR0FBRyxJQUFJLENBQUM7WUFDSixLQUFLLENBQUNlLE1BQU0sR0FBR1csU0FBUztZQUN4QixNQUFNLENBQUNYLE1BQU0sQ0FBQ1UsS0FBSztRQUN2QixDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUM7QUFDREgsZ0JBQWdCLENBQUNFLE9BQU8sRUFBRUMsS0FBSyxHQUFHLENBQUM7SUFDL0JYLGVBQWUsQ0FBQ1csS0FBSyxRQUFRRSxJQUFJLEdBQUcsQ0FBQztRQUNqQyxLQUFLLENBQUNaLE1BQU0sR0FBR1csU0FBUztRQUN4QixNQUFNLENBQUNYLE1BQU0sQ0FBQ1UsS0FBSyxLQUFLRSxJQUFJO0lBQ2hDLENBQUM7QUFDTCxDQUFDO0FBQ0ROLFlBQVksQ0FBQ0csT0FBTyxFQUFFSSxLQUFLLEdBQUcsQ0FBQztJQUMzQmQsZUFBZSxDQUFDRyxLQUFLLEtBQUssQ0FBQztRQUN2QmhCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDcUIsTUFBTSxDQUFDTSxFQUFFLENBQUNELEtBQUssTUFBTUQsSUFBSSxHQUFHLENBQUM7WUFDekMsS0FBSyxDQUFDRyxVQUFVLElBQUksRUFBRSxFQUFFRixLQUFLLENBQUNHLE1BQU0sQ0FBQyxDQUFDLEVBQUVDLFdBQVcsS0FBS0osS0FBSyxDQUFDSyxTQUFTLENBQUMsQ0FBQztZQUN6RSxLQUFLLENBQUNDLGdCQUFnQixHQUFHcEIsZUFBZTtZQUN4QyxFQUFFLEVBQUVvQixnQkFBZ0IsQ0FBQ0osVUFBVSxHQUFHLENBQUM7Z0JBQy9CLEdBQUcsQ0FBQyxDQUFDO29CQUNESSxnQkFBZ0IsQ0FBQ0osVUFBVSxLQUFLSCxJQUFJO2dCQUN4QyxDQUFDLENBQUMsS0FBSyxFQUFFUSxHQUFHLEVBQUUsQ0FBQztvQkFDWEMsT0FBTyxDQUFDQyxLQUFLLEVBQUUscUNBQXFDLEVBQUVQLFVBQVU7b0JBQ2hFTSxPQUFPLENBQUNDLEtBQUssRUFBRSxDQUFDLEVBQUUxQixRQUFRLEVBQUVULE9BQU8sQ0FBQ2lDLEdBQUcsT0FBT0EsR0FBRyxDQUFDRyxPQUFPLENBQUMsRUFBRSxFQUFFSCxHQUFHLENBQUNJLEtBQUssS0FBS0osR0FBRyxHQUFHLENBQUU7Z0JBQ3hGLENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDO1NBQ1FULFNBQVMsR0FBRyxDQUFDO0lBQ2xCLEVBQUUsR0FBR1osZUFBZSxDQUFDQyxNQUFNLEVBQUUsQ0FBQztRQUMxQixLQUFLLENBQUN1QixPQUFPLEdBQUcsQ0FBNkIsK0JBQUcsQ0FBcUU7UUFDckgsS0FBSyxDQUFDLEdBQUcsQ0FBQ0UsS0FBSyxDQUFDRixPQUFPO0lBQzNCLENBQUM7SUFDRCxNQUFNLENBQUN4QixlQUFlLENBQUNDLE1BQU07QUFDakMsQ0FBQztBQUNELEdBQUcsQ0FBQzBCLFFBQVEsR0FBRzNCLGVBQWU7QUFDOUJqQixrQkFBZSxHQUFHNEMsUUFBUTtTQUNqQnJDLFNBQVMsR0FBRyxDQUFDO0lBQ2xCLE1BQU0sQ0FBQ0csTUFBTSxDQUFDTCxPQUFPLENBQUN3QyxVQUFVLENBQUNoQyxjQUFjLENBQUNpQyxhQUFhO0FBQ2pFLENBQUM7U0FDUXRDLFlBQVksSUFBSXNCLElBQUksRUFBRSxDQUFDO0lBQzVCYixlQUFlLENBQUNDLE1BQU0sR0FBRyxHQUFHLENBQUNkLE9BQU8sQ0FBQ0MsT0FBTyxJQUFJeUIsSUFBSTtJQUNwRGIsZUFBZSxDQUFDRSxjQUFjLENBQUNRLE9BQU8sRUFBRU4sRUFBRSxHQUFHQSxFQUFFOztJQUUvQ0osZUFBZSxDQUFDRSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLE1BQU0sQ0FBQ0YsZUFBZSxDQUFDQyxNQUFNO0FBQ2pDLENBQUM7U0FDUVQsd0JBQXdCLENBQUNTLE1BQU0sRUFBRSxDQUFDO0lBQ3ZDLEtBQUssQ0FBQzZCLFlBQVksR0FBRzdCLE1BQU07SUFDM0IsS0FBSyxDQUFDOEIsUUFBUSxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUNELEdBQUcsRUFBRSxLQUFLLENBQUNDLFFBQVEsSUFBSTFCLGlCQUFpQixDQUFDLENBQUM7UUFDdEMsRUFBRSxFQUFFLE1BQU0sQ0FBQ3dCLFlBQVksQ0FBQ0UsUUFBUSxNQUFNLENBQVEsU0FBRSxDQUFDO1lBQzdDRCxRQUFRLENBQUNDLFFBQVEsSUFBSW5ELE1BQU0sQ0FBQ29ELE1BQU0sQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPLENBQUNMLFlBQVksQ0FBQ0UsUUFBUSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDakYsQ0FBQyxFQUFFRixZQUFZLENBQUNFLFFBQVEsRUFBRyxDQUFtQzs7WUFFOUQsUUFBUTtRQUNaLENBQUM7UUFDREQsUUFBUSxDQUFDQyxRQUFRLElBQUlGLFlBQVksQ0FBQ0UsUUFBUTtJQUM5QyxDQUFDO0lBQ0QsRUFBaUc7SUFDakdELFFBQVEsQ0FBQ3RCLE1BQU0sR0FBR3RCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDcUIsTUFBTTtJQUN4Q0QsZ0JBQWdCLENBQUNFLE9BQU8sRUFBRUMsS0FBSyxHQUFHLENBQUM7UUFDL0JvQixRQUFRLENBQUNwQixLQUFLLFFBQVFFLElBQUksR0FBRyxDQUFDO1lBQzFCLE1BQU0sQ0FBQ2lCLFlBQVksQ0FBQ25CLEtBQUssS0FBS0UsSUFBSTtRQUN0QyxDQUFDO0lBQ0wsQ0FBQztJQUNELE1BQU0sQ0FBQ2tCLFFBQVE7QUFDbkIsQ0FBQyxDQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yb3V0ZXIuanM/OTY2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3JvdXRlci5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2l0aFJvdXRlclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3dpdGhSb3V0ZXIuZGVmYXVsdDtcbiAgICB9XG59KTtcbmV4cG9ydHMudXNlUm91dGVyID0gdXNlUm91dGVyO1xuZXhwb3J0cy5jcmVhdGVSb3V0ZXIgPSBjcmVhdGVSb3V0ZXI7XG5leHBvcnRzLm1ha2VQdWJsaWNSb3V0ZXJJbnN0YW5jZSA9IG1ha2VQdWJsaWNSb3V0ZXJJbnN0YW5jZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3JvdXRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3JvdXRlclwiKSk7XG52YXIgX3JvdXRlckNvbnRleHQgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXItY29udGV4dFwiKTtcbnZhciBfaXNFcnJvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2xpYi9pcy1lcnJvclwiKSk7XG52YXIgX3dpdGhSb3V0ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dpdGgtcm91dGVyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmNvbnN0IHNpbmdsZXRvblJvdXRlciA9IHtcbiAgICByb3V0ZXI6IG51bGwsXG4gICAgcmVhZHlDYWxsYmFja3M6IFtdLFxuICAgIHJlYWR5IChjYikge1xuICAgICAgICBpZiAodGhpcy5yb3V0ZXIpIHJldHVybiBjYigpO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZHlDYWxsYmFja3MucHVzaChjYik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuLy8gQ3JlYXRlIHB1YmxpYyBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIG9mIHRoZSByb3V0ZXIgaW4gdGhlIHNpbmdsZXRvblJvdXRlclxuY29uc3QgdXJsUHJvcGVydHlGaWVsZHMgPSBbXG4gICAgJ3BhdGhuYW1lJyxcbiAgICAncm91dGUnLFxuICAgICdxdWVyeScsXG4gICAgJ2FzUGF0aCcsXG4gICAgJ2NvbXBvbmVudHMnLFxuICAgICdpc0ZhbGxiYWNrJyxcbiAgICAnYmFzZVBhdGgnLFxuICAgICdsb2NhbGUnLFxuICAgICdsb2NhbGVzJyxcbiAgICAnZGVmYXVsdExvY2FsZScsXG4gICAgJ2lzUmVhZHknLFxuICAgICdpc1ByZXZpZXcnLFxuICAgICdpc0xvY2FsZURvbWFpbicsXG4gICAgJ2RvbWFpbkxvY2FsZXMnLCBcbl07XG5jb25zdCByb3V0ZXJFdmVudHMgPSBbXG4gICAgJ3JvdXRlQ2hhbmdlU3RhcnQnLFxuICAgICdiZWZvcmVIaXN0b3J5Q2hhbmdlJyxcbiAgICAncm91dGVDaGFuZ2VDb21wbGV0ZScsXG4gICAgJ3JvdXRlQ2hhbmdlRXJyb3InLFxuICAgICdoYXNoQ2hhbmdlU3RhcnQnLFxuICAgICdoYXNoQ2hhbmdlQ29tcGxldGUnLCBcbl07XG5jb25zdCBjb3JlTWV0aG9kRmllbGRzID0gW1xuICAgICdwdXNoJyxcbiAgICAncmVwbGFjZScsXG4gICAgJ3JlbG9hZCcsXG4gICAgJ2JhY2snLFxuICAgICdwcmVmZXRjaCcsXG4gICAgJ2JlZm9yZVBvcFN0YXRlJywgXG5dO1xuLy8gRXZlbnRzIGlzIGEgc3RhdGljIHByb3BlcnR5IG9uIHRoZSByb3V0ZXIsIHRoZSByb3V0ZXIgZG9lc24ndCBoYXZlIHRvIGJlIGluaXRpYWxpemVkIHRvIHVzZSBpdFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHNpbmdsZXRvblJvdXRlciwgJ2V2ZW50cycsIHtcbiAgICBnZXQgKCkge1xuICAgICAgICByZXR1cm4gX3JvdXRlci5kZWZhdWx0LmV2ZW50cztcbiAgICB9XG59KTtcbnVybFByb3BlcnR5RmllbGRzLmZvckVhY2goKGZpZWxkKT0+e1xuICAgIC8vIEhlcmUgd2UgbmVlZCB0byB1c2UgT2JqZWN0LmRlZmluZVByb3BlcnR5IGJlY2F1c2Ugd2UgbmVlZCB0byByZXR1cm5cbiAgICAvLyB0aGUgcHJvcGVydHkgYXNzaWduZWQgdG8gdGhlIGFjdHVhbCByb3V0ZXJcbiAgICAvLyBUaGUgdmFsdWUgbWlnaHQgZ2V0IGNoYW5nZWQgYXMgd2UgY2hhbmdlIHJvdXRlcyBhbmQgdGhpcyBpcyB0aGVcbiAgICAvLyBwcm9wZXIgd2F5IHRvIGFjY2VzcyBpdFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaW5nbGV0b25Sb3V0ZXIsIGZpZWxkLCB7XG4gICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICBjb25zdCByb3V0ZXIgPSBnZXRSb3V0ZXIoKTtcbiAgICAgICAgICAgIHJldHVybiByb3V0ZXJbZmllbGRdO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcbmNvcmVNZXRob2RGaWVsZHMuZm9yRWFjaCgoZmllbGQpPT57XG4gICAgc2luZ2xldG9uUm91dGVyW2ZpZWxkXSA9ICguLi5hcmdzKT0+e1xuICAgICAgICBjb25zdCByb3V0ZXIgPSBnZXRSb3V0ZXIoKTtcbiAgICAgICAgcmV0dXJuIHJvdXRlcltmaWVsZF0oLi4uYXJncyk7XG4gICAgfTtcbn0pO1xucm91dGVyRXZlbnRzLmZvckVhY2goKGV2ZW50KT0+e1xuICAgIHNpbmdsZXRvblJvdXRlci5yZWFkeSgoKT0+e1xuICAgICAgICBfcm91dGVyLmRlZmF1bHQuZXZlbnRzLm9uKGV2ZW50LCAoLi4uYXJncyk9PntcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50RmllbGQgPSBgb24ke2V2ZW50LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpfSR7ZXZlbnQuc3Vic3RyaW5nKDEpfWA7XG4gICAgICAgICAgICBjb25zdCBfc2luZ2xldG9uUm91dGVyID0gc2luZ2xldG9uUm91dGVyO1xuICAgICAgICAgICAgaWYgKF9zaW5nbGV0b25Sb3V0ZXJbZXZlbnRGaWVsZF0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBfc2luZ2xldG9uUm91dGVyW2V2ZW50RmllbGRdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciB3aGVuIHJ1bm5pbmcgdGhlIFJvdXRlciBldmVudDogJHtldmVudEZpZWxkfWApO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCgwLCBfaXNFcnJvcikuZGVmYXVsdChlcnIpID8gYCR7ZXJyLm1lc3NhZ2V9XFxuJHtlcnIuc3RhY2t9YCA6IGVyciArICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG5mdW5jdGlvbiBnZXRSb3V0ZXIoKSB7XG4gICAgaWYgKCFzaW5nbGV0b25Sb3V0ZXIucm91dGVyKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnTm8gcm91dGVyIGluc3RhbmNlIGZvdW5kLlxcbicgKyAnWW91IHNob3VsZCBvbmx5IHVzZSBcIm5leHQvcm91dGVyXCIgb24gdGhlIGNsaWVudCBzaWRlIG9mIHlvdXIgYXBwLlxcbic7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpbmdsZXRvblJvdXRlci5yb3V0ZXI7XG59XG52YXIgX2RlZmF1bHQgPSBzaW5nbGV0b25Sb3V0ZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbmZ1bmN0aW9uIHVzZVJvdXRlcigpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQudXNlQ29udGV4dChfcm91dGVyQ29udGV4dC5Sb3V0ZXJDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlciguLi5hcmdzKSB7XG4gICAgc2luZ2xldG9uUm91dGVyLnJvdXRlciA9IG5ldyBfcm91dGVyLmRlZmF1bHQoLi4uYXJncyk7XG4gICAgc2luZ2xldG9uUm91dGVyLnJlYWR5Q2FsbGJhY2tzLmZvckVhY2goKGNiKT0+Y2IoKVxuICAgICk7XG4gICAgc2luZ2xldG9uUm91dGVyLnJlYWR5Q2FsbGJhY2tzID0gW107XG4gICAgcmV0dXJuIHNpbmdsZXRvblJvdXRlci5yb3V0ZXI7XG59XG5mdW5jdGlvbiBtYWtlUHVibGljUm91dGVySW5zdGFuY2Uocm91dGVyKSB7XG4gICAgY29uc3Qgc2NvcGVkUm91dGVyID0gcm91dGVyO1xuICAgIGNvbnN0IGluc3RhbmNlID0ge1xuICAgIH07XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiB1cmxQcm9wZXJ0eUZpZWxkcyl7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NvcGVkUm91dGVyW3Byb3BlcnR5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGluc3RhbmNlW3Byb3BlcnR5XSA9IE9iamVjdC5hc3NpZ24oQXJyYXkuaXNBcnJheShzY29wZWRSb3V0ZXJbcHJvcGVydHldKSA/IFtdIDoge1xuICAgICAgICAgICAgfSwgc2NvcGVkUm91dGVyW3Byb3BlcnR5XSkgLy8gbWFrZXMgc3VyZSBxdWVyeSBpcyBub3Qgc3RhdGVmdWxcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlW3Byb3BlcnR5XSA9IHNjb3BlZFJvdXRlcltwcm9wZXJ0eV07XG4gICAgfVxuICAgIC8vIEV2ZW50cyBpcyBhIHN0YXRpYyBwcm9wZXJ0eSBvbiB0aGUgcm91dGVyLCB0aGUgcm91dGVyIGRvZXNuJ3QgaGF2ZSB0byBiZSBpbml0aWFsaXplZCB0byB1c2UgaXRcbiAgICBpbnN0YW5jZS5ldmVudHMgPSBfcm91dGVyLmRlZmF1bHQuZXZlbnRzO1xuICAgIGNvcmVNZXRob2RGaWVsZHMuZm9yRWFjaCgoZmllbGQpPT57XG4gICAgICAgIGluc3RhbmNlW2ZpZWxkXSA9ICguLi5hcmdzKT0+e1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlZFJvdXRlcltmaWVsZF0oLi4uYXJncyk7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl9yb3V0ZXIiLCJkZWZhdWx0IiwiX3dpdGhSb3V0ZXIiLCJ1c2VSb3V0ZXIiLCJjcmVhdGVSb3V0ZXIiLCJtYWtlUHVibGljUm91dGVySW5zdGFuY2UiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yb3V0ZXJDb250ZXh0IiwiX2lzRXJyb3IiLCJvYmoiLCJfX2VzTW9kdWxlIiwic2luZ2xldG9uUm91dGVyIiwicm91dGVyIiwicmVhZHlDYWxsYmFja3MiLCJyZWFkeSIsImNiIiwicHVzaCIsInVybFByb3BlcnR5RmllbGRzIiwicm91dGVyRXZlbnRzIiwiY29yZU1ldGhvZEZpZWxkcyIsImV2ZW50cyIsImZvckVhY2giLCJmaWVsZCIsImdldFJvdXRlciIsImFyZ3MiLCJldmVudCIsIm9uIiwiZXZlbnRGaWVsZCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwiX3NpbmdsZXRvblJvdXRlciIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJzdGFjayIsIkVycm9yIiwiX2RlZmF1bHQiLCJ1c2VDb250ZXh0IiwiUm91dGVyQ29udGV4dCIsInNjb3BlZFJvdXRlciIsImluc3RhbmNlIiwicHJvcGVydHkiLCJhc3NpZ24iLCJBcnJheSIsImlzQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/router.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/use-intersection.js":
/*!***************************************************************!*\
  !*** ../../node_modules/next/dist/client/use-intersection.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useIntersection = useIntersection;\nvar _react = __webpack_require__(/*! react */ \"react\");\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"../../node_modules/next/dist/client/request-idle-callback.js\");\nconst hasIntersectionObserver = typeof IntersectionObserver !== 'undefined';\nfunction useIntersection({ rootMargin , disabled  }) {\n    const isDisabled = disabled || !hasIntersectionObserver;\n    const unobserve = (0, _react).useRef();\n    const [visible, setVisible] = (0, _react).useState(false);\n    const setRef = (0, _react).useCallback((el)=>{\n        if (unobserve.current) {\n            unobserve.current();\n            unobserve.current = undefined;\n        }\n        if (isDisabled || visible) return;\n        if (el && el.tagName) {\n            unobserve.current = observe(el, (isVisible)=>isVisible && setVisible(isVisible)\n            , {\n                rootMargin\n            });\n        }\n    }, [\n        isDisabled,\n        rootMargin,\n        visible\n    ]);\n    (0, _react).useEffect(()=>{\n        if (!hasIntersectionObserver) {\n            if (!visible) {\n                const idleCallback = (0, _requestIdleCallback).requestIdleCallback(()=>setVisible(true)\n                );\n                return ()=>(0, _requestIdleCallback).cancelIdleCallback(idleCallback)\n                ;\n            }\n        }\n    }, [\n        visible\n    ]);\n    return [\n        setRef,\n        visible\n    ];\n}\nfunction observe(element, callback, options) {\n    const { id , observer , elements  } = createObserver(options);\n    elements.set(element, callback);\n    observer.observe(element);\n    return function unobserve() {\n        elements.delete(element);\n        observer.unobserve(element);\n        // Destroy observer when there's nothing left to watch:\n        if (elements.size === 0) {\n            observer.disconnect();\n            observers.delete(id);\n        }\n    };\n}\nconst observers = new Map();\nfunction createObserver(options) {\n    const id = options.rootMargin || '';\n    let instance = observers.get(id);\n    if (instance) {\n        return instance;\n    }\n    const elements = new Map();\n    const observer = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            const callback = elements.get(entry.target);\n            const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n            if (callback && isVisible) {\n                callback(isVisible);\n            }\n        });\n    }, options);\n    observers.set(id, instance = {\n        id,\n        observer,\n        elements\n    });\n    return instance;\n} //# sourceMappingURL=use-intersection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvdXNlLWludGVyc2VjdGlvbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBWTtBQUNaQSw4Q0FBNkMsQ0FBQztJQUMxQ0csS0FBSyxFQUFFLElBQUk7QUFDZixDQUFDLEVBQUM7QUFDRkQsdUJBQXVCLEdBQUdFLGVBQWU7QUFDekMsR0FBRyxDQUFDQyxNQUFNLEdBQUdDLG1CQUFPLENBQUMsb0JBQU87QUFDNUIsR0FBRyxDQUFDQyxvQkFBb0IsR0FBR0QsbUJBQU8sQ0FBQyw2RkFBeUI7QUFDNUQsS0FBSyxDQUFDRSx1QkFBdUIsR0FBRyxNQUFNLENBQUNDLG9CQUFvQixLQUFLLENBQVc7U0FDbEVMLGVBQWUsQ0FBQyxDQUFDLENBQUNNLFVBQVUsR0FBR0MsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2xELEtBQUssQ0FBQ0MsVUFBVSxHQUFHRCxRQUFRLEtBQUtILHVCQUF1QjtJQUN2RCxLQUFLLENBQUNLLFNBQVMsSUFBSSxDQUFDLEVBQUVSLE1BQU0sRUFBRVMsTUFBTTtJQUNwQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxLQUFLLENBQUMsRUFBRVgsTUFBTSxFQUFFWSxRQUFRLENBQUMsS0FBSztJQUN4RCxLQUFLLENBQUNDLE1BQU0sSUFBSSxDQUFDLEVBQUViLE1BQU0sRUFBRWMsV0FBVyxFQUFFQyxFQUFFLEdBQUcsQ0FBQztRQUMxQyxFQUFFLEVBQUVQLFNBQVMsQ0FBQ1EsT0FBTyxFQUFFLENBQUM7WUFDcEJSLFNBQVMsQ0FBQ1EsT0FBTztZQUNqQlIsU0FBUyxDQUFDUSxPQUFPLEdBQUdDLFNBQVM7UUFDakMsQ0FBQztRQUNELEVBQUUsRUFBRVYsVUFBVSxJQUFJRyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxFQUFFLEVBQUVLLEVBQUUsSUFBSUEsRUFBRSxDQUFDRyxPQUFPLEVBQUUsQ0FBQztZQUNuQlYsU0FBUyxDQUFDUSxPQUFPLEdBQUdHLE9BQU8sQ0FBQ0osRUFBRSxHQUFHSyxTQUFTLEdBQUdBLFNBQVMsSUFBSVQsVUFBVSxDQUFDUyxTQUFTO2NBQzVFLENBQUM7Z0JBQ0NmLFVBQVU7WUFDZCxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUMsRUFBRSxDQUFDO1FBQ0FFLFVBQVU7UUFDVkYsVUFBVTtRQUNWSyxPQUFPO0lBQ1gsQ0FBQztLQUNBLENBQUMsRUFBRVYsTUFBTSxFQUFFcUIsU0FBUyxLQUFLLENBQUM7UUFDdkIsRUFBRSxHQUFHbEIsdUJBQXVCLEVBQUUsQ0FBQztZQUMzQixFQUFFLEdBQUdPLE9BQU8sRUFBRSxDQUFDO2dCQUNYLEtBQUssQ0FBQ1ksWUFBWSxJQUFJLENBQUMsRUFBRXBCLG9CQUFvQixFQUFFcUIsbUJBQW1CLEtBQUtaLFVBQVUsQ0FBQyxJQUFJOztnQkFFdEYsTUFBTSxNQUFNLENBQUMsRUFBRVQsb0JBQW9CLEVBQUVzQixrQkFBa0IsQ0FBQ0YsWUFBWTs7WUFFeEUsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDLEVBQUUsQ0FBQztRQUNBWixPQUFPO0lBQ1gsQ0FBQztJQUNELE1BQU0sQ0FBQyxDQUFDO1FBQ0pHLE1BQU07UUFDTkgsT0FBTztJQUNYLENBQUM7QUFDTCxDQUFDO1NBQ1FTLE9BQU8sQ0FBQ00sT0FBTyxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRSxDQUFDO0lBQzFDLEtBQUssQ0FBQyxDQUFDLENBQUNDLEVBQUUsR0FBR0MsUUFBUSxHQUFHQyxRQUFRLEVBQUUsQ0FBQyxHQUFHQyxjQUFjLENBQUNKLE9BQU87SUFDNURHLFFBQVEsQ0FBQ0UsR0FBRyxDQUFDUCxPQUFPLEVBQUVDLFFBQVE7SUFDOUJHLFFBQVEsQ0FBQ1YsT0FBTyxDQUFDTSxPQUFPO0lBQ3hCLE1BQU0sQ0FBQyxRQUFRLENBQUNqQixTQUFTLEdBQUcsQ0FBQztRQUN6QnNCLFFBQVEsQ0FBQ0csTUFBTSxDQUFDUixPQUFPO1FBQ3ZCSSxRQUFRLENBQUNyQixTQUFTLENBQUNpQixPQUFPO1FBQzFCLEVBQXVEO1FBQ3ZELEVBQUUsRUFBRUssUUFBUSxDQUFDSSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDdEJMLFFBQVEsQ0FBQ00sVUFBVTtZQUNuQkMsU0FBUyxDQUFDSCxNQUFNLENBQUNMLEVBQUU7UUFDdkIsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDO0FBQ0QsS0FBSyxDQUFDUSxTQUFTLEdBQUcsR0FBRyxDQUFDQyxHQUFHO1NBQ2hCTixjQUFjLENBQUNKLE9BQU8sRUFBRSxDQUFDO0lBQzlCLEtBQUssQ0FBQ0MsRUFBRSxHQUFHRCxPQUFPLENBQUN0QixVQUFVLElBQUksQ0FBRTtJQUNuQyxHQUFHLENBQUNpQyxRQUFRLEdBQUdGLFNBQVMsQ0FBQ0csR0FBRyxDQUFDWCxFQUFFO0lBQy9CLEVBQUUsRUFBRVUsUUFBUSxFQUFFLENBQUM7UUFDWCxNQUFNLENBQUNBLFFBQVE7SUFDbkIsQ0FBQztJQUNELEtBQUssQ0FBQ1IsUUFBUSxHQUFHLEdBQUcsQ0FBQ08sR0FBRztJQUN4QixLQUFLLENBQUNSLFFBQVEsR0FBRyxHQUFHLENBQUN6QixvQkFBb0IsRUFBRW9DLE9BQU8sR0FBRyxDQUFDO1FBQ2xEQSxPQUFPLENBQUNDLE9BQU8sRUFBRUMsS0FBSyxHQUFHLENBQUM7WUFDdEIsS0FBSyxDQUFDaEIsUUFBUSxHQUFHSSxRQUFRLENBQUNTLEdBQUcsQ0FBQ0csS0FBSyxDQUFDQyxNQUFNO1lBQzFDLEtBQUssQ0FBQ3ZCLFNBQVMsR0FBR3NCLEtBQUssQ0FBQ0UsY0FBYyxJQUFJRixLQUFLLENBQUNHLGlCQUFpQixHQUFHLENBQUM7WUFDckUsRUFBRSxFQUFFbkIsUUFBUSxJQUFJTixTQUFTLEVBQUUsQ0FBQztnQkFDeEJNLFFBQVEsQ0FBQ04sU0FBUztZQUN0QixDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUMsRUFBRU8sT0FBTztJQUNWUyxTQUFTLENBQUNKLEdBQUcsQ0FBQ0osRUFBRSxFQUFFVSxRQUFRLEdBQUcsQ0FBQztRQUMxQlYsRUFBRTtRQUNGQyxRQUFRO1FBQ1JDLFFBQVE7SUFDWixDQUFDO0lBQ0QsTUFBTSxDQUFDUSxRQUFRO0FBQ25CLENBQUMsQ0FFMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvdXNlLWludGVyc2VjdGlvbi5qcz8zMGFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy51c2VJbnRlcnNlY3Rpb24gPSB1c2VJbnRlcnNlY3Rpb247XG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIF9yZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWlyZShcIi4vcmVxdWVzdC1pZGxlLWNhbGxiYWNrXCIpO1xuY29uc3QgaGFzSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSB0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gdXNlSW50ZXJzZWN0aW9uKHsgcm9vdE1hcmdpbiAsIGRpc2FibGVkICB9KSB7XG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IGRpc2FibGVkIHx8ICFoYXNJbnRlcnNlY3Rpb25PYnNlcnZlcjtcbiAgICBjb25zdCB1bm9ic2VydmUgPSAoMCwgX3JlYWN0KS51c2VSZWYoKTtcbiAgICBjb25zdCBbdmlzaWJsZSwgc2V0VmlzaWJsZV0gPSAoMCwgX3JlYWN0KS51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3Qgc2V0UmVmID0gKDAsIF9yZWFjdCkudXNlQ2FsbGJhY2soKGVsKT0+e1xuICAgICAgICBpZiAodW5vYnNlcnZlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHVub2JzZXJ2ZS5jdXJyZW50KCk7XG4gICAgICAgICAgICB1bm9ic2VydmUuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEaXNhYmxlZCB8fCB2aXNpYmxlKSByZXR1cm47XG4gICAgICAgIGlmIChlbCAmJiBlbC50YWdOYW1lKSB7XG4gICAgICAgICAgICB1bm9ic2VydmUuY3VycmVudCA9IG9ic2VydmUoZWwsIChpc1Zpc2libGUpPT5pc1Zpc2libGUgJiYgc2V0VmlzaWJsZShpc1Zpc2libGUpXG4gICAgICAgICAgICAsIHtcbiAgICAgICAgICAgICAgICByb290TWFyZ2luXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgaXNEaXNhYmxlZCxcbiAgICAgICAgcm9vdE1hcmdpbixcbiAgICAgICAgdmlzaWJsZVxuICAgIF0pO1xuICAgICgwLCBfcmVhY3QpLnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoIWhhc0ludGVyc2VjdGlvbk9ic2VydmVyKSB7XG4gICAgICAgICAgICBpZiAoIXZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZGxlQ2FsbGJhY2sgPSAoMCwgX3JlcXVlc3RJZGxlQ2FsbGJhY2spLnJlcXVlc3RJZGxlQ2FsbGJhY2soKCk9PnNldFZpc2libGUodHJ1ZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKT0+KDAsIF9yZXF1ZXN0SWRsZUNhbGxiYWNrKS5jYW5jZWxJZGxlQ2FsbGJhY2soaWRsZUNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgdmlzaWJsZVxuICAgIF0pO1xuICAgIHJldHVybiBbXG4gICAgICAgIHNldFJlZixcbiAgICAgICAgdmlzaWJsZVxuICAgIF07XG59XG5mdW5jdGlvbiBvYnNlcnZlKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBpZCAsIG9ic2VydmVyICwgZWxlbWVudHMgIH0gPSBjcmVhdGVPYnNlcnZlcihvcHRpb25zKTtcbiAgICBlbGVtZW50cy5zZXQoZWxlbWVudCwgY2FsbGJhY2spO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVub2JzZXJ2ZSgpIHtcbiAgICAgICAgZWxlbWVudHMuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgIC8vIERlc3Ryb3kgb2JzZXJ2ZXIgd2hlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byB3YXRjaDpcbiAgICAgICAgaWYgKGVsZW1lbnRzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIG9ic2VydmVycy5kZWxldGUoaWQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmNvbnN0IG9ic2VydmVycyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmVyKG9wdGlvbnMpIHtcbiAgICBjb25zdCBpZCA9IG9wdGlvbnMucm9vdE1hcmdpbiB8fCAnJztcbiAgICBsZXQgaW5zdGFuY2UgPSBvYnNlcnZlcnMuZ2V0KGlkKTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50cyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcyk9PntcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSk9PntcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZWxlbWVudHMuZ2V0KGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCBpc1Zpc2libGUgPSBlbnRyeS5pc0ludGVyc2VjdGluZyB8fCBlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyA+IDA7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soaXNWaXNpYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSwgb3B0aW9ucyk7XG4gICAgb2JzZXJ2ZXJzLnNldChpZCwgaW5zdGFuY2UgPSB7XG4gICAgICAgIGlkLFxuICAgICAgICBvYnNlcnZlcixcbiAgICAgICAgZWxlbWVudHNcbiAgICB9KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pbnRlcnNlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlSW50ZXJzZWN0aW9uIiwiX3JlYWN0IiwicmVxdWlyZSIsIl9yZXF1ZXN0SWRsZUNhbGxiYWNrIiwiaGFzSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsInJvb3RNYXJnaW4iLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJ1bm9ic2VydmUiLCJ1c2VSZWYiLCJ2aXNpYmxlIiwic2V0VmlzaWJsZSIsInVzZVN0YXRlIiwic2V0UmVmIiwidXNlQ2FsbGJhY2siLCJlbCIsImN1cnJlbnQiLCJ1bmRlZmluZWQiLCJ0YWdOYW1lIiwib2JzZXJ2ZSIsImlzVmlzaWJsZSIsInVzZUVmZmVjdCIsImlkbGVDYWxsYmFjayIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJlbGVtZW50IiwiY2FsbGJhY2siLCJvcHRpb25zIiwiaWQiLCJvYnNlcnZlciIsImVsZW1lbnRzIiwiY3JlYXRlT2JzZXJ2ZXIiLCJzZXQiLCJkZWxldGUiLCJzaXplIiwiZGlzY29ubmVjdCIsIm9ic2VydmVycyIsIk1hcCIsImluc3RhbmNlIiwiZ2V0IiwiZW50cmllcyIsImZvckVhY2giLCJlbnRyeSIsInRhcmdldCIsImlzSW50ZXJzZWN0aW5nIiwiaW50ZXJzZWN0aW9uUmF0aW8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/use-intersection.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/with-router.js":
/*!**********************************************************!*\
  !*** ../../node_modules/next/dist/client/with-router.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = withRouter;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\nvar _router = __webpack_require__(/*! ./router */ \"../../node_modules/next/dist/client/router.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction withRouter(ComposedComponent) {\n    function WithRouterWrapper(props) {\n        return(/*#__PURE__*/ _react.default.createElement(ComposedComponent, Object.assign({\n            router: (0, _router).useRouter()\n        }, props)));\n    }\n    WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps;\n    WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;\n    if (true) {\n        const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';\n        WithRouterWrapper.displayName = `withRouter(${name})`;\n    }\n    return WithRouterWrapper;\n} //# sourceMappingURL=with-router.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvd2l0aC1yb3V0ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQVk7QUFDWkEsOENBQTZDLENBQUM7SUFDMUNHLEtBQUssRUFBRSxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUdHLFVBQVU7QUFDNUIsR0FBRyxDQUFDQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDQyxtQkFBTyxDQUFDLG9CQUFPO0FBQ25ELEdBQUcsQ0FBQ0MsT0FBTyxHQUFHRCxtQkFBTyxDQUFDLCtEQUFVO1NBQ3ZCRCxzQkFBc0IsQ0FBQ0csR0FBRyxFQUFFLENBQUM7SUFDbEMsTUFBTSxDQUFDQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBVSxHQUFHRCxHQUFHLEdBQUcsQ0FBQztRQUNsQ04sT0FBTyxFQUFFTSxHQUFHO0lBQ2hCLENBQUM7QUFDTCxDQUFDO1NBQ1FMLFVBQVUsQ0FBQ08saUJBQWlCLEVBQUUsQ0FBQzthQUMzQkMsaUJBQWlCLENBQUNDLEtBQUssRUFBRSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxFQUFhLFlBQUNSLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDVyxhQUFhLENBQUNILGlCQUFpQixFQUFFWixNQUFNLENBQUNnQixNQUFNLENBQUMsQ0FBQztZQUNoRkMsTUFBTSxHQUFHLENBQUMsRUFBRVIsT0FBTyxFQUFFUyxTQUFTO1FBQ2xDLENBQUMsRUFBRUosS0FBSztJQUNaLENBQUM7SUFDREQsaUJBQWlCLENBQUNNLGVBQWUsR0FBR1AsaUJBQWlCLENBQUNPLGVBQWU7SUFDckVOLGlCQUFpQixDQUFDTyxtQkFBbUIsR0FBR1IsaUJBQWlCLENBQUNRLG1CQUFtQjtJQUM3RSxFQUFFLEVBcEJOLElBb0I2QyxFQUFFLENBQUM7UUFDeEMsS0FBSyxDQUFDQyxJQUFJLEdBQUdULGlCQUFpQixDQUFDVSxXQUFXLElBQUlWLGlCQUFpQixDQUFDUyxJQUFJLElBQUksQ0FBUztRQUNqRlIsaUJBQWlCLENBQUNTLFdBQVcsSUFBSSxXQUFXLEVBQUVELElBQUksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFDRCxNQUFNLENBQUNSLGlCQUFpQjtBQUM1QixDQUFDLENBRXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3dpdGgtcm91dGVyLmpzPzk3NmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB3aXRoUm91dGVyO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcm91dGVyID0gcmVxdWlyZShcIi4vcm91dGVyXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb3NlZENvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIFdpdGhSb3V0ZXJXcmFwcGVyKHByb3BzKSB7XG4gICAgICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9zZWRDb21wb25lbnQsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgcm91dGVyOiAoMCwgX3JvdXRlcikudXNlUm91dGVyKClcbiAgICAgICAgfSwgcHJvcHMpKSk7XG4gICAgfVxuICAgIFdpdGhSb3V0ZXJXcmFwcGVyLmdldEluaXRpYWxQcm9wcyA9IENvbXBvc2VkQ29tcG9uZW50LmdldEluaXRpYWxQcm9wcztcbiAgICBXaXRoUm91dGVyV3JhcHBlci5vcmlnR2V0SW5pdGlhbFByb3BzID0gQ29tcG9zZWRDb21wb25lbnQub3JpZ0dldEluaXRpYWxQcm9wcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zdCBuYW1lID0gQ29tcG9zZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9zZWRDb21wb25lbnQubmFtZSB8fCAnVW5rbm93bic7XG4gICAgICAgIFdpdGhSb3V0ZXJXcmFwcGVyLmRpc3BsYXlOYW1lID0gYHdpdGhSb3V0ZXIoJHtuYW1lfSlgO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFJvdXRlcldyYXBwZXI7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGgtcm91dGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJ3aXRoUm91dGVyIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcm91dGVyIiwib2JqIiwiX19lc01vZHVsZSIsIkNvbXBvc2VkQ29tcG9uZW50IiwiV2l0aFJvdXRlcldyYXBwZXIiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJhc3NpZ24iLCJyb3V0ZXIiLCJ1c2VSb3V0ZXIiLCJnZXRJbml0aWFsUHJvcHMiLCJvcmlnR2V0SW5pdGlhbFByb3BzIiwibmFtZSIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/with-router.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/shared/lib/router/router.js":
/*!****************************************************************!*\
  !*** ../../node_modules/next/dist/shared/lib/router/router.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports[\"default\"] = void 0;\nvar _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ \"../../node_modules/next/dist/client/normalize-trailing-slash.js\");\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"../../node_modules/next/dist/client/route-loader.js\");\nvar _isError = _interopRequireDefault(__webpack_require__(/*! ../../../lib/is-error */ \"../../node_modules/next/dist/lib/is-error.js\"));\nvar _denormalizePagePath = __webpack_require__(/*! ../../../server/denormalize-page-path */ \"../../../server/denormalize-page-path\");\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"../i18n/normalize-locale-path\");\nvar _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ \"../mitt\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"../shared/lib/utils\");\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./utils/is-dynamic\");\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./utils/parse-relative-url\");\nvar _querystring = __webpack_require__(/*! ./utils/querystring */ \"./utils/querystring\");\nvar _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ \"./utils/resolve-rewrites\"));\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./utils/route-matcher\");\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./utils/route-regex\");\nvar _getMiddlewareRegex = __webpack_require__(/*! ./utils/get-middleware-regex */ \"./utils/get-middleware-regex\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet detectDomainLocale;\nif (false) {}\nconst basePath =  false || '';\nfunction buildCancellationError() {\n    return Object.assign(new Error('Route Cancelled'), {\n        cancelled: true\n    });\n}\nfunction addPathPrefix(path, prefix) {\n    if (!path.startsWith('/') || !prefix) {\n        return path;\n    }\n    const pathname = pathNoQueryHash(path);\n    return (0, _normalizeTrailingSlash).normalizePathTrailingSlash(`${prefix}${pathname}`) + path.substr(pathname.length);\n}\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n    if (false) {} else {\n        return false;\n    }\n}\nfunction addLocale(path, locale, defaultLocale) {\n    if (false) {}\n    return path;\n}\nfunction delLocale(path, locale) {\n    if (false) {}\n    return path;\n}\nfunction pathNoQueryHash(path) {\n    const queryIndex = path.indexOf('?');\n    const hashIndex = path.indexOf('#');\n    if (queryIndex > -1 || hashIndex > -1) {\n        path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n    }\n    return path;\n}\nfunction hasBasePath(path) {\n    path = pathNoQueryHash(path);\n    return path === basePath || path.startsWith(basePath + '/');\n}\nfunction addBasePath(path) {\n    // we only add the basepath on relative urls\n    return addPathPrefix(path, basePath);\n}\nfunction delBasePath(path) {\n    path = path.slice(basePath.length);\n    if (!path.startsWith('/')) path = `/${path}`;\n    return path;\n}\nfunction isLocalURL(url) {\n    // prevent a hydration mismatch on href for url with anchor refs\n    if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;\n    try {\n        // absolute urls can be local if they are on the same origin\n        const locationOrigin = (0, _utils).getLocationOrigin();\n        const resolved = new URL(url, locationOrigin);\n        return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n    } catch (_) {\n        return false;\n    }\n}\nfunction interpolateAs(route, asPathname, query) {\n    let interpolatedRoute = '';\n    const dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n    const dynamicGroups = dynamicRegex.groups;\n    const dynamicMatches = (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // TODO: should this take priority; also need to change in the router.\n    query;\n    interpolatedRoute = route;\n    const params = Object.keys(dynamicGroups);\n    if (!params.every((param)=>{\n        let value = dynamicMatches[param] || '';\n        const { repeat , optional  } = dynamicGroups[param];\n        // support single-level catch-all\n        // TODO: more robust handling for user-error (passing `/`)\n        let replaced = `[${repeat ? '...' : ''}${param}]`;\n        if (optional) {\n            replaced = `${!value ? '/' : ''}[${replaced}]`;\n        }\n        if (repeat && !Array.isArray(value)) value = [\n            value\n        ];\n        return (optional || param in dynamicMatches) && (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map(// path delimiter escaped since they are being inserted\n        // into the URL and we expect URL encoded segments\n        // when parsing dynamic route params\n        (segment)=>encodeURIComponent(segment)\n        ).join('/') : encodeURIComponent(value)) || '/');\n    })) {\n        interpolatedRoute = '' // did not satisfy all requirements\n        ;\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n    }\n    return {\n        params,\n        result: interpolatedRoute\n    };\n}\nfunction omitParmsFromQuery(query, params) {\n    const filteredQuery = {\n    };\n    Object.keys(query).forEach((key)=>{\n        if (!params.includes(key)) {\n            filteredQuery[key] = query[key];\n        }\n    });\n    return filteredQuery;\n}\nfunction resolveHref(router, href, resolveAs) {\n    // we use a dummy base url for relative urls\n    let base;\n    let urlAsString = typeof href === 'string' ? href : (0, _utils).formatWithValidation(href);\n    // repeated slashes and backslashes in the URL are considered\n    // invalid and will never match a Next.js page/file\n    const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n    const urlAsStringNoProto = urlProtoMatch ? urlAsString.substr(urlProtoMatch[0].length) : urlAsString;\n    const urlParts = urlAsStringNoProto.split('?');\n    if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n        console.error(`Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`);\n        const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n        urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;\n    }\n    // Return because it cannot be routed by the Next.js router\n    if (!isLocalURL(urlAsString)) {\n        return resolveAs ? [\n            urlAsString\n        ] : urlAsString;\n    }\n    try {\n        base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');\n    } catch (_) {\n        // fallback to / for invalid asPath values e.g. //\n        base = new URL('/', 'http://n');\n    }\n    try {\n        const finalUrl = new URL(urlAsString, base);\n        finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n        let interpolatedAs = '';\n        if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n            const query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n            const { result , params  } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n            if (result) {\n                interpolatedAs = (0, _utils).formatWithValidation({\n                    pathname: result,\n                    hash: finalUrl.hash,\n                    query: omitParmsFromQuery(query, params)\n                });\n            }\n        }\n        // if the origin didn't change, it means we received a relative href\n        const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n        return resolveAs ? [\n            resolvedHref,\n            interpolatedAs || resolvedHref\n        ] : resolvedHref;\n    } catch (_1) {\n        return resolveAs ? [\n            urlAsString\n        ] : urlAsString;\n    }\n}\nfunction stripOrigin(url) {\n    const origin = (0, _utils).getLocationOrigin();\n    return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\nfunction prepareUrlAs(router, url, as) {\n    // If url and as provided as an object representation,\n    // we'll format them into the string version here.\n    let [resolvedHref, resolvedAs] = resolveHref(router, url, true);\n    const origin = (0, _utils).getLocationOrigin();\n    const hrefHadOrigin = resolvedHref.startsWith(origin);\n    const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n    resolvedHref = stripOrigin(resolvedHref);\n    resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n    const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n    const preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n    return {\n        url: preparedUrl,\n        as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n    };\n}\nfunction resolveDynamicRoute(pathname, pages) {\n    const cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n    if (cleanPathname === '/404' || cleanPathname === '/_error') {\n        return pathname;\n    }\n    // handle resolving href for dynamic routes\n    if (!pages.includes(cleanPathname)) {\n        // eslint-disable-next-line array-callback-return\n        pages.some((page)=>{\n            if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n                pathname = page;\n                return true;\n            }\n        });\n    }\n    return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n}\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\nfunction fetchRetry(url, attempts, opts) {\n    return fetch(url, {\n        // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n        // Cookies may also be required for `getServerSideProps`.\n        //\n        // > `fetch` won’t send cookies, unless you set the credentials init\n        // > option.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n        //\n        // > For maximum browser compatibility when it comes to sending &\n        // > receiving cookies, always supply the `credentials: 'same-origin'`\n        // > option instead of relying on the default.\n        // https://github.com/github/fetch#caveats\n        credentials: 'same-origin'\n    }).then((res)=>{\n        if (!res.ok) {\n            if (attempts > 1 && res.status >= 500) {\n                return fetchRetry(url, attempts - 1, opts);\n            }\n            if (res.status === 404) {\n                return res.json().then((data)=>{\n                    if (data.notFound) {\n                        return {\n                            notFound: SSG_DATA_NOT_FOUND\n                        };\n                    }\n                    throw new Error(`Failed to load static props`);\n                });\n            }\n            throw new Error(`Failed to load static props`);\n        }\n        return opts.text ? res.text() : res.json();\n    });\n}\nfunction fetchNextData(dataHref, isServerRender, text, inflightCache, persistCache) {\n    const { href: cacheKey  } = new URL(dataHref, window.location.href);\n    if (inflightCache[cacheKey] !== undefined) {\n        return inflightCache[cacheKey];\n    }\n    return inflightCache[cacheKey] = fetchRetry(dataHref, isServerRender ? 3 : 1, {\n        text\n    }).catch((err)=>{\n        // We should only trigger a server-side transition if this was caused\n        // on a client-side transition. Otherwise, we'd get into an infinite\n        // loop.\n        if (!isServerRender) {\n            (0, _routeLoader).markAssetError(err);\n        }\n        throw err;\n    }).then((data)=>{\n        if (!persistCache || \"development\" !== 'production') {\n            delete inflightCache[cacheKey];\n        }\n        return data;\n    }).catch((err)=>{\n        delete inflightCache[cacheKey];\n        throw err;\n    });\n}\nclass Router {\n    constructor(pathname1, query1, as1, { initialProps , pageLoader , App , wrapApp , Component , err: err2 , subscription , isFallback , locale , locales , defaultLocale , domainLocales , isPreview  }){\n        // Static Data Cache\n        this.sdc = {\n        };\n        // In-flight Server Data Requests, for deduping\n        this.sdr = {\n        };\n        // In-flight middleware preflight requests\n        this.sde = {\n        };\n        this._idx = 0;\n        this.onPopState = (e)=>{\n            const state = e.state;\n            if (!state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname , query  } = this;\n                this.changeState('replaceState', (0, _utils).formatWithValidation({\n                    pathname: addBasePath(pathname),\n                    query\n                }), (0, _utils).getURL());\n                return;\n            }\n            if (!state.__N) {\n                return;\n            }\n            let forcedScroll;\n            const { url , as , options , idx  } = state;\n            if (false) {}\n            this._idx = idx;\n            const { pathname  } = (0, _parseRelativeUrl).parseRelativeUrl(url);\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(state)) {\n                return;\n            }\n            this.change('replaceState', url, as, Object.assign({\n            }, options, {\n                shallow: options.shallow && this._shallow,\n                locale: options.locale || this.defaultLocale\n            }), forcedScroll);\n        };\n        // represents the current component key\n        this.route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1);\n        // set up the component cache (by route keys)\n        this.components = {\n        };\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname1 !== '/_error') {\n            var ref;\n            this.components[this.route] = {\n                Component,\n                initial: true,\n                props: initialProps,\n                err: err2,\n                __N_SSG: initialProps && initialProps.__N_SSG,\n                __N_SSP: initialProps && initialProps.__N_SSP,\n                __N_RSC: !!((ref = Component) === null || ref === void 0 ? void 0 : ref.__next_rsc__)\n            };\n        }\n        this.components['/_app'] = {\n            Component: App,\n            styleSheets: []\n        };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname1;\n        this.query = query1;\n        // if auto prerendered and dynamic route wait to update asPath\n        // until after mount to prevent hydration mismatch\n        const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;\n        this.asPath = autoExportDynamic ? pathname1 : as1;\n        this.basePath = basePath;\n        this.sub = subscription;\n        this.clc = null;\n        this._wrapApp = wrapApp;\n        // make sure to ignore extra popState in safari on navigating\n        // back from external site\n        this.isSsr = true;\n        this.isFallback = isFallback;\n        this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n        this.isPreview = !!isPreview;\n        this.isLocaleDomain = false;\n        if (false) {}\n        if (false) {}\n    }\n    reload() {\n        window.location.reload();\n    }\n    /**\n   * Go back in history\n   */ back() {\n        window.history.back();\n    }\n    /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */ push(url, as, options = {\n    }) {\n        if (false) {}\n        ({ url , as  } = prepareUrlAs(this, url, as));\n        return this.change('pushState', url, as, options);\n    }\n    /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */ replace(url1, as2, options1 = {\n    }) {\n        ({ url: url1 , as: as2  } = prepareUrlAs(this, url1, as2));\n        return this.change('replaceState', url1, as2, options1);\n    }\n    async change(method, url2, as3, options2, forcedScroll) {\n        if (!isLocalURL(url2)) {\n            window.location.href = url2;\n            return false;\n        }\n        const shouldResolveHref = options2._h || options2._shouldResolveHref || pathNoQueryHash(url2) === pathNoQueryHash(as3);\n        // for static pages with query params in the URL we delay\n        // marking the router ready until after the query is updated\n        if (options2._h) {\n            this.isReady = true;\n        }\n        const prevLocale = this.locale;\n        if (false) { var ref; }\n        if (!options2._h) {\n            this.isSsr = false;\n        }\n        // marking route changes as a navigation start entry\n        if (_utils.ST) {\n            performance.mark('routeChange');\n        }\n        const { shallow =false  } = options2;\n        const routeProps = {\n            shallow\n        };\n        if (this._inFlightRoute) {\n            this.abortComponentLoad(this._inFlightRoute, routeProps);\n        }\n        as3 = addBasePath(addLocale(hasBasePath(as3) ? delBasePath(as3) : as3, options2.locale, this.defaultLocale));\n        const cleanedAs = delLocale(hasBasePath(as3) ? delBasePath(as3) : as3, this.locale);\n        this._inFlightRoute = as3;\n        let localeChange = prevLocale !== this.locale;\n        // If the url change is only related to a hash change\n        // We should not proceed. We should only change the state.\n        // WARNING: `_h` is an internal option for handing Next.js client-side\n        // hydration. Your app should _never_ use this property. It may change at\n        // any time without notice.\n        if (!options2._h && this.onlyAHashChange(cleanedAs) && !localeChange) {\n            this.asPath = cleanedAs;\n            Router.events.emit('hashChangeStart', as3, routeProps);\n            // TODO: do we need the resolved href when only a hash change?\n            this.changeState(method, url2, as3, options2);\n            this.scrollToHash(cleanedAs);\n            this.notify(this.components[this.route], null);\n            Router.events.emit('hashChangeComplete', as3, routeProps);\n            return true;\n        }\n        let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url2);\n        let { pathname , query  } = parsed;\n        // The build manifest needs to be loaded before auto-static dynamic pages\n        // get their query parameters to allow ensuring they can be parsed properly\n        // when rewritten to\n        let pages, rewrites;\n        try {\n            [pages, { __rewrites: rewrites  }] = await Promise.all([\n                this.pageLoader.getPageList(),\n                (0, _routeLoader).getClientBuildManifest(),\n                this.pageLoader.getMiddlewareList(), \n            ]);\n        } catch (err) {\n            // If we fail to resolve the page list or client-build manifest, we must\n            // do a server-side transition:\n            window.location.href = as3;\n            return false;\n        }\n        // If asked to change the current URL we should reload the current page\n        // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n        // We also need to set the method = replaceState always\n        // as this should not go into the history (That's how browsers work)\n        // We should compare the new asPath to the current asPath, not the url\n        if (!this.urlIsNew(cleanedAs) && !localeChange) {\n            method = 'replaceState';\n        }\n        // we need to resolve the as value using rewrites for dynamic SSG\n        // pages to allow building the data URL correctly\n        let resolvedAs = as3;\n        // url and as should always be prefixed with basePath by this\n        // point by either next/link or router.push/replace so strip the\n        // basePath from the pathname to match the pages dir 1-to-1\n        pathname = pathname ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname)) : pathname;\n        if (shouldResolveHref && pathname !== '/_error') {\n            options2._shouldResolveHref = true;\n            if (false) {} else {\n                parsed.pathname = resolveDynamicRoute(pathname, pages);\n                if (parsed.pathname !== pathname) {\n                    pathname = parsed.pathname;\n                    parsed.pathname = addBasePath(pathname);\n                    url2 = (0, _utils).formatWithValidation(parsed);\n                }\n            }\n        }\n        if (!isLocalURL(as3)) {\n            if (true) {\n                throw new Error(`Invalid href: \"${url2}\" and as: \"${as3}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n            }\n            window.location.href = as3;\n            return false;\n        }\n        resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n        const effect = await this._preflightRequest({\n            as: as3,\n            cache: \"development\" === 'production',\n            pages,\n            pathname,\n            query\n        });\n        if (effect.type === 'rewrite') {\n            query = {\n                ...query,\n                ...effect.parsedAs.query\n            };\n            resolvedAs = effect.asPath;\n            pathname = effect.resolvedHref;\n            parsed.pathname = effect.resolvedHref;\n            url2 = (0, _utils).formatWithValidation(parsed);\n        } else if (effect.type === 'redirect' && effect.newAs) {\n            return this.change(method, effect.newUrl, effect.newAs, options2);\n        } else if (effect.type === 'redirect' && effect.destination) {\n            window.location.href = effect.destination;\n            return new Promise(()=>{\n            });\n        } else if (effect.type === 'refresh') {\n            window.location.href = as3;\n            return new Promise(()=>{\n            });\n        }\n        const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n        if ((0, _isDynamic).isDynamicRoute(route)) {\n            const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n            const asPathname = parsedAs.pathname;\n            const routeRegex = (0, _routeRegex).getRouteRegex(route);\n            const routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n            const shouldInterpolate = route === asPathname;\n            const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {\n            };\n            if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n                const missingParams = Object.keys(routeRegex.groups).filter((param)=>!query[param]\n                );\n                if (missingParams.length > 0) {\n                    if (true) {\n                        console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n                    }\n                    throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url2}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n                }\n            } else if (shouldInterpolate) {\n                as3 = (0, _utils).formatWithValidation(Object.assign({\n                }, parsedAs, {\n                    pathname: interpolatedAs.result,\n                    query: omitParmsFromQuery(query, interpolatedAs.params)\n                }));\n            } else {\n                // Merge params into `query`, overwriting any specified in search\n                Object.assign(query, routeMatch);\n            }\n        }\n        Router.events.emit('routeChangeStart', as3, routeProps);\n        try {\n            var ref, ref1;\n            let routeInfo = await this.getRouteInfo(route, pathname, query, as3, resolvedAs, routeProps);\n            let { error , props , __N_SSG , __N_SSP  } = routeInfo;\n            // handle redirect on client-transition\n            if ((__N_SSG || __N_SSP) && props) {\n                if (props.pageProps && props.pageProps.__N_REDIRECT) {\n                    const destination = props.pageProps.__N_REDIRECT;\n                    // check if destination is internal (resolves to a page) and attempt\n                    // client-navigation if it is falling back to hard navigation if\n                    // it's not\n                    if (destination.startsWith('/') && props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n                        const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n                        parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n                        const { url: newUrl , as: newAs  } = prepareUrlAs(this, destination, destination);\n                        return this.change(method, newUrl, newAs, options2);\n                    }\n                    window.location.href = destination;\n                    return new Promise(()=>{\n                    });\n                }\n                this.isPreview = !!props.__N_PREVIEW;\n                // handle SSG data 404\n                if (props.notFound === SSG_DATA_NOT_FOUND) {\n                    let notFoundRoute;\n                    try {\n                        await this.fetchComponent('/404');\n                        notFoundRoute = '/404';\n                    } catch (_) {\n                        notFoundRoute = '/_error';\n                    }\n                    routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query, as3, resolvedAs, {\n                        shallow: false\n                    });\n                }\n            }\n            Router.events.emit('beforeHistoryChange', as3, routeProps);\n            this.changeState(method, url2, as3, options2);\n            if (options2._h && pathname === '/_error' && ((ref = self.__NEXT_DATA__.props) === null || ref === void 0 ? void 0 : (ref1 = ref.pageProps) === null || ref1 === void 0 ? void 0 : ref1.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {\n                // ensure statusCode is still correct for static 500 page\n                // when updating query information\n                props.pageProps.statusCode = 500;\n            }\n            // shallow routing is only allowed for same page URL changes.\n            const isValidShallowRoute = options2.shallow && this.route === route;\n            var _scroll;\n            const shouldScroll = (_scroll = options2.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;\n            const resetScroll = shouldScroll ? {\n                x: 0,\n                y: 0\n            } : null;\n            await this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll).catch((e)=>{\n                if (e.cancelled) error = error || e;\n                else throw e;\n            });\n            if (error) {\n                Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n                throw error;\n            }\n            if (false) {}\n            Router.events.emit('routeChangeComplete', as3, routeProps);\n            return true;\n        } catch (err1) {\n            if ((0, _isError).default(err1) && err1.cancelled) {\n                return false;\n            }\n            throw err1;\n        }\n    }\n    changeState(method1, url3, as4, options3 = {\n    }) {\n        if (true) {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            if (typeof window.history[method1] === 'undefined') {\n                console.error(`Warning: window.history.${method1} is not available`);\n                return;\n            }\n        }\n        if (method1 !== 'pushState' || (0, _utils).getURL() !== as4) {\n            this._shallow = options3.shallow;\n            window.history[method1]({\n                url: url3,\n                as: as4,\n                options: options3,\n                __N: true,\n                idx: this._idx = method1 !== 'pushState' ? this._idx : this._idx + 1\n            }, // Passing the empty string here should be safe against future changes to the method.\n            // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n            '', as4);\n        }\n    }\n    async handleRouteInfoError(err1, pathname, query, as5, routeProps, loadErrorFail) {\n        if (err1.cancelled) {\n            // bubble up cancellation errors\n            throw err1;\n        }\n        if ((0, _routeLoader).isAssetError(err1) || loadErrorFail) {\n            Router.events.emit('routeChangeError', err1, as5, routeProps);\n            // If we can't load the page it could be one of following reasons\n            //  1. Page doesn't exists\n            //  2. Page does exist in a different zone\n            //  3. Internal error while loading the page\n            // So, doing a hard reload is the proper way to deal with this.\n            window.location.href = as5;\n            // Changing the URL doesn't block executing the current code path.\n            // So let's throw a cancellation error stop the routing logic.\n            throw buildCancellationError();\n        }\n        try {\n            let Component;\n            let styleSheets;\n            let props;\n            if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {\n                ({ page: Component , styleSheets  } = await this.fetchComponent('/_error'));\n            }\n            const routeInfo = {\n                props,\n                Component,\n                styleSheets,\n                err: err1,\n                error: err1\n            };\n            if (!routeInfo.props) {\n                try {\n                    routeInfo.props = await this.getInitialProps(Component, {\n                        err: err1,\n                        pathname,\n                        query\n                    });\n                } catch (gipErr) {\n                    console.error('Error in error page `getInitialProps`: ', gipErr);\n                    routeInfo.props = {\n                    };\n                }\n            }\n            return routeInfo;\n        } catch (routeInfoErr) {\n            return this.handleRouteInfoError((0, _isError).default(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + ''), pathname, query, as5, routeProps, true);\n        }\n    }\n    async getRouteInfo(route, pathname2, query2, as6, resolvedAs, routeProps1) {\n        try {\n            const existingRouteInfo = this.components[route];\n            if (routeProps1.shallow && existingRouteInfo && this.route === route) {\n                return existingRouteInfo;\n            }\n            let cachedRouteInfo = undefined;\n            // can only use non-initial route info\n            // cannot reuse route info in development since it can change after HMR\n            if (false) {}\n            const routeInfo = cachedRouteInfo || await this.fetchComponent(route).then((res)=>({\n                    Component: res.page,\n                    styleSheets: res.styleSheets,\n                    __N_SSG: res.mod.__N_SSG,\n                    __N_SSP: res.mod.__N_SSP,\n                    __N_RSC: !!res.page.__next_rsc__\n                })\n            );\n            const { Component , __N_SSG , __N_SSP , __N_RSC  } = routeInfo;\n            if (true) {\n                const { isValidElementType  } = __webpack_require__(/*! react-is */ \"../../node_modules/next/node_modules/react-is/index.js\");\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname2}\"`);\n                }\n            }\n            let dataHref;\n            if (__N_SSG || __N_SSP || __N_RSC) {\n                dataHref = this.pageLoader.getDataHref({\n                    href: (0, _utils).formatWithValidation({\n                        pathname: pathname2,\n                        query: query2\n                    }),\n                    asPath: resolvedAs,\n                    ssg: __N_SSG,\n                    rsc: __N_RSC,\n                    locale: this.locale\n                });\n            }\n            const props = await this._getData(()=>__N_SSG || __N_SSP ? fetchNextData(dataHref, this.isSsr, false, __N_SSG ? this.sdc : this.sdr, !!__N_SSG && !this.isPreview) : this.getInitialProps(Component, {\n                    pathname: pathname2,\n                    query: query2,\n                    asPath: as6,\n                    locale: this.locale,\n                    locales: this.locales,\n                    defaultLocale: this.defaultLocale\n                })\n            );\n            if (__N_RSC) {\n                const { fresh , data  } = await this._getData(()=>this._getFlightData(dataHref)\n                );\n                props.pageProps = Object.assign(props.pageProps, {\n                    __flight_serialized__: data,\n                    __flight_fresh__: fresh\n                });\n            }\n            routeInfo.props = props;\n            this.components[route] = routeInfo;\n            return routeInfo;\n        } catch (err) {\n            return this.handleRouteInfoError((0, _isError).default(err) ? err : new Error(err + ''), pathname2, query2, as6, routeProps1);\n        }\n    }\n    set(route1, pathname3, query3, as7, data1, resetScroll) {\n        this.isFallback = false;\n        this.route = route1;\n        this.pathname = pathname3;\n        this.query = query3;\n        this.asPath = as7;\n        return this.notify(data1, resetScroll);\n    }\n    /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */ beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as8) {\n        if (!this.asPath) return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as8.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as9) {\n        const [, hash] = as9.split('#');\n        // Scroll to top if the hash is just `#` with no value or `#top`\n        // To mirror browsers\n        if (hash === '' || hash === 'top') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */ async prefetch(url4, asPath1 = url4, options4 = {\n    }) {\n        let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url4);\n        let { pathname , query  } = parsed;\n        if (false) {}\n        const pages = await this.pageLoader.getPageList();\n        let resolvedAs = asPath1;\n        if (false) {} else {\n            parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n            if (parsed.pathname !== pathname) {\n                pathname = parsed.pathname;\n                parsed.pathname = pathname;\n                url4 = (0, _utils).formatWithValidation(parsed);\n            }\n        }\n        // Prefetch is not supported in development mode because it would trigger on-demand-entries\n        if (true) {\n            return;\n        }\n        const effects = await this._preflightRequest({\n            as: addBasePath(asPath1),\n            cache: true,\n            pages,\n            pathname,\n            query\n        });\n        if (effects.type === 'rewrite') {\n            parsed.pathname = effects.resolvedHref;\n            pathname = effects.resolvedHref;\n            query = {\n                ...query,\n                ...effects.parsedAs.query\n            };\n            resolvedAs = effects.asPath;\n            url4 = (0, _utils).formatWithValidation(parsed);\n        }\n        const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n        await Promise.all([\n            this.pageLoader._isSsg(route).then((isSsg)=>{\n                return isSsg ? fetchNextData(this.pageLoader.getDataHref({\n                    href: url4,\n                    asPath: resolvedAs,\n                    ssg: true,\n                    locale: typeof options4.locale !== 'undefined' ? options4.locale : this.locale\n                }), false, false, this.sdc, true) : false;\n            }),\n            this.pageLoader[options4.priority ? 'loadPage' : 'prefetch'](route), \n        ]);\n    }\n    async fetchComponent(route2) {\n        let cancelled = false;\n        const cancel = this.clc = ()=>{\n            cancelled = true;\n        };\n        const handleCancelled = ()=>{\n            if (cancelled) {\n                const error = new Error(`Abort fetching component for route: \"${route2}\"`);\n                error.cancelled = true;\n                throw error;\n            }\n            if (cancel === this.clc) {\n                this.clc = null;\n            }\n        };\n        try {\n            const componentResult = await this.pageLoader.loadPage(route2);\n            handleCancelled();\n            return componentResult;\n        } catch (err) {\n            handleCancelled();\n            throw err;\n        }\n    }\n    _getData(fn) {\n        let cancelled = false;\n        const cancel = ()=>{\n            cancelled = true;\n        };\n        this.clc = cancel;\n        return fn().then((data)=>{\n            if (cancel === this.clc) {\n                this.clc = null;\n            }\n            if (cancelled) {\n                const err = new Error('Loading initial props cancelled');\n                err.cancelled = true;\n                throw err;\n            }\n            return data;\n        });\n    }\n    _getFlightData(dataHref) {\n        const { href: cacheKey  } = new URL(dataHref, window.location.href);\n        if (!this.isPreview && this.sdc[cacheKey]) {\n            return Promise.resolve({\n                fresh: false,\n                data: this.sdc[cacheKey]\n            });\n        }\n        return fetchNextData(dataHref, true, true, this.sdc, false).then((serialized)=>{\n            this.sdc[cacheKey] = serialized;\n            return {\n                fresh: true,\n                data: serialized\n            };\n        });\n    }\n    async _preflightRequest(options5) {\n        var ref;\n        const cleanedAs = delLocale(hasBasePath(options5.as) ? delBasePath(options5.as) : options5.as, this.locale);\n        const fns = await this.pageLoader.getMiddlewareList();\n        const requiresPreflight = fns.some(([middleware, isSSR])=>{\n            return (0, _routeMatcher).getRouteMatcher((0, _getMiddlewareRegex).getMiddlewareRegex(middleware, !isSSR))(cleanedAs);\n        });\n        if (!requiresPreflight) {\n            return {\n                type: 'next'\n            };\n        }\n        const preflight = await this._getPreflightData({\n            preflightHref: options5.as,\n            shouldCache: options5.cache\n        });\n        if ((ref = preflight.rewrite) === null || ref === void 0 ? void 0 : ref.startsWith('/')) {\n            const parsed = (0, _parseRelativeUrl).parseRelativeUrl((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.rewrite) ? delBasePath(preflight.rewrite) : preflight.rewrite, this.locales).pathname);\n            const fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash(parsed.pathname);\n            let matchedPage;\n            let resolvedHref;\n            if (options5.pages.includes(fsPathname)) {\n                matchedPage = true;\n                resolvedHref = fsPathname;\n            } else {\n                resolvedHref = resolveDynamicRoute(fsPathname, options5.pages);\n                if (resolvedHref !== parsed.pathname && options5.pages.includes(resolvedHref)) {\n                    matchedPage = true;\n                }\n            }\n            return {\n                type: 'rewrite',\n                asPath: parsed.pathname,\n                parsedAs: parsed,\n                matchedPage,\n                resolvedHref\n            };\n        }\n        if (preflight.redirect) {\n            if (preflight.redirect.startsWith('/')) {\n                const cleanRedirect = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(preflight.redirect) ? delBasePath(preflight.redirect) : preflight.redirect, this.locales).pathname);\n                const { url: newUrl , as: newAs  } = prepareUrlAs(this, cleanRedirect, cleanRedirect);\n                return {\n                    type: 'redirect',\n                    newUrl,\n                    newAs\n                };\n            }\n            return {\n                type: 'redirect',\n                destination: preflight.redirect\n            };\n        }\n        // For SSR requests, they will be handled like normal pages.\n        if (preflight.refresh && !preflight.ssr) {\n            return {\n                type: 'refresh'\n            };\n        }\n        return {\n            type: 'next'\n        };\n    }\n    _getPreflightData(params) {\n        const { preflightHref , shouldCache =false  } = params;\n        const { href: cacheKey  } = new URL(preflightHref, window.location.href);\n        if (false) {}\n        return fetch(preflightHref, {\n            method: 'HEAD',\n            credentials: 'same-origin',\n            headers: {\n                'x-middleware-preflight': '1'\n            }\n        }).then((res)=>{\n            if (!res.ok) {\n                throw new Error(`Failed to preflight request`);\n            }\n            return {\n                redirect: res.headers.get('Location'),\n                refresh: res.headers.has('x-middleware-refresh'),\n                rewrite: res.headers.get('x-middleware-rewrite'),\n                ssr: !!res.headers.get('x-middleware-ssr')\n            };\n        }).then((data)=>{\n            if (shouldCache) {\n                this.sde[cacheKey] = data;\n            }\n            return data;\n        }).catch((err)=>{\n            delete this.sde[cacheKey];\n            throw err;\n        });\n    }\n    getInitialProps(Component1, ctx) {\n        const { Component: App  } = this.components['/_app'];\n        const AppTree = this._wrapApp(App);\n        ctx.AppTree = AppTree;\n        return (0, _utils).loadGetInitialProps(App, {\n            AppTree,\n            Component: Component1,\n            router: this,\n            ctx\n        });\n    }\n    abortComponentLoad(as10, routeProps2) {\n        if (this.clc) {\n            Router.events.emit('routeChangeError', buildCancellationError(), as10, routeProps2);\n            this.clc();\n            this.clc = null;\n        }\n    }\n    notify(data, resetScroll1) {\n        return this.sub(data, this.components['/_app'].Component, resetScroll1);\n    }\n}\nRouter.events = (0, _mitt).default();\nexports[\"default\"] = Router; //# sourceMappingURL=router.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/shared/lib/router/router.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/lib/is-error.js":
/*!****************************************************!*\
  !*** ../../node_modules/next/dist/lib/is-error.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = isError;\nfunction isError(err) {\n    return typeof err === 'object' && err !== null && 'name' in err && 'message' in err;\n}\n\n//# sourceMappingURL=is-error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvaXMtZXJyb3IuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9pcy1lcnJvci5qcz9jNTViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNFcnJvcjtcbmZ1bmN0aW9uIGlzRXJyb3IoZXJyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlcnIgPT09ICdvYmplY3QnICYmIGVyciAhPT0gbnVsbCAmJiAnbmFtZScgaW4gZXJyICYmICdtZXNzYWdlJyBpbiBlcnI7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/lib/is-error.js\n");

/***/ }),

/***/ "../../node_modules/next/link.js":
/*!***************************************!*\
  !*** ../../node_modules/next/link.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/client/link */ \"../../node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvbGluay5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw2R0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvbGluay5qcz9iYTZmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9saW5rJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/next/link.js\n");

/***/ }),

/***/ "../../node_modules/next/node_modules/react-is/cjs/react-is.development.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/next/node_modules/react-is/cjs/react-is.development.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/** @license React v17.0.2\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nvar REACT_FRAGMENT_TYPE = 0xeacb;\nvar REACT_STRICT_MODE_TYPE = 0xeacc;\nvar REACT_PROFILER_TYPE = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nvar REACT_SUSPENSE_TYPE = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n          case REACT_SUSPENSE_LIST_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n}\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false;\nvar hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');\n    }\n  }\n\n  return false;\n}\nfunction isConcurrentMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {\n      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');\n    }\n  }\n\n  return false;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViLElBQUksSUFBcUM7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDRCQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7O0FBRXREO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDs7QUFFbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7O0FBRXZEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsZUFBZTtBQUNmLGtCQUFrQjtBQUNsQixnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLFlBQVk7QUFDWixjQUFjO0FBQ2QsZ0JBQWdCO0FBQ2hCLGtCQUFrQjtBQUNsQixnQkFBZ0I7QUFDaEIsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQixvQkFBb0I7QUFDcEIsa0JBQWtCO0FBQ2xCLGNBQWM7QUFDZCxjQUFjO0FBQ2QsZ0JBQWdCO0FBQ2hCLGtCQUFrQjtBQUNsQixvQkFBb0I7QUFDcEIsa0JBQWtCO0FBQ2xCLDBCQUEwQjtBQUMxQixjQUFjO0FBQ2QsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanM/NDczMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBBVFRFTlRJT05cbi8vIFdoZW4gYWRkaW5nIG5ldyBzeW1ib2xzIHRvIHRoaXMgZmlsZSxcbi8vIFBsZWFzZSBjb25zaWRlciBhbHNvIGFkZGluZyB0byAncmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1JlYWN0U3ltYm9scydcbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gMHhlYWM3O1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gMHhlYWNhO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSAweGVhY2I7XG52YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IDB4ZWFjYztcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gMHhlYWQyO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSAweGVhY2Q7XG52YXIgUkVBQ1RfQ09OVEVYVF9UWVBFID0gMHhlYWNlO1xudmFyIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSAweGVhZDA7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IDB4ZWFkMTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSAweGVhZDg7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gMHhlYWQzO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IDB4ZWFkNDtcbnZhciBSRUFDVF9CTE9DS19UWVBFID0gMHhlYWQ5O1xudmFyIFJFQUNUX1NFUlZFUl9CTE9DS19UWVBFID0gMHhlYWRhO1xudmFyIFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgPSAweGVhZDU7XG52YXIgUkVBQ1RfU0NPUEVfVFlQRSA9IDB4ZWFkNztcbnZhciBSRUFDVF9PUEFRVUVfSURfVFlQRSA9IDB4ZWFlMDtcbnZhciBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRSA9IDB4ZWFlMTtcbnZhciBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IDB4ZWFlMjtcbnZhciBSRUFDVF9MRUdBQ1lfSElEREVOX1RZUEUgPSAweGVhZTM7XG5cbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3IpIHtcbiAgdmFyIHN5bWJvbEZvciA9IFN5bWJvbC5mb3I7XG4gIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuZWxlbWVudCcpO1xuICBSRUFDVF9QT1JUQUxfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QucG9ydGFsJyk7XG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmZyYWdtZW50Jyk7XG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnN0cmljdF9tb2RlJyk7XG4gIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnByb2ZpbGVyJyk7XG4gIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnByb3ZpZGVyJyk7XG4gIFJFQUNUX0NPTlRFWFRfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuY29udGV4dCcpO1xuICBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpO1xuICBSRUFDVF9TVVNQRU5TRV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zdXNwZW5zZScpO1xuICBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnN1c3BlbnNlX2xpc3QnKTtcbiAgUkVBQ1RfTUVNT19UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5tZW1vJyk7XG4gIFJFQUNUX0xBWllfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QubGF6eScpO1xuICBSRUFDVF9CTE9DS19UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5ibG9jaycpO1xuICBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Quc2VydmVyLmJsb2NrJyk7XG4gIFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmZ1bmRhbWVudGFsJyk7XG4gIFJFQUNUX1NDT1BFX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnNjb3BlJyk7XG4gIFJFQUNUX09QQVFVRV9JRF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5vcGFxdWUuaWQnKTtcbiAgUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmRlYnVnX3RyYWNlX21vZGUnKTtcbiAgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0Lm9mZnNjcmVlbicpO1xuICBSRUFDVF9MRUdBQ1lfSElEREVOX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmxlZ2FjeV9oaWRkZW4nKTtcbn1cblxuLy8gRmlsdGVyIGNlcnRhaW4gRE9NIGF0dHJpYnV0ZXMgKGUuZy4gc3JjLCBocmVmKSBpZiB0aGVpciB2YWx1ZXMgYXJlIGVtcHR5IHN0cmluZ3MuXG5cbnZhciBlbmFibGVTY29wZUFQSSA9IGZhbHNlOyAvLyBFeHBlcmltZW50YWwgQ3JlYXRlIEV2ZW50IEhhbmRsZSBBUEkuXG5cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBOb3RlOiB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyAoZS5nLiBpZiBpdCdzIGEgcG9seWZpbGwpLlxuXG5cbiAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0xFR0FDWV9ISURERU5fVFlQRSB8fCBlbmFibGVTY29wZUFQSSApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCkge1xuICAgIGlmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9CTE9DS19UWVBFIHx8IHR5cGVbMF0gPT09IFJFQUNUX1NFUlZFUl9CTE9DS19UWVBFKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHR5cGVPZihvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCkge1xuICAgIHZhciAkJHR5cGVvZiA9IG9iamVjdC4kJHR5cGVvZjtcblxuICAgIHN3aXRjaCAoJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICB2YXIgdHlwZSA9IG9iamVjdC50eXBlO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhciAkJHR5cGVvZlR5cGUgPSB0eXBlICYmIHR5cGUuJCR0eXBlb2Y7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoJCR0eXBlb2ZUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZlR5cGU7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbnZhciBDb250ZXh0Q29uc3VtZXIgPSBSRUFDVF9DT05URVhUX1RZUEU7XG52YXIgQ29udGV4dFByb3ZpZGVyID0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbnZhciBFbGVtZW50ID0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xudmFyIEZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xudmFyIEZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbnZhciBMYXp5ID0gUkVBQ1RfTEFaWV9UWVBFO1xudmFyIE1lbW8gPSBSRUFDVF9NRU1PX1RZUEU7XG52YXIgUG9ydGFsID0gUkVBQ1RfUE9SVEFMX1RZUEU7XG52YXIgUHJvZmlsZXIgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xudmFyIFN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xudmFyIFN1c3BlbnNlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbnZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSA9IGZhbHNlO1xudmFyIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQ29uY3VycmVudE1vZGUgPSBmYWxzZTsgLy8gQXN5bmNNb2RlIHNob3VsZCBiZSBkZXByZWNhdGVkXG5cbmZ1bmN0aW9uIGlzQXN5bmNNb2RlKG9iamVjdCkge1xuICB7XG4gICAgaWYgKCFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSkge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSB0cnVlOyAvLyBVc2luZyBjb25zb2xlWyd3YXJuJ10gdG8gZXZhZGUgQmFiZWwgYW5kIEVTTGludFxuXG4gICAgICBjb25zb2xlWyd3YXJuJ10oJ1RoZSBSZWFjdElzLmlzQXN5bmNNb2RlKCkgYWxpYXMgaGFzIGJlZW4gZGVwcmVjYXRlZCwgJyArICdhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IDE4Ky4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkge1xuICB7XG4gICAgaWYgKCFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0NvbmN1cnJlbnRNb2RlKSB7XG4gICAgICBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0NvbmN1cnJlbnRNb2RlID0gdHJ1ZTsgLy8gVXNpbmcgY29uc29sZVsnd2FybiddIHRvIGV2YWRlIEJhYmVsIGFuZCBFU0xpbnRcblxuICAgICAgY29uc29sZVsnd2FybiddKCdUaGUgUmVhY3RJcy5pc0NvbmN1cnJlbnRNb2RlKCkgYWxpYXMgaGFzIGJlZW4gZGVwcmVjYXRlZCwgJyArICdhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IDE4Ky4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRDb25zdW1lcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05URVhUX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRQcm92aWRlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9WSURFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNGb3J3YXJkUmVmKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG59XG5mdW5jdGlvbiBpc0ZyYWdtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG59XG5mdW5jdGlvbiBpc0xhenkob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTEFaWV9UWVBFO1xufVxuZnVuY3Rpb24gaXNNZW1vKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX01FTU9fVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFsKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BPUlRBTF9UWVBFO1xufVxuZnVuY3Rpb24gaXNQcm9maWxlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdHJpY3RNb2RlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc1N1c3BlbnNlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG59XG5cbmV4cG9ydHMuQ29udGV4dENvbnN1bWVyID0gQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuZXhwb3J0cy5Gb3J3YXJkUmVmID0gRm9yd2FyZFJlZjtcbmV4cG9ydHMuRnJhZ21lbnQgPSBGcmFnbWVudDtcbmV4cG9ydHMuTGF6eSA9IExhenk7XG5leHBvcnRzLk1lbW8gPSBNZW1vO1xuZXhwb3J0cy5Qb3J0YWwgPSBQb3J0YWw7XG5leHBvcnRzLlByb2ZpbGVyID0gUHJvZmlsZXI7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBTdHJpY3RNb2RlO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFN1c3BlbnNlO1xuZXhwb3J0cy5pc0FzeW5jTW9kZSA9IGlzQXN5bmNNb2RlO1xuZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlID0gaXNDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXIgPSBpc0NvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXIgPSBpc0NvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuZXhwb3J0cy5pc0ZvcndhcmRSZWYgPSBpc0ZvcndhcmRSZWY7XG5leHBvcnRzLmlzRnJhZ21lbnQgPSBpc0ZyYWdtZW50O1xuZXhwb3J0cy5pc0xhenkgPSBpc0xhenk7XG5leHBvcnRzLmlzTWVtbyA9IGlzTWVtbztcbmV4cG9ydHMuaXNQb3J0YWwgPSBpc1BvcnRhbDtcbmV4cG9ydHMuaXNQcm9maWxlciA9IGlzUHJvZmlsZXI7XG5leHBvcnRzLmlzU3RyaWN0TW9kZSA9IGlzU3RyaWN0TW9kZTtcbmV4cG9ydHMuaXNTdXNwZW5zZSA9IGlzU3VzcGVuc2U7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZTtcbmV4cG9ydHMudHlwZU9mID0gdHlwZU9mO1xuICB9KSgpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/next/node_modules/react-is/cjs/react-is.development.js\n");

/***/ }),

/***/ "../../node_modules/next/node_modules/react-is/index.js":
/*!**************************************************************!*\
  !*** ../../node_modules/next/node_modules/react-is/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"../../node_modules/next/node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSxzSkFBeUQ7QUFDM0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzP2EwNDgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/next/node_modules/react-is/index.js\n");

/***/ }),

/***/ "@apollo/client":
/*!*********************************!*\
  !*** external "@apollo/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@apollo/client");

/***/ }),

/***/ "@braintree/sanitize-url":
/*!******************************************!*\
  !*** external "@braintree/sanitize-url" ***!
  \******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@braintree/sanitize-url");

/***/ }),

/***/ "@emotion/hash":
/*!********************************!*\
  !*** external "@emotion/hash" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@emotion/hash");

/***/ }),

/***/ "@emotion/weak-memoize":
/*!****************************************!*\
  !*** external "@emotion/weak-memoize" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@emotion/weak-memoize");

/***/ }),

/***/ "@graphql-tools/schema":
/*!****************************************!*\
  !*** external "@graphql-tools/schema" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@graphql-tools/schema");

/***/ }),

/***/ "@graphql-ts/extend":
/*!*************************************!*\
  !*** external "@graphql-ts/extend" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@graphql-ts/extend");

/***/ }),

/***/ "@graphql-ts/schema":
/*!*************************************!*\
  !*** external "@graphql-ts/schema" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@graphql-ts/schema");

/***/ }),

/***/ "@graphql-ts/schema/api-with-context":
/*!******************************************************!*\
  !*** external "@graphql-ts/schema/api-with-context" ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@graphql-ts/schema/api-with-context");

/***/ }),

/***/ "@graphql-ts/schema/api-without-context":
/*!*********************************************************!*\
  !*** external "@graphql-ts/schema/api-without-context" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@graphql-ts/schema/api-without-context");

/***/ }),

/***/ "@keystone-next/document-renderer":
/*!***************************************************!*\
  !*** external "@keystone-next/document-renderer" ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-next/document-renderer");

/***/ }),

/***/ "@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/pages/App":
/*!********************************************************************************************************!*\
  !*** external "@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/pages/App" ***!
  \********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-next/keystone/___internal-do-not-use-will-break-in-patch/admin-ui/pages/App");

/***/ }),

/***/ "@keystone-next/keystone/admin-ui/components":
/*!**************************************************************!*\
  !*** external "@keystone-next/keystone/admin-ui/components" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-next/keystone/admin-ui/components");

/***/ }),

/***/ "@keystone-next/keystone/admin-ui/context":
/*!***********************************************************!*\
  !*** external "@keystone-next/keystone/admin-ui/context" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-next/keystone/admin-ui/context");

/***/ }),

/***/ "@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect":
/*!*********************************************************************************************!*\
  !*** external "@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect" ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-next/keystone/fields/types/relationship/views/RelationshipSelect");

/***/ }),

/***/ "@keystone-ui/button":
/*!**************************************!*\
  !*** external "@keystone-ui/button" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/button");

/***/ }),

/***/ "@keystone-ui/core":
/*!************************************!*\
  !*** external "@keystone-ui/core" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/core");

/***/ }),

/***/ "@keystone-ui/fields":
/*!**************************************!*\
  !*** external "@keystone-ui/fields" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/fields");

/***/ }),

/***/ "@keystone-ui/icons/icons/AlertTriangleIcon":
/*!*************************************************************!*\
  !*** external "@keystone-ui/icons/icons/AlertTriangleIcon" ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/AlertTriangleIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/AlignCenterIcon":
/*!***********************************************************!*\
  !*** external "@keystone-ui/icons/icons/AlignCenterIcon" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/AlignCenterIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/AlignLeftIcon":
/*!*********************************************************!*\
  !*** external "@keystone-ui/icons/icons/AlignLeftIcon" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/AlignLeftIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/AlignRightIcon":
/*!**********************************************************!*\
  !*** external "@keystone-ui/icons/icons/AlignRightIcon" ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/AlignRightIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/BoldIcon":
/*!****************************************************!*\
  !*** external "@keystone-ui/icons/icons/BoldIcon" ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/BoldIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/ChevronDownIcon":
/*!***********************************************************!*\
  !*** external "@keystone-ui/icons/icons/ChevronDownIcon" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/ChevronDownIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/ChevronRightIcon":
/*!************************************************************!*\
  !*** external "@keystone-ui/icons/icons/ChevronRightIcon" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/ChevronRightIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/CodeIcon":
/*!****************************************************!*\
  !*** external "@keystone-ui/icons/icons/CodeIcon" ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/CodeIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/ColumnsIcon":
/*!*******************************************************!*\
  !*** external "@keystone-ui/icons/icons/ColumnsIcon" ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/ColumnsIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/ExternalLinkIcon":
/*!************************************************************!*\
  !*** external "@keystone-ui/icons/icons/ExternalLinkIcon" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/ExternalLinkIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/EyeIcon":
/*!***************************************************!*\
  !*** external "@keystone-ui/icons/icons/EyeIcon" ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/EyeIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/EyeOffIcon":
/*!******************************************************!*\
  !*** external "@keystone-ui/icons/icons/EyeOffIcon" ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/EyeOffIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/ItalicIcon":
/*!******************************************************!*\
  !*** external "@keystone-ui/icons/icons/ItalicIcon" ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/ItalicIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/LinkIcon":
/*!****************************************************!*\
  !*** external "@keystone-ui/icons/icons/LinkIcon" ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/LinkIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/Maximize2Icon":
/*!*********************************************************!*\
  !*** external "@keystone-ui/icons/icons/Maximize2Icon" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/Maximize2Icon");

/***/ }),

/***/ "@keystone-ui/icons/icons/Minimize2Icon":
/*!*********************************************************!*\
  !*** external "@keystone-ui/icons/icons/Minimize2Icon" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/Minimize2Icon");

/***/ }),

/***/ "@keystone-ui/icons/icons/MinusIcon":
/*!*****************************************************!*\
  !*** external "@keystone-ui/icons/icons/MinusIcon" ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/MinusIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/MoreHorizontalIcon":
/*!**************************************************************!*\
  !*** external "@keystone-ui/icons/icons/MoreHorizontalIcon" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/MoreHorizontalIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/PlusIcon":
/*!****************************************************!*\
  !*** external "@keystone-ui/icons/icons/PlusIcon" ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/PlusIcon");

/***/ }),

/***/ "@keystone-ui/icons/icons/Trash2Icon":
/*!******************************************************!*\
  !*** external "@keystone-ui/icons/icons/Trash2Icon" ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/Trash2Icon");

/***/ }),

/***/ "@keystone-ui/icons/icons/XIcon":
/*!*************************************************!*\
  !*** external "@keystone-ui/icons/icons/XIcon" ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/icons/icons/XIcon");

/***/ }),

/***/ "@keystone-ui/loading":
/*!***************************************!*\
  !*** external "@keystone-ui/loading" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/loading");

/***/ }),

/***/ "@keystone-ui/modals":
/*!**************************************!*\
  !*** external "@keystone-ui/modals" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/modals");

/***/ }),

/***/ "@keystone-ui/notice":
/*!**************************************!*\
  !*** external "@keystone-ui/notice" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/notice");

/***/ }),

/***/ "@keystone-ui/popover":
/*!***************************************!*\
  !*** external "@keystone-ui/popover" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/popover");

/***/ }),

/***/ "@keystone-ui/segmented-control":
/*!*************************************************!*\
  !*** external "@keystone-ui/segmented-control" ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/segmented-control");

/***/ }),

/***/ "@keystone-ui/toast":
/*!*************************************!*\
  !*** external "@keystone-ui/toast" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/toast");

/***/ }),

/***/ "@keystone-ui/tooltip":
/*!***************************************!*\
  !*** external "@keystone-ui/tooltip" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@keystone-ui/tooltip");

/***/ }),

/***/ "apollo-upload-client":
/*!***************************************!*\
  !*** external "apollo-upload-client" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = require("apollo-upload-client");

/***/ }),

/***/ "apply-ref":
/*!****************************!*\
  !*** external "apply-ref" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("apply-ref");

/***/ }),

/***/ "date-fns":
/*!***************************!*\
  !*** external "date-fns" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("date-fns");

/***/ }),

/***/ "decimal.js":
/*!*****************************!*\
  !*** external "decimal.js" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("decimal.js");

/***/ }),

/***/ "dumb-passwords":
/*!*********************************!*\
  !*** external "dumb-passwords" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("dumb-passwords");

/***/ }),

/***/ "fast-deep-equal":
/*!**********************************!*\
  !*** external "fast-deep-equal" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("fast-deep-equal");

/***/ }),

/***/ "graphql":
/*!**************************!*\
  !*** external "graphql" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("graphql");

/***/ }),

/***/ "graphql-type-json":
/*!************************************!*\
  !*** external "graphql-type-json" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("graphql-type-json");

/***/ }),

/***/ "graphql-upload/public/GraphQLUpload.js":
/*!*********************************************************!*\
  !*** external "graphql-upload/public/GraphQLUpload.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("graphql-upload/public/GraphQLUpload.js");

/***/ }),

/***/ "intersection-observer":
/*!****************************************!*\
  !*** external "intersection-observer" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("intersection-observer");

/***/ }),

/***/ "is-hotkey":
/*!****************************!*\
  !*** external "is-hotkey" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("is-hotkey");

/***/ }),

/***/ "match-sorter":
/*!*******************************!*\
  !*** external "match-sorter" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("match-sorter");

/***/ }),

/***/ "mdast-util-definitions":
/*!*****************************************!*\
  !*** external "mdast-util-definitions" ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("mdast-util-definitions");

/***/ }),

/***/ "mdast-util-from-markdown":
/*!*******************************************!*\
  !*** external "mdast-util-from-markdown" ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("mdast-util-from-markdown");

/***/ }),

/***/ "mdast-util-gfm-autolink-literal/from-markdown":
/*!****************************************************************!*\
  !*** external "mdast-util-gfm-autolink-literal/from-markdown" ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("mdast-util-gfm-autolink-literal/from-markdown");

/***/ }),

/***/ "mdast-util-gfm-strikethrough/from-markdown":
/*!*************************************************************!*\
  !*** external "mdast-util-gfm-strikethrough/from-markdown" ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("mdast-util-gfm-strikethrough/from-markdown");

/***/ }),

/***/ "micromark-extension-gfm-autolink-literal":
/*!***********************************************************!*\
  !*** external "micromark-extension-gfm-autolink-literal" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("micromark-extension-gfm-autolink-literal");

/***/ }),

/***/ "micromark-extension-gfm-strikethrough":
/*!********************************************************!*\
  !*** external "micromark-extension-gfm-strikethrough" ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("micromark-extension-gfm-strikethrough");

/***/ }),

/***/ "../../../server/denormalize-page-path":
/*!************************************************************!*\
  !*** external "next/dist/server/denormalize-page-path.js" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/denormalize-page-path.js");

/***/ }),

/***/ "../i18n/normalize-locale-path":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/i18n/normalize-locale-path.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/i18n/normalize-locale-path.js");

/***/ }),

/***/ "../mitt":
/*!***********************************************!*\
  !*** external "next/dist/shared/lib/mitt.js" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/mitt.js");

/***/ }),

/***/ "../shared/lib/router-context":
/*!*********************************************************!*\
  !*** external "next/dist/shared/lib/router-context.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router-context.js");

/***/ }),

/***/ "../shared/lib/router/utils/get-asset-path-from-route":
/*!*********************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-asset-path-from-route.js" ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "./utils/get-middleware-regex":
/*!****************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-middleware-regex.js" ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-middleware-regex.js");

/***/ }),

/***/ "./utils/is-dynamic":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-dynamic.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-dynamic.js");

/***/ }),

/***/ "./utils/parse-relative-url":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-relative-url.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-relative-url.js");

/***/ }),

/***/ "./utils/querystring":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/querystring.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/querystring.js");

/***/ }),

/***/ "./utils/resolve-rewrites":
/*!************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/resolve-rewrites.js" ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/resolve-rewrites.js");

/***/ }),

/***/ "./utils/route-matcher":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-matcher.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-matcher.js");

/***/ }),

/***/ "./utils/route-regex":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-regex.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-regex.js");

/***/ }),

/***/ "../shared/lib/utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/router");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "scroll-into-view-if-needed":
/*!*********************************************!*\
  !*** external "scroll-into-view-if-needed" ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("scroll-into-view-if-needed");

/***/ }),

/***/ "slate":
/*!************************!*\
  !*** external "slate" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("slate");

/***/ }),

/***/ "slate-history":
/*!********************************!*\
  !*** external "slate-history" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("slate-history");

/***/ }),

/***/ "slate-react":
/*!******************************!*\
  !*** external "slate-react" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("slate-react");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("uuid");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/_app.js"));
module.exports = __webpack_exports__;

})();